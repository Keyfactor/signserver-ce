<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- $Id$ -->

<document>
	<properties>
		<title>SignServer APIs</title>
	</properties>

	<body>

		<section name="JavaDoc">
			<p>
				The JavaDoc for SignServer is available at SIGNSERVER_HOME/tmp/doc/index.html
				after running "ant javadoc".
			</p>

		</section>
		
		<section name="Web Services">
			<p>
				See section 14.1 in the <a href="manual.html">manual</a> for information about this API.
			</p>
		</section>
		
		<section name="Java Client API">
			<p>
				See section 14.2 in the <a href="manual.html">manual</a> for information about this API.
			</p>
		</section>

		<section name="SigningAndValidation API">
			<p>
				The SigningAndValidation API is a wrapper around the previous 
				mentioned API in order to have a simplified interface that also 
				is the same regardless if WebService or EJB Remote calls are used. 
			</p>
			<p>
				To use the API include the file signingandvalidationapi.jar 
				as well as all JAR-files in the lib-folder available in 
				SIGNSERVER_HOME/dist-client/signingandvalidationapi/.
			</p>
			<subsection name="Sample Code">
				<subsubsection name="Signing and validating an XML document">
				<p>
					<pre>
try {
    ISigningAndValidation signserver = new SigningAndValidationWS("localhost", 8080);

    // Document to sign
    byte[] unsigned = "<document><name>Some content</name></document>".getBytes();
    byte[] signed;

    // Signing
    GenericSignResponse signResp = signserver.sign("XMLSigner", unsigned);
    signed = signResp.getProcessedData();
    System.out.println("Signed: " + new String(signed));

    // Validating
    GenericValidationResponse validateResp = signserver.validate("DemoXMLValidator", signed);
    System.out.println("Valid: " + validateResp.isValid());

    if(validateResp.getSignerCertificate() != null) {
        if(validateResp.getSignerCertificate() instanceof X509Certificate) {
            X509Certificate signerCert = (X509Certificate) validateResp.getSignerCertificate();
            System.out.println("Signed by: " + signerCert.getSubjectDN().getName());
        }
    }
} catch (Exception ex) {
    ex.printStackTrace();
}
        			</pre>
				</p>
				</subsubsection>
				
				<subsubsection name="MRTD Signing">
				<p>
					<pre>
try {
    ISigningAndValidation signserver = new SigningAndValidationWS("localhost", 8080);

    // Bytes to sign
    ArrayList&lt;byte[]&gt; bytesToSign = new ArrayList&lt;byte[]&gt;();
    bytesToSign.add("Sample data 1".getBytes());
    bytesToSign.add("Sample data 2".getBytes());

    // Signing
    MRTDSignResponse signResp = (MRTDSignResponse) signserver.process("MRTDSigner", new MRTDSignRequest(1234, bytesToSign), new RequestContext());

    System.out.println("Certificate: " + signResp.getSignerCertificate());

    if(signResp.getProcessedData() instanceof Collection) {
        Collection&lt;byte[]&gt; signed = (Collection) signResp.getProcessedData();
        for(byte[] data : signed) {
            System.out.println("Signed: " + new String(Base64.encode(data)));
        }
    }
} catch (Exception ex) {
    ex.printStackTrace();
}
        			</pre>
				</p>
				</subsubsection>				
				
			
			</subsection>
		</section>

                <section name="Web Server Interface">
			<p>
				HTTP requests can be sent to the SignServer servlet GenericProcessServlet located at /signserver/process using
                                either POST or GET.
			</p>
                        <p>
                            <ul>
                                <li>
                                    HTTP GET:<br/>
                                    Fields:<br/>
                                    workerName<br/>
                                    workerId<br/>
                                    data<br/>
                                    encoding<br/>
                                    http://localhost:8080/signserver/process?workerName=XMLSigner&amp;data=%3Croot%3Ehej2%3C/root%3E<br/>
                                    http://localhost:8080/signserver/process?workerName=XMLSigner&amp;encoding=base64&amp;data=PGhlajI%2Bb2s8L2hlajI%2BCg%3D%3D
                                </li>
                                <li>
                                    HTTP POST with multipart/form-data or x-www-form-urlencoded:<br/>
                                    Fields:<br/>
                                    workerName<br/>
                                    workerId<br/>
                                    data<br/>
                                    encoding<br/>
                                    For example see /signserver/xmlsign.html (multipart/form-data) and /signserver/genericsign.html (x-www-form-urlencoded).
                                </li>
                                <li>
                                    HTTP POST with different content-type<br/>
                                    If the content-type is specified but not as "application/x-www-form-urlencoded" the whole
                                    body from the request is read and sent to the worker specified by workerName or workerId in the query string.<br/>
                                    For instance see the TimeStampClient.
                                </li>
                            </ul>

                        </p>
		</section>

	</body>
</document>
