/*************************************************************************
 *                                                                       *
 *  SignServer: The OpenSource Automated Signing Server                  *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
 
package org.signserver.module.wsra.core;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;

import org.apache.log4j.Logger;
import org.signserver.module.wsra.beans.OrganizationDataBean;
import org.signserver.module.wsra.beans.PricingDataBean;
import org.signserver.module.wsra.beans.ProductDataBean;
import org.signserver.module.wsra.beans.ProductsInOrganizationDataBean;
import org.signserver.module.wsra.beans.UserDataBean;

/**
 * Class in charge of manipulation organizations and
 * the products that they are interested in.
 * 
 * All manipulation of Organization and Products in Organization
 * data should go through this class.
 * 
 * 
 * @author Philip Vendil 11 okt 2008
 *
 * @version $Id$
 */

public class OrganizationManager {
	
	@SuppressWarnings("unused")
	private Logger log = Logger.getLogger(this.getClass());
	
	private EntityManager workerEntityManager;

	private UserManager um;
	private ProductManager pm;
		
	/**
	 * Default constructor
	 * @param workerEntityManager 
	 */
	public OrganizationManager(EntityManager workerEntityManager, UserManager um, ProductManager pm){
		this.workerEntityManager = workerEntityManager;
		this.um = um;
		this.pm = pm;
	}
	

	
	/**
	 * Method that lists all organizations
	 * 
	 * @return a list of all organizations.
	 */
	@SuppressWarnings("unchecked")
	public List<OrganizationDataBean> listOrganizations(){
		List<OrganizationDataBean> retval = new ArrayList<OrganizationDataBean>();
		
		try{
			return workerEntityManager.createNamedQuery("OrganizationDataBean.findAll").getResultList();
		}catch(NoResultException e){}
		
		return retval;
	}

	
	/**
	 * Method used to add/edit a organization in the system, important
	 * UserData and related products isn't updated with this call.
	 * organizationId is auto generated by the database.  
	 * @return the generated organization id
	 */
	public int editOrganization(OrganizationDataBean organizationData){
		OrganizationDataBean persistData = findOrganization(organizationData.getOrganizationName());
		boolean persist = false;		
				
		if(persistData == null){
			persistData = new OrganizationDataBean();
			persist = true;
		}
		persistData.setOrganizationName(organizationData.getOrganizationName());
		persistData.setDisplayName(organizationData.getDisplayName());		
		persistData.setType(organizationData.getType());
		persistData.setStatus(organizationData.getStatus());
		persistData.setComment(organizationData.getComment());
		persistData.setAllowedCProfiles(organizationData.getAllowedCProfiles());
		persistData.setAllowedIssuers(organizationData.getAllowedIssuers());
		persistData.setAllowedTProfiles(organizationData.getAllowedTProfiles());
		if(persist){
			workerEntityManager.persist(persistData);
		}
				
		return persistData.getId();
	}
	
	/**
	 * Method that removes a organization along with all
	 * it's users and product relations.
	 * 
	 * This method should generally only be called from
	 * test scripts.
	 * 
	 * @param organizationId the unique id of organization.
	 */
	public void removeOrganization(int organizationId){		
		OrganizationDataBean orgData = workerEntityManager.find(OrganizationDataBean.class, organizationId);				
		if(orgData != null){
			
			for(UserDataBean ud : orgData.getUsers()){
				um.removeUser(ud.getId());
			}
			
			for(ProductsInOrganizationDataBean pd : orgData.getProducts()){
				workerEntityManager.remove(pd);
			}
								
			workerEntityManager.remove(orgData);			
		}
	}
	
	/**
	 * Method used to find a organization from it's unique name.
	 * Returns null if no organization could be found.
	 * 
	 */
	public OrganizationDataBean findOrganization(String organizationName){
		OrganizationDataBean retval = null;		
		try{
			retval = (OrganizationDataBean) workerEntityManager.createNamedQuery("OrganizationDataBean.findByOrganizationName")
			                            .setParameter(1, organizationName)
			                            .getSingleResult();
			
		}catch(NoResultException e){}
		
		return retval;
	}
	
	/**
	 * Method used to find a organization from it's unique organizationId.
	 * Returns null if no user could be found.
	 */
	public OrganizationDataBean findOrganization(int organizationId){
		OrganizationDataBean retval = null;
		try{
			retval = (OrganizationDataBean) workerEntityManager.find(OrganizationDataBean.class, organizationId);
					
		}catch(NoResultException e){}

		return retval;
	}
	
	/**
	 * Method used to add/edit a product to organization relation.
	 * Id field is ignored since it is generated by database.
	 * 
	 * Important this doesn't edit the product itself, only
	 * the relation.
	 * 
	 * @param authData authData to add/edit
	 * @return the generated prod in org id
	 */
	public int editProductInOrganization(ProductsInOrganizationDataBean data){
		ProductsInOrganizationDataBean persistData = findProductInOrganization(data.getOrganizationId(),data.getProductId());
		boolean persist = false;		
				
		if(persistData == null){
			persistData = new ProductsInOrganizationDataBean();
			persist = true;
		}
		persistData.setOrganizationId(data.getOrganizationId());
		if(data.getPriceId() != 0){
		  persistData.setPriceId(data.getPriceId());
		}else{
			persistData.setPriceId(pm.findPrice(data.getPriceClass()).getId());
		}
		if(data.getProductId() != 0){
			persistData.setProductId(data.getProductId());	
		}else{
			persistData.setProductId(pm.findProduct(data.getProductNumber()).getId());
		}
		
		persistData.setCurrency(data.getCurrency());
		persistData.setComment(data.getComment());		
		if(persist){
			workerEntityManager.persist(persistData);
		}
						
		return persistData.getId();
	}
	
	/**
	 * Method used to find a product to organization relation.
	 * Return null if no relation could be found.
	 */
	public ProductsInOrganizationDataBean findProductInOrganization(int organizationId, int productId){
		ProductsInOrganizationDataBean retval = null;		
		try{
			retval = (ProductsInOrganizationDataBean) workerEntityManager.createNamedQuery("ProductsInOrganizationDataBean.findByOrganizationAndProduct")
			                            .setParameter(1, organizationId)
			                            .setParameter(2, productId)
			                            .getSingleResult();
			
			PricingDataBean prdb = pm.findPrice(retval.getPriceId());
			if(prdb != null){
			  retval.setPriceClass(prdb.getPriceClass());
			}
			ProductDataBean pdb = pm.findProduct(retval.getProductId());
			if(pdb != null){
			  retval.setProductNumber(pdb.getProductNumber());
			}
			
		}catch(NoResultException e){}
		
		return retval;
	}
	
	/**
	 * Method used to find a product to organization relation.
	 * Return null if no relation could be found.
	 */
	@SuppressWarnings("unchecked")
	public List<ProductsInOrganizationDataBean> findProductsInOrganization(int organizationId){
		List<ProductsInOrganizationDataBean> retval =new ArrayList<ProductsInOrganizationDataBean>();		
		try{
			retval =  workerEntityManager.createNamedQuery("ProductsInOrganizationDataBean.findByOrganization")
			                            .setParameter(1, organizationId)
			                            .getResultList();
			
			for(ProductsInOrganizationDataBean po : retval){
			  PricingDataBean prdb = pm.findPrice(po.getPriceId());
			  if(prdb != null){
				po.setPriceClass(prdb.getPriceClass());
			  }
			  ProductDataBean pdb = pm.findProduct(po.getProductId());
			  if(pdb != null){
				po.setProductNumber(pdb.getProductNumber());
			  }
			}
			
		}catch(NoResultException e){}
		
		return retval;
	}
	
	/**
	 * Method that removes a product in organization relation from the system.
	 * 
	 *
	 * 
	 * @param userId the unique id of user.
	 */
	public void removeProductInOrganization(int organizationId, int productId){
		ProductsInOrganizationDataBean data = findProductInOrganization(organizationId,productId);
		if(data != null){				              					
			workerEntityManager.remove(data);
		}
	}

}
