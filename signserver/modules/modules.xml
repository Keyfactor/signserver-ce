<?xml version="1.0" encoding="UTF-8"?>
<project name="SignServer-modules" default="default" basedir=".">

    <target name="default">
        <fail message="This script is not intented to run on its own"/>
    </target>

    <property name="signserver.home" location="../../"/>
    <property name="server.dist.dir" value="${signserver.home}/dist-server"/>
    <property name="client.dist.dir" value="${signserver.home}/dist-client"/>

    <!--
        ===================
        Module conditionals
        ===================
    -->
    <condition property="signserverws.conditionenabled">
        <istrue value="${signserverws.enabled}"/>
    </condition>
    <condition property="genericws.conditionenabled">
        <istrue value="${genericws.enabled}"/>
    </condition>
    <condition property="validationws.conditionenabled">
        <istrue value="${validationws.enabled}"/>
    </condition>
    <condition property="adminws.conditionenabled">
        <istrue value="${adminws.enabled}"/>
    </condition>
    <condition property="adminws.enabledconditionenabled">
        <istrue value="${adminws.enabled}"/>
    </condition>
    <condition property="includejaxws">
        <or>
            <istrue value="${genericws.enabled}"/>
        </or>
    </condition>
    <condition property="clusterclassloader.conditionenabled">
        <istrue value="${useclusterclassloader}"/>
    </condition>
    <condition property="webdoc.conditionenabled">
        <istrue value="${webdoc.enabled}"/>
    </condition>

    <!-- Enable clients -->
    <condition property="timestampclient.conditionenabled">
        <istrue value="${timestampclient.enabled}"/>
    </condition>
    <condition property="validationclient.conditionenabled">
        <istrue value="${validationclient.enabled}"/>
    </condition>
    <condition property="pdfperformancetest.conditionenabled">
        <istrue value="${pdfperformancetest.enabled}"/>
    </condition>
    <condition property="signingandvalidationapi.conditionenabled">
        <istrue value="${signingandvalidationapi.enabled}"/>
    </condition>
    <condition property="admingui.conditionenabled">
        <istrue value="${admingui.enabled}"/>
    </condition>
    <condition property="clientcli.conditionenabled">
        <istrue value="${clientcli.enabled}"/>
    </condition>



    <!--
        ===================
        Find the application server
        ===================
    -->
    <target name="-modules-set-appserver-home" depends="-set-from-file,-set-from-env">
        <echo message="var.APPSRV_HOME = ${var.APPSRV_HOME}"/>
        <fail unless="var.APPSRV_HOME" message="Missing variable APPSRV_HOME. Either set the environment variable APPSRV_HOME or edit ../signserver_build.propertes and set appserver.home."/>
        <property name="j2ee.server.home" value="${var.APPSRV_HOME}"/>
    </target>

    <target name="-set-from-file" unless="var.APPSRV_HOME">
        <!-- Read properties from the main SignServer configuration if available -->
        <property file="${user.home}/signserver_build.properties" />
        <property file="../../signserver_build.properties" />
        <echo message="appserver.home = ${appserver.home}"/>
        <!-- JBoss -->
        <available file="${appserver.home}/client/jbossall-client.jar" property="var.APPSRV_HOME" value="${appserver.home}" />
        <!-- GlassFish -->
        <available file="${appserver.home}/lib/appserv-rt.jar" property="var.APPSRV_HOME" value="${appserver.home}"/>
    </target>

    <target name="-set-from-env" unless="var.APPSRV_HOME">
        <!-- Get property from environment variable -->
        <property environment="env" />
        <echo message="env.APPSRV_HOME = ${env.APPSRV_HOME}"/>
        <!-- JBoss -->
        <available file="${env.APPSRV_HOME}/client/jbossall-client.jar" property="var.APPSRV_HOME" value="${env.APPSRV_HOME}" />
        <!-- GlassFish -->
        <available file="${env.APPSRV_HOME}/lib/appserv-rt.jar" property="var.APPSRV_HOME" value="${env.APPSRV_HOME}"/>
    </target>


    <!-- =================================================================== -->
    <!-- Build modules -->
    <!-- =================================================================== -->

    <target name="modules" description="Build all enabled modules">
        <echo message="Include all modules: ${includemodulesinbuild}"/>
        <subant target="-do-module" verbose="false">
            <fileset dir="modules" includes="SignServer-Module-*/build.xml"/>
        </subant>
    </target>

    <target name="-do-module-build" if="moduleEnable.condition">
        <echo message="Project ${ant.project.name} enabled"/>
        <antcall target="jar"/>
        <copy todir="${server.dist.dir}">
            <fileset dir="./dist" includes="*.mar"/>
        </copy>
    </target>

    <target name="-do-module-include" depends="-do-module-build"
        if="moduleInclude.condition">
        <echo message="Project ${ant.project.name} included"/>
        <antcall target="-module-include"/>
        <antcall target="-post-module-include"/>
    </target>

    <!-- Copies the module JAR to the EAR lib folder for inclusion. This target
        can be overridden the module project to do copy special files -->
        <target name="-module-include">
            <fail unless="moduleEnable.condition"
                message="Module '${ant.project.name}' must have enabled=true to be included."/>
            <copy todir="${server.dist.dir}/lib">
                <fileset dir="./dist" includes="*.jar"/>
            </copy>
        </target>
        
        <!-- Override this target to copy additional files. -->
        <target name="-post-module-include"/>

    <target name="-do-module">
        <echo message="Module:  ${ant.project.name}"/>
        <property file="${user.home}/signserver_build.properties"/>
        <property file="../../signserver_build.properties"/>
        <property file="../modules-project.properties"/>
        <taskdef name="setmoduleprops"
            classname="org.signserver.anttasks.SetModuleEnablePropertiesTask"
            classpath="../SignServer-Common/build/classes/"/>
        <setmoduleprops/>
        <echo message="Enable:  ${moduleEnable}"/>
        <echo message="Include: ${moduleInclude}"/>
        <condition property="moduleEnable.condition">
            <or>
                <istrue value="${moduleEnable}"/>
                <istrue value="${includemodulesinbuild}"/>
            </or>
        </condition>
        <condition property="moduleInclude.condition">
            <or>
                <istrue value="${moduleInclude}"/>
                <istrue value="${includemodulesinbuild}"/>
            </or>
        </condition>
        <antcall target="-do-module-include"/>
    </target>


    <!-- =================================================================== -->
    <!-- Client distributables                                               -->
    <!-- =================================================================== -->

    <!-- 
        Create class-path in JAR and copy jar to client-dist and its 
        dependencies to client-dist/lib.
        We do this manually to not have to rely on the copylibstask.
    -->
    <target name="-do-client-dist" 
        depends="-do-client-classpath, -do-client-dist-jar, -do-client-dist-lib"/>
    
    <!-- Copies the client JAR to client-dist -->
    <target name="-do-client-dist-jar" depends="-do-client-classpath">
        <!-- Copy JAR to client-dist -->
        <mkdir dir="${client.dist.dir}" />
        <copy todir="${client.dist.dir}" failonerror="true" file="${dist.jar}"/>
    </target>
    
    <!-- Copies all the clients dependencies to client-dist/lib -->
    <target name="-do-client-dist-lib" depends="-do-client-classpath">
        <!-- Copy dependencies to client-dist/lib -->
        <pathconvert pathsep=" " property="copy.libs">
            <path path="${run.classpath.without.build.classes.dir}"/>
            <globmapper from="${signserver.home}/*" to="*" />
        </pathconvert>
        <mkdir dir="${client.dist.dir}/lib" />
        <copy todir="${client.dist.dir}/lib" flatten="true" failonerror="true">
            <fileset includes="${copy.libs}" dir="../../" erroronmissingdir="true"/>
        </copy>
    </target>
    
    <target name="-do-client-classpath">
        <!-- Create classpath -->
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <pathconvert property="run.classpath.without.build.classes.dir">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to=""/>
        </pathconvert>
        <pathconvert pathsep=" " property="jar.classpath">
            <path path="${run.classpath.without.build.classes.dir}"/>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>

        <!-- Modify manifest -->
        <jar file="${dist.jar}" update="true">
            <manifest>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </jar>
    </target>

</project>