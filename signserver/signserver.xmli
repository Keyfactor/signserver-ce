<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!--                                                                         -->
<!--  SignServer: The OpenSource Automated Signing Server                    -->
<!--                                                                         -->
<!--  This software is free software; you can redistribute it and/or         -->
<!--  modify it under the terms of the GNU Lesser General Public             -->
<!--  License as published by the Free Software Foundation; either           -->
<!--  version 2.1 of the License, or any later version.                      -->
<!--                                                                         -->
<!--  See terms of license at gnu.org.                                       -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!-- Version: $Id$ -->
<project name="signserver_specific" basedir=".">
	   
    <import file="./build.xml"/>

    <!-- Init -->
    <target name="signserver.init">
        <antcall target="j2ee:check"/>
        <echo>
---------- CONFIGURATION PROPERTIES ----------
build.mode                          = ${build.mode}
appserver.type                      = ${appserver.type}
appserver.home                      = ${appserver.home}
web.contentencoding                 = ${web.contentencoding}
j2ee.web-nohttps                    = ${j2ee.web-nohttps}
datasource.jndi-name                = ${datasource.jndi-name}
datasource.jndi-name-prefix         = ${datasource.jndi-name-prefix}
database.name                       = ${database.name}
database.url                        = ${database.url}
database.driver                     = ${database.driver}
database.username                   = ${database.username}
database.password                   = ${database.password}
signserverws.enabled                = ${signserverws.enabled}
genericws.enabled                   = ${genericws.enabled}
validationws.enabled                = ${validationws.enabled}
adminws.enabled                     = ${adminws.enabled}
webdoc.enabled                      = ${webdoc.enabled}
timestampclient.enabled             = ${timestampclient.enabled}
validationclient.enabled            = ${validationclient.enabled}
pdfperformancetest.enabled          = ${pdfperformancetest.enabled}
useclusterclassloader               = ${useclusterclassloader}
clusterclassloader.useclassversions = ${clusterclassloader.useclassversions}
clusterclassloader.requiresignature = ${clusterclassloader.requiresignature}
signingandvalidationapi.enabled     = ${signingandvalidationapi.enabled}
admingui.enabled                    = ${admingui.enabled}
clientcli.enabled                   = ${clientcli.enabled}
includemodulesinbuild               = ${includemodulesinbuild}
module.log4j.include                = ${module.log4j.include}
module.pdfsigner.enabled            = ${module.pdfsigner.enabled}
module.pdfsigner.include            = ${module.pdfsigner.include}
module.renewal.enabled              = ${module.renewal.enabled}
module.renewal.include              = ${module.renewal.include}
module.xmlsigner.enabled            = ${module.xmlsigner.enabled}
module.xmlsigner.include            = ${module.xmlsigner.include}
module.xmlvalidator.enabled         = ${module.xmlvalidator.enabled}
module.xmlvalidator.include         = ${module.xmlvalidator.include}
module.cmssigner.enabled            = ${module.cmssigner.enabled}
module.cmssigner.include            = ${module.cmssigner.include}
module.odfsigner.enabled            = ${module.odfsigner.enabled}
module.odfsigner.include            = ${module.odfsigner.include}
module.tsa.enabled                  = ${module.tsa.enabled}
module.tsa.include                  = ${module.tsa.include}
module.mrtdsodsigner.enabled        = ${module.mrtdsodsigner.enabled}
module.mrtdsodsigner.include        = ${module.mrtdsodsigner.include}
module.mrtdsigner.enabled           = ${module.mrtdsigner.enabled}
module.mrtdsigner.include           = ${module.mrtdsigner.include}
module.wsra.enabled                 = ${module.wsra.enabled}
        </echo>
    </target>


    <!-- =================================================================== -->
    <!-- Build SignServer                                                    -->
    <!-- =================================================================== -->
    <target name="signserver" depends="signserver.ear">
    </target>

    <!-- =================================================================== -->
    <!-- Compile java sources                                                -->
    <!-- =================================================================== -->
    <target name="signserver:compile" depends="signserver-common">
        <javac destdir="${build}" debug="on" includeantruntime="no" 
            encoding="iso8859-1"
            target="${server.java.target}" source="${server.java.target}">
            <classpath refid="server.compile.classpath" />
            <src path="${src.java}" />
            <src path="${signserverejb.src.java}" />
            <src path="${signserverwar.src.java}" />
            <exclude name="org/signserver/appserver/**"/>
            <exclude name="org/signserver/cli/GenerateCertReqCommand.*"/>
            <exclude name="org/signserver/protocol/ws/client/**"/>
            <exclude name="org/signserver/client/validationservice/**"/>
            <exclude name="org/signserver/client/PerformanceTest*"/>
            <exclude name="org/signserver/client/api/**"/>
        </javac>
        <copy todir="${build}">
            <fileset dir="${src.java}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>


    <!-- =================================================================== -->
    <!-- Build signserver ejb part                                           -->
    <!-- =================================================================== -->

    <target name="signserver-ejb.jar" depends="preprocess, timeStampTestClient,
        PDFPerformanceTestTool,
        signserver:compile">
        <jar jarfile="${server.dist.dir}/signserver-ejb.jar">
            <metainf dir="${preprocessed}/deploy/ejb/persistence-mappings/${database.name}">
                <include name="entity-mappings.xml"/>
            </metainf>

            <fileset dir="." includes="signserver_server.properties"/>
            <fileset dir="${build}">
                <exclude name="org/signserver/client/**" />
            </fileset>
        </jar>
    </target>
	       
	
    <!-- =================================================================== -->
    <!-- Build web part                                                      -->
    <!-- =================================================================== -->
    <target name="web.war" depends="signserver:compile">
        <war destfile="${webwar}" webxml="${webwebxml}">
            <fileset dir="${web.src}" excludes="WEB-INF/web.xml" />
        </war>
    </target>


    <!-- =================================================================== -->
    <!-- Build health check part                                             -->
    <!-- =================================================================== -->
    <target name="healthcheck.war" depends="signserver:compile">
        <war destfile="${healthcheckwar}" webxml="${healthcheckwebxml}">
            <fileset dir="${healthcheck.src}" excludes="WEB-INF/web.xml" />
        </war>
    </target>


    <!-- SignServerWS -->
    <target name="signserverws-ejb.jar" depends="signserver-ejb.jar" if="signserverws.conditionenabled">
        <ant antfile="${signserverws.dir}/build.xml" target="dist" inheritall="false"/>
        <replace file="${eardd.src}/META-INF/application.xml" token="!--@signserverws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-SignServerWS.jar&lt;/ejb>&lt;/module>"/>
    </target>

    <!-- ValidationWS -->
    <target name="validationws-ejb.jar" depends="signserver-ejb.jar" if="signserverws.conditionenabled">
        <ant antfile="${validationws.dir}/build.xml" target="dist" inheritall="false"/>
        <replace file="${eardd.src}/META-INF/application.xml" token="!--@validationws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-ValidationWS.jar&lt;/ejb>&lt;/module>"/>
    </target>

    <!-- AdminWS -->
    <target name="adminws-ejb.jar" depends="signserver-ejb.jar" if="adminws.conditionenabled">
        <ant antfile="${adminws.dir}/build.xml" target="dist" inheritall="false"/>
        <replace file="${eardd.src}/META-INF/application.xml" token="!--@adminws-ejb.jar@-->" value="module>&lt;ejb>SignServer-ejb-AdminWS.jar&lt;/ejb>&lt;/module>"/>
    </target>


    <!-- Local documentation -->
    <target name="doc.war" if="webdoc.conditionenabled">
        <ant antfile="${webdoc.dir}/build.xml" target="dist" inheritall="false"/>
        <copy todir="${server.dist.dir}" file="${webdoc.war}" failonerror="true"/>
        <replace file="${eardd.src}/META-INF/application.xml" token="!--@SignServer-war-Doc.war@-->" value="module>&lt;web>&lt;web-uri>SignServer-war-Doc.war&lt;/web-uri>&lt;context-root>/signserver/doc&lt;/context-root>&lt;/web>&lt;/module>"/>
    </target>

    <!-- =================================================================== -->
    <!-- Build signserver.ear                                                -->
    <!-- =================================================================== -->
    <target name="signserver.ear" description="Creates master signserver.ear" depends="init, preprocess, signserver-ejb.jar, web.war, doc.war, healthcheck.war, signserverws-ejb.jar, validationws-ejb.jar, adminws-ejb.jar, modules">
        <ear destfile="${caear}" appxml="${eardd.src}/META-INF/application.xml">
            <fileset dir="${eardd.src}">
                <exclude name="META-INF/application.xml" />
            </fileset>
             <!-- EJB3 has automatic inclusion of all jars in 'lib' to the classpath. The jars should not be in
             subdirectories though so we must flatten the structure. zipfileset is a good was of flattening the structure, so
             all jar files is directly in lib directory in the ear file -->
            <zipfileset dir="lib" includes="log4j.jar,ejbca-util.jar,cert-cvc.jar,commons-lang-2.4.jar,commons-fileupload-1.2.1.jar,commons-io-1.4.jar,commons-logging.jar,commons-collections-3.2.jar" prefix="lib"/>
            <zipfileset dir="lib/asm" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/pdfsigner/itext" includes="*.jar"  prefix="lib"/>
            <zipfileset dir="lib/module/odfsigner" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/ooxmlsigner" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/module/wsra" includes="dom4j.jar,antlr.jar,cglib.jar" prefix="lib"/>
            <zipfileset dir="lib/quartz" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/${server.java.target}" includes="*.jar" prefix="lib"/>
            <zipfileset dir="lib/jaxws/" prefix="lib" >
                <include name="*.jar" if="includejaxws" />
                <exclude name="saaj*.jar"/>
            </zipfileset>
            <fileset dir="${server.dist.dir}">
                <include name="*-ejb.jar" />
                <include name="*.war" />
            </fileset>

            <!--
                Include application server depended extra JAR files.
                Edit ${appserver}.xml to define this set.
            -->
            <zipfileset refid="appserver.extralibs"/>

            <!-- Include SignServerWS -->
            <zipfileset dir="${signserverws.dir}/dist" includes="*.jar"
                erroronmissingdir="false"/>

            <!-- Include ValidationWS -->
            <zipfileset dir="${validationws.dir}/dist" includes="*.jar"
                erroronmissingdir="false"/>

            <!-- Include AdminWS -->
            <zipfileset dir="${adminws.dir}/dist" includes="*.jar"
                erroronmissingdir="false"/>

            <!-- Modules can be placed in dist-server/lib to be included in ear -->
            <zipfileset dir="${server.dist.dir}/lib" includes="*.jar" prefix="lib"/>
        </ear>
    </target>
    
    <!-- ======================================================================= -->
    <!-- Deploy Sign Server ear to JBoss                                               -->
    <!-- ======================================================================= -->
    <target name="deploy" depends="build, signserver.ear"
        description="Deploys SignServer">
        <antcall target="j2ee:deploy" />
        <antcall target="showtime" />
    </target>

    <target name="test:signserver:pre-run">
        <fail message="Please set the environment variable 'SIGNSERVER_HOME' before running the junit tests." unless="env.SIGNSERVER_HOME"/>
        <echo> Important, in order for all tests to complete must the web service, generic WS and validation web service interfaces be enabled, ClusterClassLoader with versioning enabled, and HTTPS be turned off.</echo>
        <echo> For Test-SignServerWS to complete the following must be run first:
            bin/signserver.sh setproperties modules/SignServer-Test-SignServerWS/test-configuration.properties
            bin/signserver.sh reload 7001
        </echo>
        <echo> For Test-ValidationWS to complete the following must be run first:
            bin/signserver.sh setproperties modules/SignServer-Test-ValidationWS/test-configuration.properties
            bin/signserver.sh reload 7101
        </echo>

        <delete dir="${test.dir}/reports" />
        <mkdir dir="${test.dir}/reports/html" />
    </target>

    <!-- Target that can be called to explicit compile all tests for instance
        to get rid of build errors in your IDE if you are using Eclipse -->
    <target name="test:signserver:compile" description="Compile all tests">
        <!-- SignServer-Test-SignServerWS -->
        <ant target="compile-test" inheritall="false"
            antfile="${testsignserverws.dir}/build.xml"/>

        <!-- SignServer-Test-ValidationWS -->
        <ant target="compile-test" inheritall="false"
            antfile="${testvalidationws.dir}/build.xml"/>

        <!-- SignServer-Test-AdminWS -->
        <ant target="compile-test" inheritall="false"
            antfile="${testadminws.dir}/build.xml"/>

        <!-- SignServer-Test-System -->
        <ant target="compile-test" inheritall="false"
            antfile="${testsystem.dir}/build.xml"/>
    </target>
	
    <target name="test:signserver:run" depends="test:signserver:pre-run, build"
        description="Run the default JUnit testcases">

        <!-- Run all tests defined in modules-project.properties. -->
        <subant target="test">
            <fileset dir="." includes="${tests.modules.includes}"/>
        </subant>
        <antcall target="test:report"/>
    </target>

    <target name="test:report"
        description="Create HTML test report from previously run tests">
        <!-- Create report for all tests -->
        <junitreport todir="${test.dir}/reports">
            <fileset dir="." includes="**/test/results/TEST-*.xml"/>
            <report format="frames" todir="${test.dir}/reports/html" />
        </junitreport>
        <property name="reportfile" location="${test.dir}/reports/html/index.html"/>
        <echo message="Test report available at: file://${reportfile}"/>
    </target>

    <target name="test:signserver:runall"
        depends="test:signserver:pre-run, build"
        description="Run the most JUnit testcases">

        <!-- Currently we run all tests by default. When that is no longer the
            case copy and modify the test:signserver:run target to here -->
        <antcall target="test:signserver:run"/>
    </target>

    <!-- Keept only for backwards compatibility -->
    <target name="test:signserver:runone" depends="test:runone"/>

    <target name="test:runone" description="Run a single JUnit-test specified -Dtest.runone=classname">
        <fail message="'test.runone' not set. Example -Dtest.runone=TestXMLSigner" unless="test.runone" />
        <ant antfile="${testsystem.dir}/build.xml" target="test:runone" usenativebasedir="true" inheritall="false">
            <property name="test.runone" value="${test.runone}"/>
        </ant>
    </target>

    <target name="test:signserver:pdfperformance" description="run performance test locally">
        <available file="${performanceTestToolJar}" property="perfTestExists"/>
        <antcall target="test:signserver:initpdfperformance" />
        <antcall target="j2ee:assert-run" />
        <property name="performancetest.host" value="http://localhost:8080/signserver/" />
        <property name="performancetest.runtime" value="3000" />
        <property name="performancetest.threads" value="10" />
        <property name="performancetest.intervalsize" value="1" />
        <property name="performancetest.statisticsdir" value="${tmp}/statistics/" />
        <mkdir dir="${performancetest.statisticsdir}"/>
        <echo>Starting performance tests..</echo>
        <echo>Assuming: </echo>
        <echo> - collected data to be found in ${performancetest.statisticsdir} (set by worker property STATISTICS.CSVFILE.OUTPUTDIR).</echo>
        <echo> - A PDF worker with name "PDFSigner" exists.</echo>
        <echo />
        <echo>Processed data can be found in ${performancetest.statisticsdir}.</echo>
        <delete dir="${testperf.dir}" />
        <java jar="${performanceTestToolJar}" fork="true">
            <jvmarg line="-Xmx512m -XX:+UseConcMarkSweepGC" />
            <arg line="test ${performancetest.runtime} ${performancetest.threads} ${performancetest.host}" />
        </java>
        <java jar="${performanceTestToolJar}" fork="true">
            <arg line="postprocess ${performancetest.statisticsdir} ${performancetest.intervalsize}" />
        </java>
    </target>

    <target name="test:signserver:initpdfperformance" unless="perfTestExists" >
        <antcall target="build" />
    </target>

    <target name="genservercert.jar" depends="signserver">
        <jar destfile="${tmp}/${genServerCertJar}" basedir="${build}">
            <manifest>
                <attribute name="Class-Path" value="bcprov-jdk.jar"/>
                <attribute name="Main-Class" value="org.signserver.cli.genservercert.GenServerCertificate"/>
            </manifest>
            <include name="org/signserver/cli/genservercert/*.class"/>
        </jar>
   	
    </target>
    <target name="setdbtype.jar" depends="signserver">
        <jar destfile="${tmp}/${setDBTypeJar}" basedir="${build}">
            <manifest>
                <attribute name="Class-Path" value=""/>
                <attribute name="Main-Class" value="org.signserver.cli.setdbtype.SetDBType"/>
            </manifest>
            <include name="org/signserver/cli/setdbtype/*.class"/>
        </jar>
   	
    </target>

    <target name="signserver-pkgdist" depends="signserver-pkgdist-server, signserver-pkgdist-mgmt,genservercert.jar, setdbtype.jar">
    </target>
    		
    <target name="signserver-pkgdist-server" depends="genservercert.jar, setdbtype.jar">
        <condition property="pkgdist.destdir" value="${env.DESTDIR}" else="${pkg.dist.dir}">
            <isset property="${env.DESTDIR}"/>
        </condition>
		
        <mkdir dir="${pkgdist.destdir}"/>

        <property name="pkgdist.deploydir" value="${pkgdist.destdir}/usr/share/signserver-server/deploy"/>
        <mkdir dir="${pkgdist.deploydir}"/>
        <copy todir="${pkgdist.deploydir}" >
            <fileset dir="dist-server">
                <include name="signserver.ear"/>
            </fileset>
            <fileset dir="src/appserver/jboss">
                <include name="signserver-ds.xml"/>
                <include name="signserver-mysql-cluster-ds.xml"/>
            </fileset>
        </copy>

        <property name="pkgdist.webconfdir" value="${pkgdist.destdir}/usr/share/signserver-server/webconf"/>
        <mkdir dir="${pkgdist.webconfdir}"/>
        <copy todir="${pkgdist.webconfdir}" >
            <fileset dir="src/install/common">
                <include name="tomcat-server*.xml"/>
            </fileset>
        </copy>
        <property name="pkgdist.dbconfdir" value="${pkgdist.destdir}/usr/share/signserver-server/dbconf"/>
        <mkdir dir="${pkgdist.dbconfdir}"/>
        <copy todir="${pkgdist.dbconfdir}" >
            <fileset dir="src/deploy/ejb/persistence-mappings">
                <include name="**/**"/>
            </fileset>
        </copy>
        <property name="pkgdist.logconfdir" value="${pkgdist.destdir}/usr/share/signserver-server/logconf"/>
        <mkdir dir="${pkgdist.logconfdir}"/>
        <copy todir="${pkgdist.logconfdir}" >
            <fileset dir="src/install/common">
                <include name="jboss-log4j*.xml"/>
            </fileset>
        </copy>
        <property name="pkgdist.gencertdir" value="${pkgdist.destdir}/usr/share/signserver-server/lib"/>
        <mkdir dir="${pkgdist.gencertdir}"/>
        <copy todir="${pkgdist.gencertdir}" >
            <fileset dir="${tmp}">
                <include name="${genServerCertJar}"/>
            </fileset>
        </copy>
        <copy todir="${pkgdist.gencertdir}" >
            <fileset dir="${lib}/1.5">
                <include name="bcprov-jdk.jar"/>
            </fileset>
        </copy>
        <property name="pkgdist.setdbtypedir" value="${pkgdist.destdir}/usr/share/signserver-server/lib"/>
        <mkdir dir="${pkgdist.setdbtypedir}"/>
        <copy todir="${pkgdist.setdbtypedir}" >
            <fileset dir="${tmp}">
                <include name="${setDBTypeJar}"/>
            </fileset>
        </copy>
        <property name="pkgdist.initscriptdir" value="${pkgdist.destdir}/usr/share/signserver-server/bin"/>
        <mkdir dir="${pkgdist.initscriptdir}"/>
        <copy todir="${pkgdist.initscriptdir}" >
            <fileset dir="src/install/common">
                <include name="signserver*.sh"/>
            </fileset>
            <fileset dir="bin">
                <include name="genservercert.sh"/>
            </fileset>
        </copy>

    </target>
	 	
    <target name="signserver-pkgdist-mgmt" depends="genservercert.jar, setdbtype.jar">
        <condition property="pkgdist.destdir" value="${env.DESTDIR}" else="${pkg.dist.dir}">
            <isset property="${env.DESTDIR}"/>
        </condition>
	
        <mkdir dir="${pkgdist.destdir}"/>
	 		
        <property name="pkgdist.bindir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/bin" />
        <mkdir dir="${pkgdist.bindir}"/>
		
        <property name="pkgdist.clilibdir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/lib" />
        <mkdir dir="${pkgdist.clilibdir}"/>
     		
        <copy todir="${pkgdist.bindir}">
            <fileset dir="bin">
                <include name="signserver.sh"/>
                <include name="signserver.cmd"/>
                <include name="log4j.properties"/>
            </fileset>
        </copy>
        <copy todir="${pkgdist.clilibdir}">
            <fileset dir="${client.dist.dir}">
                <include name="signserver-cli.jar"/>
            </fileset>
            <fileset dir="${client.dist.dir}/lib">
                <include name="jbossall-client.jar"/>
            </fileset>
            <fileset dir="${lib}">
                <include name="log4j.jar"/>
                <include name="cert-cvc.jar"/>
                <include name="ejbca-util.jar"/>
                <include name="commons-lang-2.4.jar"/>
            </fileset>
            <fileset dir="${lib}/1.5">
                <include name="bcprov-jdk.jar"/>
                <include name="bcmail-jdk.jar"/>
            </fileset>
            <fileset dir="${lib}/asm">
                <include name="asm-3.1.jar"/>
                <include name="asm-commons-3.1.jar"/>
            </fileset>
            <fileset dir="${lib}/ext/ejb">
                <include name="jboss-ejb3x.jar"/>
            </fileset>
            <fileset dir="${lib}/ext/james">
                <include name="james-2.3.1.jar"/>
            </fileset>
        </copy>

        <property name="pkgdist.sampleconfigdir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/sample-configs" />
        <mkdir dir="${pkgdist.sampleconfigdir}"/>
        <copy todir="${pkgdist.sampleconfigdir}">
            <fileset dir="sample-configs">
                <include name="*.*"/>
            </fileset>
        </copy>

        <property name="pkgdist.moduledir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/modules" />
        <mkdir dir="${pkgdist.moduledir}"/>
        <copy todir="${pkgdist.moduledir}">
            <fileset dir="dist-server">
                <include name="*.mar"/>
            </fileset>
        </copy>
    </target>
	
	 <!--                                                   -->
	 <!-- Target used to build the Performace-test          -->
	 <!--                                                   -->
    <target name="PDFPerformanceTestTool" depends="signserver:compile" if="pdfperformancetest.conditionenabled">
        <mkdir dir="${performanceTestToolBuild}"/>
        <javac srcdir="${src.java}" destdir="${performanceTestToolBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
            <include name="org/signserver/client/PerformanceTest*"/>
            <classpath path="${lib}/reports/jcommon-1.0.12.jar"/>
            <classpath path="${lib}/reports/jfreechart-1.0.9.jar"/>
            <classpath refid="signserver.compile.classpath"/>
        </javac>
	    
        <unzip src="${lib}/module/pdfsigner/itext/itext.jar" dest="${performanceTestToolBuild}/" />
        <unzip src="${lib}/reports/jcommon-1.0.12.jar" dest="${performanceTestToolBuild}/" />
        <unzip src="${lib}/reports/jfreechart-1.0.9.jar" dest="${performanceTestToolBuild}/" />

        <jar destfile="${performanceTestToolJar}" basedir="${performanceTestToolBuild}">
            <manifest>
	        <!--<attribute name="Class-Path" value="itext.jar"/>-->
                <attribute name="Main-Class" value="org.signserver.client.PerformanceTestTool"/>
            </manifest>
        </jar>
    </target>

	
	 <!--                                                   -->
	 <!-- Target Used to test the TimeStamp communication     -->
	 <!--                                                   -->
    <target name="timeStampTestClient" depends="signserver:compile" if="timestampclient.conditionenabled" >
        <mkdir dir="${timeStampClientBuild}"/>
        <javac srcdir="${src.java}" destdir="${timeStampClientBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
            <include name="org/signserver/client/TimeStampClient.java"/>
            <classpath refid="signserver.compile.classpath"/>
        </javac>

        <mkdir dir="${timeStampClientDir}/lib"/>
        <copy todir="${timeStampClientDir}/lib" >
            <fileset dir="${lib}">
                <include name="log4j.jar"/>
            </fileset>
            <fileset dir="${lib}/${client.java.target}">
                <include name="bcprov-jdk.jar"/>
                <include name="bcmail-jdk.jar"/>
                <include name="bctsp-jdk.jar"/>
            </fileset>
	      <!--<fileset dir="${lib}/module/tsa/${client.java.target}">
	        <include name="bctsp-jdk.jar"/>
	      </fileset>-->
            <fileset dir="${lib}/ext">
                <include name="commons-cli-1.0.jar"/>
            </fileset>
        </copy>
          
        <jar destfile="${timeStampClientJar}" basedir="${timeStampClientBuild}">
            <manifest>
                <attribute name="Class-Path" value="lib/bctsp-jdk.jar lib/bcprov-jdk.jar lib/bcmail-jdk.jar lib/commons-cli-1.0.jar lib/log4j.jar"/>
                <attribute name="Main-Class" value="org.signserver.client.TimeStampClient"/>
            </manifest>

              <!-- Place log4j.properties in root of jar. Workaround until DSS-125 -->
            <fileset dir="${src.java}/org/signserver/client">
                <include name="log4j.properties" />
            </fileset>
        </jar>
    </target>
	
     <!--                                                   -->
     <!-- Target Used to perform validations using CLI     -->
     <!--                                                   -->
    <target name="validationClient" if="validationclient.conditionenabled" >
        <ant target="test" inheritall="false"
            antfile="${clientvalidationcli.dir}/build.xml"/>
    </target>
	
     <!--                                                 -->
     <!--   Target for building signingAndValidationAPI   -->
     <!--                                                 -->
    <target name="signingAndValidationAPI" depends="signserver-ejb.jar" if="signingandvalidationapi.conditionenabled" >
        <ant target="jar" inheritall="false"
            antfile="${clientsigningandvalidationapi.dir}/build.xml"/>
        <mkdir dir="${signingAndValidationDir}/lib"/>
        <copy file="${clientsigningandvalidationapi.dir}/dist/SignServer-Client-SigningAndValidationAPI.jar" tofile="${signingAndValidationDir}/signingandvalidationapi.jar"/>
        <copy todir="${signingAndValidationDir}/lib">
            <fileset dir="${signservercommon.dir}/dist" includes="SignServer-Common.jar"/>
            <fileset dir="${signserverws.dir}/dist" includes="SignServer-ejb-SignServerWS.jar"/>
            <fileset dir="${clientsignserverws.dir}/dist" includes="SignServer-Client-SignServerWS.jar"/>
            <fileset dir="${signserverejb.dir}/dist" includes="SignServer-ejb.jar"/>
            <fileset dir="${lib}">
                <include name="commons-logging.jar"/>
                <include name="log4j.jar"/>
                <include name="cert-cvc.jar"/>
                <include name="ejbca-util.jar"/>
                <include name="commons-collections-3.2.jar"/>
                <include name="commons-io.jar"/>
                <include name="commons-lang-2.4.jar"/>
            </fileset>
            <fileset dir="${lib}/1.6">
                <include name="bcprov-jdk.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="martest">
        <taskdef name="mar" classname="org.signserver.anttasks.MarAntTask" classpathref="signserver.test.compile.classpath"/>
        <taskdef name="part" classname="org.signserver.anttasks.PartAntTask" classpathref="signserver.test.compile.classpath"/>
        <mar version="3" verbose="true" destfile="${tmp}/test.mar">
            <part name="test">
                <fileset dir="${lib}/ext">
                    <include name="commons-cli-1.0.jar"/>
                </fileset>
            </part>
            <part name="test2">
                <fileset dir="${lib}">
                    <include name="*.jar"/>
                </fileset>
            </part>
        </mar>
    </target>

</project>	
