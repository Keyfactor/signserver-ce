<?xml version="1.0"?>
<project name="signserver_specific" basedir=".">
	   
	   <import file="./build.xml"/>
	   <import file="./module-builds/pdfsigner.xml"/>
	   <import file="./module-builds/mrtdsigner.xml"/>
       <import file="./module-builds/mrtdsodsigner.xml"/>	   
	   <import file="./module-builds/tsa.xml"/>
	   <import file="./module-builds/dummyws.xml"/>
	   <import file="./module-builds/wsra.xml"/>
	   <import file="./module-builds/xmlsigner.xml"/>
	   <import file="./module-builds/ooxmlsigner.xml"/>
	   <import file="./module-builds/odfsigner.xml"/>
	   <import file="./module-builds/xmlvalidator.xml"/>
	
	   <property name="java.trustpassword" value="changeit" />
	   <property name="httpsserver.password" value="serverpwd" />


	   <property name="ejbdd.src" value="${src}/deploy/ejb" />

	   <property name="eardd.src" value="${src}/deploy/ear" />
	   <property name="caear" value="${server.dist.dir}/${app.name}.ear" />
	
		
       <property name="timeStampClientBuild" value="${bin}/timeStampClient"/>
       <property name="timeStampClientDir" value="${client.dist.dir}/timestampclient"/>
       <property name="timeStampClientJar" value="${timeStampClientDir}/timeStampClient.jar"/>
       <property name="validationClientBuild" value="${bin}/validationClient"/>
       <property name="validationClientDir" value="${client.dist.dir}/validationclient"/>
       <property name="validationClientJar" value="${validationClientDir}/validate.jar"/>
	   <property name="server.primeCard.dist" value="${primeCard.home}/dist-${server.java.target}-${ejbca.target}"/>
	   <property name="server.primeCard.catoken" value="${primeCard.home}/caTokenClasses-${server.java.target}-${ejbca.target}"/>
	   <property name="client.primeCard.dist" value="${primeCard.home}/dist-${client.java.target}-${ejbca.target}"/>
	   <property name="signingAndValidationBuild" value="${bin}/signingandvalidationapi"/>
       <property name="signingAndValidationDir" value="${client.dist.dir}/signingandvalidationapi"/>
       <property name="signingAndValidationJar" value="${signingAndValidationDir}/signingandvalidationapi.jar"/>

	   <property name="performanceTestToolBuild" value="${bin}/performanceTestTool"/>
	   <property name="performanceTestToolJar" value="${client.dist.dir}/performanceTestTool.jar"/>
	
	   <property name="genServerCertJar" value="genservercert.jar"/>
	   <property name="genServerCertBin" value="genservercert.sh"/>
       <property name="setDBTypeJar" value="setdbtype.jar"/>

	   <property name="web.src" value="${src}/web/pub" />
	   <property name="webwar" value="${server.dist.dir}/web.war" />
		
	   <property name="healthcheck.src" value="${src}/web/healthcheck" />
	   <property name="healthcheckwar" value="${server.dist.dir}/healthcheck.war" />

	   <property name="healthcheck.authorizedips" value="127.0.0.1" />
	   <property name="healthcheck.minimumfreememory" value="1" />
	   <property name="healthcheck.checkdbstring" value="Select count(*) from signerconfigdata" />
	
	   <property name="signserverws.enabled" value="true" />
	   <property name="genericws.enabled" value="true" />
	   <property name="validationws.enabled" value="false" />
	   <property name="timestampclient.enabled" value="true" />
	   <property name="validationclient.enabled" value="true" />
	   <property name="pdfperformancetest.enabled" value="false" />
	   <property name="signingandvalidationapi.enabled" value="true" />
	   <property name="useclusterclassloader" value="true" />
	   <property name="clusterclassloader.useclassversions" value="true" />
	   <property name="clusterclassloader.requiresignature" value="false" />
	
	   <path id="signserver.compile.classpath">
	        <path refid="signserver.ext.classpath" />
	        <fileset dir="lib" includes="*.jar" />
	   	    <fileset dir="lib/quartz" includes="*.jar" />
	    	<fileset dir="lib/${server.java.target}" includes="*.jar" />
	    
            <fileset dir="lib/module/tsa/${client.java.target}" includes="*.jar" />   
	        <fileset dir="lib/module/pdfsigner/itext" includes="*.jar"/>
	        <fileset dir="lib/module/odfsigner" includes="*.jar"/>
	        <fileset dir="lib/module/tsa/${client.java.target}" includes="bctsp-jdk.jar"/>
	        <fileset dir="lib/module/ooxmlsigner" includes="*.jar"/>
	   	    <fileset dir="lib/jaxws" includes="*.jar" />	 
	     	<fileset dir="lib/asm" includes="*.jar" />
    	    <fileset dir="lib/ext/james" includes="james-2.3.1.jar" />
	   	    <fileset dir="lib/ext/ejb" includes="hib*" /> 
	   	    <fileset dir="${ant.home}/lib" includes="ant.jar" />
	        <path refid="j2ee.classpath" />
	        
            <path location="tmp/jaxws/gen-classes/client" />
            <path location="tmp/validationws/gen-classes/client" />
	    </path>

	    <path id="server.compile.classpath">
	        <path refid="signserver.compile.classpath" />	    	
	    </path>
		
		
	    <path id="client.compile.classpath">
	        <fileset dir="${client.primeCard.dist}" includes="*.jar" />  	
	        <path refid="signserver.compile.classpath" />
	    </path>
	
        <path id="signserver.ext.classpath">
          <fileset dir="lib/ext" includes="*.jar" />
        </path>
        
	    <path id="j2ee.classpath">
	        <fileset dir="${appserver.home}">
	        	<!-- jboss -->
	            <include name="client/jbossall-client.jar" />
	            <include name="client/jboss-j2ee.jar" />
	            <include name="client/ejb3-persistence.jar" />
	            <include name="client/jboss-ejb3x.jar" />
	        	<!-- glassfish -->
	            <include name="lib/javaee.jar"/>
	            <include name="lib/appserv-rt.jar"/>
	        	<!-- weblogic -->
	            <include name="server/lib/weblogic.jar"/>
	        	<!-- oracle -->
	            <include name="j2ee/home/oc4jclient.jar"/>
	        	<!-- websphere -->
	            <include name="runtimes/com.ibm.*.jar"/>
	        </fileset>
	    </path>


	
      <path id="signserver.test.compile.classpath">
        <path refid="server.compile.classpath" />
        <path location="${build}" />
        <path location="${validationClientBuild}" />
        <path location="${wsraadminClientBuild}" />
        <path location="${wsraadminWSClientBuild}" />
        <path location="${dummywsClientBuild}" />
        <path location="${signingAndValidationBuild}" />
        <path refid="j2ee.classpath" />
        <path refid="jaxws.classpath" />
        <fileset dir="${lib}/module/wsra">
	      <include name="*.jar"/>
	  </fileset>
      </path>

	   <!-- those are the default values used within JBoss for easy startup -->
	    <property name="web.contentencoding" value="ISO-8859-1" />
	    <property name="datasource.jndi-name" value="SignServerDS" />
	    <property name="datasource.jndi-name-prefix" value="java:/" />
	    <property name="database.name" value="hsqldb" />
	    <property name="datasource.mapping" value="Hypersonic SQL" />
	    <property name="database.url" value="jdbc:hsqldb:$${jboss.server.data.dir}$${/}hypersonic$${/}SignServerLocalDB" />
	    <property name="database.driver" value="org.hsqldb.jdbcDriver" />
	    <property name="database.username" value="sa" />
	    <property name="database.password" value="" />
	    <property name="httpserver.pubhttp" value="8080" />
	    <property name="httpserver.pubhttps" value="8442" />
	    <property name="httpserver.privhttps" value="8443" />
        <property name="httpsserver.bindaddress.pubhttp" value="0.0.0.0" />
        <property name="httpsserver.bindaddress.pubhttps" value="0.0.0.0" />
        <property name="httpsserver.bindaddress.privhttps" value="0.0.0.0" />
	    <property name="httpsserver.password" value="serverpwd" />
	    <property name="httpsserver.keystore" value="p12/tomcat.jks" />
	    <property name="truststore.keystore" value="p12/truststore.jks" />
	    <property name="web.contentencoding" value="ISO-8859-1" />
	    <property name="deploy.ssh.user" value="jboss" />
	    <property name="deploy.ssh.keyfilepath" value="/home/jboss/.ssh/id_rsa" />
	    <property name="deploy.ssh.knownhostsfile" value="/home/jboss/.ssh/known_hosts" />
	    <property name="deploy.ssh.appsrvhome" value="/home/jboss/jboss" />
	    <property name="deploy.tomcat.version" value="tomcat55" />
	    
	    
	
    <target name="signserver.init"  unless="buildMailSigner">
    	<antcall target="j2ee:check"/>
        <echo>
---------- CONFIGURATION PROPERTIES ----------
build.mode                          = ${build.mode}
appserver.type                      = ${appserver.type}
appserver.home                      = ${appserver.home}
web.contentencoding                 = ${web.contentencoding}
datasource.jndi-name                = ${datasource.jndi-name}
datasource.jndi-name-prefix         = ${datasource.jndi-name-prefix}
database.name                       = ${database.name}
datasource.mapping                  = ${datasource.mapping}
database.url                        = ${database.url}
database.driver                     = ${database.driver}
database.username                   = ${database.username}
database.password                   = ${database.password}
signserverws.enabled                = ${signserverws.enabled}
genericws.enabled                   = ${genericws.enabled}
validationws.enabled                = ${validationws.enabled}
timestampclient.enabled             = ${timestampclient.enabled}
validationclient.enabled            = ${validationclient.enabled}
pdfperformancetest.enabled          = ${pdfperformancetest.enabled}
useclusterclassloader               = ${useclusterclassloader}
clusterclassloader.useclassversions = ${clusterclassloader.useclassversions}
clusterclassloader.requiresignature = ${clusterclassloader.requiresignature}
signingandvalidationapi.enabled     = ${signingandvalidationapi.enabled}
      </echo>
    </target>
	
	
	
		<condition property="signserverws.conditionenabled">
			<istrue value="${signserverws.enabled}"/>
		</condition>
		<condition property="genericws.conditionenabled">
			<istrue value="${genericws.enabled}"/>
		</condition>
	    <condition property="validationws.conditionenabled">
	        <istrue value="${validationws.enabled}"/>
	    </condition>
	    <condition property="includejaxws">
              <or>
                <istrue value="${signserverws.enabled}"/>
                <istrue value="${genericws.enabled}"/>
	          <istrue value="${validationws.enabled}"/>
              </or>
	    </condition>
	    <condition property="timestampclient.conditionenabled">
	        <istrue value="${timestampclient.enabled}"/>
	    </condition>
	    <condition property="validationclient.conditionenabled">
	        <istrue value="${validationclient.enabled}"/>
	    </condition>
	    <condition property="pdfperformancetest.conditionenabled">
	        <istrue value="${pdfperformancetest.enabled}"/>
	    </condition>
		<condition property="signingandvalidationapi.conditionenabled">
	        <istrue value="${signingandvalidationapi.enabled}"/>
	    </condition>
	    

	    <!-- =================================================================== -->
	    <!-- Clean SignServer related ALL                                                           -->
	    <!-- =================================================================== -->
	    <target name="signserver:clean" unless="buildMailSigner">
	    </target>
	
        <!-- =================================================================== -->
        <!-- Build SignServer                                                        -->
        <!-- =================================================================== -->	
        <target name="signserver" depends="signserver.ear"  unless="buildMailSigner">
	    </target>
	
	
	
	   <!-- =================================================================== -->
	    <!-- Compile java sources                                                -->
	    <!-- =================================================================== -->
	    <target name="signserver:compile" unless="buildMailSigner" >	    	
	        <javac destdir="${build}" debug="on" includeantruntime="no" encoding="iso8859-1" target="${server.java.target}" source="${server.java.target}">
	            <classpath refid="server.compile.classpath" />
	            <src path="${src.java}" /> 
	        	<exclude name="org/signserver/common/MailSigner*"/>
	        	<exclude name="org/signserver/mailsigner/**"/>
	        	<exclude name="org/signserver/appserver/**"/>
	        	<exclude name="org/signserver/cli/GenerateCertReqCommand.*"/>	        	
	        	<exclude name="org/signserver/protocol/ws/client/**"/>
	        	<exclude name="org/signserver/client/validationservice/**"/>
	        	<exclude name="org/signserver/client/PerformanceTest*"/>
	        	<exclude name="org/signserver/client/api/**"/>
	        </javac>
	        <copy todir="${build}">
	            <fileset dir="src/java">
	                <include name="profilemappings.properties"/>
	            </fileset>	   
		    </copy>
	    </target>
	
	   <!-- =================================================================== -->
	    <!-- Build signserver ejb part                                           -->
	    <!-- =================================================================== -->
	    <target name="signserver-ejb-jar-including-modules" if="includemodulesinbuild">
	        <echo message="Including modules in main build"/>
	        <jar jarfile="${server.dist.dir}/signserver-ejb.jar">
	        	<metainf dir="${preprocessed}/appserver/${appserver.type}">
	        			<include name="persistence.xml"/>
	        	</metainf>
	        	<metainf dir="${src}/deploy/ejb/persistence-mappings/${database.name}">
	    	            <include name="entity-mappings.xml"/>
	    	    </metainf>
	        	
	        	<fileset dir="." includes="signserver_server.properties"/>
	        	<!-- This file is included automatically from ${build} <fileset dir="src/java" includes="profilemappings.properties"/> -->
	            <fileset dir="${build}">
	          	  <exclude name="org/signserver/cli/**" />
	          	  <exclude name="org/signserver/client/**" />
   	        	  <exclude name="org/signserver/common/MailSigner*"/>
   	        	  <!--
	          	  <exclude name="org/signserver/module/**" />
	          	  -->
	          	  <exclude  name="org/signserver/protocol/validationservice/ws/**" />
                  <exclude name="org/signserver/server/genericws/**" />
	              <exclude  name="org/signserver/protocol/ws/**" />
		          <exclude name="org/signserver/mailsigner/**" />
	        	</fileset>
	        </jar>
	    </target>
	    <target name="signserver-ejb-jar-excluding-modules" unless="includemodulesinbuild">
	        <echo message="Not including modules in main build"/>
	        <jar jarfile="${server.dist.dir}/signserver-ejb.jar">
	        	<metainf dir="${preprocessed}/appserver/${appserver.type}">
	        			<include name="persistence.xml"/>
	        	</metainf>
	        	<metainf dir="${src}/deploy/ejb/persistence-mappings/${database.name}">
	    	            <include name="entity-mappings.xml"/>
	    	    </metainf>
	        	
	        	<fileset dir="." includes="signserver_server.properties"/>
	        	<!-- This file is included automatically from ${build} <fileset dir="src/java" includes="profilemappings.properties"/> -->
	            <fileset dir="${build}">
	          	  <exclude name="org/signserver/cli/**" />
	          	  <exclude name="org/signserver/client/**" />
   	        	  <exclude name="org/signserver/common/MailSigner*"/>
	          	  <exclude name="net/sourceforge/scuba/**" />
	          	  <exclude name="org/jmrtd/**" />
	          	  <exclude name="org/signserver/module/**" />
	          	  <exclude  name="org/signserver/protocol/validationservice/ws/**" />
                  <exclude name="org/signserver/server/genericws/**" />
	              <exclude  name="org/signserver/protocol/ws/**" />
		          <exclude name="org/signserver/mailsigner/**" />
	        	</fileset>
	        </jar>
	    </target>
	    
	    <target name="signserver-ejb.jar" depends="timeStampTestClient, PDFPerformanceTestTool, signserver:compile, validationClient, signingAndValidationAPI, signserver-ejb-jar-including-modules, signserver-ejb-jar-excluding-modules" unless="buildMailSigner">
	    </target>
	       

		
	    <!-- =================================================================== -->
	    <!-- Build web part                                                                                                                             -->
	    <!-- =================================================================== -->
	    <target name="web.war" depends="signserver:compile" unless="buildMailSigner">
	        <war destfile="${webwar}" webxml="${web.src}/WEB-INF/web.xml">
	            <fileset dir="${web.src}" excludes="WEB-INF/web.xml" />
	        </war>
	    </target>
		
	    <!-- =================================================================== -->
	    <!-- Build health check part                                                                                                                             -->
	    <!-- =================================================================== -->
	    <target name="healthcheck.war" depends="signserver:compile" unless="buildMailSigner">
	        <war destfile="${healthcheckwar}" webxml="${healthcheck.src}/WEB-INF/web.xml">
	            <fileset dir="${healthcheck.src}" excludes="WEB-INF/web.xml" />

	        </war>
	    </target>
	            	
	        		
	   <!-- =================================================================== -->
	   <!-- Build WebService interface part                                                                                                                             -->
       <!-- =================================================================== -->
	   <path id="jaxws.classpath">
	    	<fileset dir="lib/jaxws">
	    	  <include name="**/*.jar"/>
	    	</fileset> 
	    	<pathelement location="${java.home}/../lib/tools.jar"/>
	    	<pathelement location="${build}"/>
	    	<path refid="signserver.compile.classpath" />
	    </path>
		
		
	    <target name="ws.common.init" unless="buildMailSigner">
		    <taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen" >
		        <classpath refid="jaxws.classpath"/>		    	
		    </taskdef>
		
	        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
	            <classpath refid="jaxws.classpath"/>
	        </taskdef>
	    </target>
		
	    <target name="ws.init" depends="init,  ws.common.init" if="signserverws.conditionenabled" unless="buildMailSigner">
	    	<mkdir dir="${tmp}/jaxws/gen-classes/server"/>
	    	<mkdir dir="${tmp}/jaxws/gen-classes/client"/>
	    	

	    </target>
	
	

		
		<target depends="ws.init" name="ws.gen.server" if="signserverws.conditionenabled" unless="buildMailSigner">
	       <wsgen  fork="true" sei="org.signserver.protocol.ws.server.SignServerWS"
	       	     genwsdl="true" destdir="${tmp}/jaxws/gen-classes/server"
	            debug="true" xendorsed="true">
	       	  
			 <classpath>
			  <path refid="jaxws.classpath" /> 
			  <pathelement location="src" /> 
			 </classpath>

			  </wsgen>
		</target>
		
	    <target name="signserverws.war" depends="ws.gen.server, ws.gen.client" if="signserverws.conditionenabled" unless="buildMailSigner">
	        <copy todir="${tmp}/jaxws/gen-classes/server">
	    	  <fileset dir="${build}">
	            <include name="org/signserver/protocol/ws/*.class"/> 
	    	  	<include name="org/signserver/protocol/ws/server/*.class"/>  
	          </fileset>
	        </copy>	
	    	
	    	<replace file="${eardd.src}/META-INF/application.xml" token="!--@signserverws.war@-->" value="module>&lt;web>&lt;web-uri>signserverws.war&lt;/web-uri>&lt;context-root>/signserver/signserverws&lt;/context-root>&lt;/web>&lt;/module>"/>
	        <war warfile="${server.dist.dir}/signserverws.war" webxml="${src}/jaxws/web.xml">
	            <webinf dir="src/jaxws" includes="sun-jaxws.xml"/>
	            <!-- <zipfileset
	                    dir="tmp/jaxws/wsdl"
	                    includes="*.wsdl, *.xsd"
	                    prefix="WEB-INF/wsdl"/> -->
	            <classes dir="${tmp}/jaxws/gen-classes/server"/>
	         <!--<lib dir="lib/jaxws" includes="*.jar" />     --> 
	        </war>
	    </target>
		
		
	    <target name="ws.gen.client" depends="ws.init, ws.gen.server" if="signserverws.conditionenabled" unless="buildMailSigner">
	        <wsimport 
	                destdir="${tmp}/jaxws/gen-classes/client"
	                wsdl="${tmp}/jaxws/gen-classes/server/SignServerWSService.wsdl" >
	        </wsimport>
	    </target>
	    
	    <target name="ws.compile.client" depends="ws.init, ws.gen.server" if="signserverws.conditionenabled" unless="buildMailSigner">	    	
	        <javac destdir="${build}" debug="on" includeantruntime="no" encoding="iso8859-1" target="${server.java.target}" source="${server.java.target}">
	            <classpath refid="server.compile.classpath" />
	            <src path="${src.java}" /> 	        	
	        	<include name="org/signserver/protocol/ws/client/**"/>
	        	<include name="org/signserver/protocol/ws/client/cli/**"/>
	        </javac>
	    </target>

	    <target name="ws.build.client" depends="ws.init, ws.compile.client" if="signserverws.conditionenabled" unless="buildMailSigner">
	    	
	    	<mkdir dir="${tmp}/signserverwscli.jar"/>
	    	<mkdir dir="${tmp}/signserverwscli.jar/META-INF"/>
	    	<mkdir dir="${basedir}/dist-client/signserverwscli/lib"/>

	        <copy todir="${tmp}/signserverwscli.jar">
	            <fileset dir="${build}">
	              <include name="org/signserver/protocol/ws/client/*.class"/>
	              <include name="org/signserver/protocol/ws/client/cli/*.class"/>
	              <include name="org/signserver/protocol/ws/*.class"/> 
	              <include name="org/signserver/cli/*.class"/>
	              <include name="org/signserver/common/*.class"/>
	              <include name="org/signserver/groupkeyservice/common/*.class"/>
	              <include name="org/signserver/validationservice/common/*.class"/>
	            </fileset>	
	            <fileset dir="${tmp}/jaxws/gen-classes/client">
	              <include name="**/*.class"/>
	            </fileset>	
	            <fileset dir="${src.java}">
		              <include name="log4j.properties"/>
		              <include name="profilemappings.properties"/>
		        </fileset>
		    </copy> 
	 
	        <copy todir="dist-client/signserverwscli/lib">
	            <fileset dir="${lib}">        
	              <include name="log4j.jar"/>      
	              <include name="commons-lang-2.4.jar"/>
	              <include name="ejbca-util.jar"/>
	              <include name="cert-cvc.jar"/>
	            </fileset>	
	            <fileset dir="${lib}/${client.java.target}">        
	              <include name="bcprov-jdk.jar"/>                  	
	            </fileset>	    
		        <fileset dir="${lib}/jaxws">
					<include name="activation.jar" />
					<include name="FastInfoset.jar" />
				    <include name="http.jar" />
					<include name="jaxb-api.jar" />
				    <include name="jaxb-impl.jar" />
				    <include name="jaxb-xjc.jar" />
					<include name="jaxws-api.jar" />
				    <include name="jaxws-rt.jar" />
		        	<include name="jaxws-tools.jar" />
				    <include name="jsr173_api.jar" />
				 	<include name="jsr181-api.jar" />
				    <include name="jsr250-api.jar" />
		        	<include name="mimepull.jar" />
					<include name="resolver.jar" />
				    <include name="saaj-api.jar" />
					<include name="saaj-impl.jar" />
					<include name="sjsxp.jar" />
		        	<include name="stax-ex.jar" />
					<include name="streambuffer.jar" />
				</fileset>
		    </copy>    	
		    <copy todir="dist-client/signserverwscli/">
	            <fileset dir="${src}/jaxws/cli">
	                <include name="*.*" />
	            </fileset>
	        </copy> 
	    	              
	        <jar destfile="dist-client/signserverwscli/signserverwscli.jar" basedir="${tmp}/signserverwscli.jar">
	          <manifest>
	          	<attribute name="Class-Path" value="lib/bcprov-jdk.jar lib/ejbca-util.jar lib/cert-cvc.jar lib/log4j.jar lib/activation.jar lib/FastInfoset.jar lib/http.jar lib/jaxb-api.jar lib/jaxb-impl.jar  lib/jaxb-xjc.jar lib/jaxws-api.jar lib/jaxws-rt.jar lib/jaxws-tools.jar lib/jsr173_api.jar lib/jsr181-api.jar lib/jsr250-api.jar lib/mimepull.jar lib/resolver.jar lib/saaj-api.jar lib/saaj-impl.jar lib/sjsxp.jar lib/stax-ex.jar lib/streambuffer.jar lib/commons-lang-2.4.jar"/>
	            <attribute name="Main-Class" value="org.signserver.protocol.ws.client.cli.WSCLI"/>
	          </manifest>
	        </jar>    	    	
	    </target>

	    <target name="signserverws.client" depends="ws.build.client" if="signserverws.conditionenabled" />

	   <!-- =================================================================== -->
	   <!-- Build Validation Service Web Service                                -->
	   <!-- =================================================================== -->	        			
	  
	  <target name="validationws.init" depends="init,  ws.common.init" if="validationws.conditionenabled" unless="buildMailSigner">
	      <mkdir dir="${tmp}/validationws/gen-classes/server"/>
	      <mkdir dir="${tmp}/validationws/gen-classes/client"/>
	  </target>
	        	
	  <target depends="validationws.init" name="validationws.gen.server" if="validationws.conditionenabled" unless="buildMailSigner">
	     <wsgen  fork="true" sei="org.signserver.protocol.validationservice.ws.server.ValidationWS"
	        	       	     genwsdl="true" destdir="${tmp}/validationws/gen-classes/server"
	        	            debug="true" xendorsed="true">
	        <classpath>
	          <path refid="jaxws.classpath" /> 
	          <pathelement location="src" /> 
	        </classpath>
         </wsgen>
	  </target>

	  <target name="validationws.war" depends="validationws.gen.server, validationws.gen.client" if="validationws.conditionenabled" unless="buildMailSigner">
	     <copy todir="${tmp}/validationws/gen-classes/server">
	        <fileset dir="${build}">
	        	<include name="org/signserver/protocol/validationservice/ws/*.class"/> 
	        	<include name="org/signserver/protocol/validationservice/ws/server/*.class"/>  
	        </fileset>
	    </copy>	
	        	    	
	    <replace file="${eardd.src}/META-INF/application.xml" token="!--@validationws.war@-->" value="module>&lt;web>&lt;web-uri>validationws.war&lt;/web-uri>&lt;context-root>/signserver/validationws&lt;/context-root>&lt;/web>&lt;/module>"/>
	    <war warfile="${server.dist.dir}/validationws.war" webxml="${src}/validationws/web.xml">
	        <webinf dir="src/validationws" includes="sun-jaxws.xml"/>
	        	<classes dir="${tmp}/validationws/gen-classes/server"/>
	        	<!--<lib dir="lib/jaxws" includes="*.jar" />     -->   		
	    </war>
	   </target>
	        			        		
	   <target name="validationws.gen.client" depends="validationws.init, validationws.gen.server" if="validationws.conditionenabled" unless="buildMailSigner">	    	
	      <wsimport destdir="${tmp}/validationws/gen-classes/client"
	        	    wsdl="${tmp}/validationws/gen-classes/server/ValidationWSService.wsdl">
	      </wsimport>
	   </target>
		
	    <!-- =================================================================== -->
	    <!-- Build signserver.ear                                                        -->
	    <!-- =================================================================== -->
	    <target name="signserver.ear" description="Creates master signserver.ear" depends="init, preprocess, signserver-ejb.jar, web.war, healthcheck.war, signserverws.war, validationws.war, signserverws.client, pdfsignermar, xmlsignermar,odfsignermar,ooxmlsignermar, xmlvalidatormar, tsamar, mrtdsignermar, mrtdsodsignermar, dummywsmar, wsramar" unless="buildMailSigner" >
	        <ear destfile="${caear}" appxml="${eardd.src}/META-INF/application.xml">         		
	            <fileset dir="${eardd.src}">
	                <exclude name="META-INF/application.xml" />
	            </fileset>
	            	 <!-- EJB3 has automatic inclusion of all jars in 'lib' to the classpath. The jars should not be in
	                 subdirectories though so we must flatten the structure. zipfileset is a good was of flattening the structure, so 
	                 all jar files is directly in lib directory in the ear file -->
	            <zipfileset dir="lib" includes="log4j.jar,ejbca-util.jar,cert-cvc.jar,ldap.jar,commons-lang-2.4.jar,commons-fileupload-1.2.1.jar,commons-io-1.4.jar" prefix="lib"/>
	            <zipfileset dir="lib/asm" includes="*.jar" prefix="lib"/>
	            <zipfileset dir="lib/module/pdfsigner/itext" includes="*.jar"  prefix="lib"/>
	            <zipfileset dir="lib/module/odfsigner" includes="*.jar" prefix="lib"/>
	            <zipfileset dir="lib/module/ooxmlsigner" includes="*.jar" prefix="lib"/>
	            <zipfileset dir="lib/module/tsa/${client.java.target}" includes="bctsp-jdk.jar" prefix="lib"/>
	            <zipfileset dir="lib/quartz" includes="*.jar" prefix="lib"/>
	            <zipfileset dir="lib/${server.java.target}" includes="*.jar" prefix="lib"/>
	            <zipfileset dir="lib/jaxws/" includes="*.jar" prefix="lib" >
                     <include name="*.jar" if="includejaxws" />
                  </zipfileset>
	            <fileset dir="${server.dist.dir}">
	                <include name="*-ejb.jar" />
	                <include name="*.war" />
	            </fileset> 
			</ear>
	    </target>
		
    <!-- ======================================================================= -->
    <!-- Deploy Sign Server ear to JBoss                                               -->
    <!-- ======================================================================= -->
    <target name="deploy" depends="signserver.ear, signserver-cli" unless="buildMailSigner" description="Deploys SignServer">
        <antcall target="j2ee:deploy" />
	<antcall target="showtime" />
    </target>
	
    <target name="test:signserver:compile" description="compile JUnit testcases" depends="ws.compile.client" unless="buildMailSigner">
        <mkdir dir="${test.dir}" />       
        <javac srcdir="${test.src.dir}" destdir="${test.dir}" debug="on" includeantruntime="no" encoding="iso8859-1"  target="${server.java.target}" source="${server.java.target}">
            <classpath refid="signserver.test.compile.classpath" />
        	<exclude name="org/signserver/mailsigner/**"/>
        	<!-- <exclude name="org/signserver/protocol/validationservice/ws/**"/>
        	<exclude name="org/signserver/protocol/ws/**"/> -->
        </javac>
        <!-- jndi.properties needs to be in the classpath -->
        <copy file="${src.java}/jndi.properties" todir="${test.dir}" />
    </target>
	
    <target name="test:signserver:run" depends="test:signserver:compile" description="run JUnit testcases" unless="buildMailSigner">
        <fail message="Please set the environment variable 'SIGNSERVER_HOME' before running the junit tests." unless="env.SIGNSERVER_HOME"/>
        <echo> Important, in order for all tests to complete must the web service, generic WS and validation web service interfaces be enabled, ClusterClassLoader with versioning enabled, and HTTPS be turned off.</echo>
        <delete dir="${test.dir}/reports" />
        <mkdir dir="${test.dir}/reports/html" />
        <junit printsummary="yes" haltonfailure="no" showoutput="true">
            <classpath>
                <path refid="signserver.test.compile.classpath" />
                <path location="${test.dir}" />
            </classpath>
            <formatter usefile="false" type="brief"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.dir}/reports">
                <fileset dir="${test.dir}">
                    <include name="**/ejb/Test*" />
                	<include name="**/common/Test*" />
                	<include name="**/common/clusterclassloader/Test*" />
                	<include name="**/module/**/Test*" />
                    <include name="**/server/Test*" />
                	<include name="**/server/service/Test*" />
                	<include name="**/server/validcache/Test*" />
                	<include name="**/server/statistics/Test*" />
                  <include name="**/server/genericws/Test*" />
                	<include name="**/server/clusterclassloader/Test*" />
                	<include name="**/server/statistics/nonpersistent/Test*" />
                	<include name="**/groupkeyservice/Test*" />
                	<include name="**/cli/TestSignServer*" />
                	<include name="**/client/validationservice/Test*" />
                	<include name="**/client/api/Test*" />
                	<include name="**/protocol/validationservice/ws/Test*" />
                	<include name="**/protocol/ws/Test*" />
                	<include name="**/wsra/Test*" />
                	<include name="**/wsra/**/Test*" />
                    <exclude name="**/*Continously*" />
                    <exclude name="**/TestRunner*" />
                	<exclude name="**/db/*" />
                	<exclude name="**/mailsigner/**" />
                	<exclude name="**/cli/TestMail**" />
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${test.dir}/reports">
            <fileset dir="${test.dir}/reports">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.dir}/reports/html" />
        </junitreport> 
    </target>

    <target name="test:signserver:runone" depends="test:signserver:compile" description="run a single JUnit-test specified -Dtest.runone=classname" unless="buildMailSigner">
        <fail message="Please set the environment variable 'SIGNSERVER_HOME' before running the junit tests." unless="env.SIGNSERVER_HOME"/>
        <fail message="'test.runone' not set. Example -Dtest.runone=TestXMLSigner " unless="test.runone" />
        <echo> Important, in order for all tests to complete must the web service, generic WS and validation web service interfaces be enabled, ClusterClassLoader with versioning enabled, and HTTPS be turned off.</echo>
        <delete dir="${test.dir}/reports" />
        <mkdir dir="${test.dir}/reports/html" />
        <junit printsummary="yes" haltonfailure="no" showoutput="true">
            <classpath>
                <path refid="signserver.test.compile.classpath" />
                <path location="${test.dir}" />
            </classpath>
            <formatter usefile="false" type="brief"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.dir}/reports">
                <fileset dir="${test.dir}">
                    <include name="**/${test.runone}.class" />
                    <exclude name="**/*Continously*" />
                    <exclude name="**/TestRunner*" />
                	<exclude name="**/db/*" />
                	<exclude name="**/mailsigner/**" />
                	<exclude name="**/cli/TestMail**" />
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${test.dir}/reports">
            <fileset dir="${test.dir}/reports">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.dir}/reports/html" />
        </junitreport> 
    </target>

    <target name="test:signserver:pdfperformance" description="run performance test locally" unless="buildMailSigner">
        <available file="${performanceTestToolJar}" property="perfTestExists"/>
        <antcall target="test:signserver:initpdfperformance" />
        <antcall target="j2ee:assert-run" />
      	<property name="performancetest.host" value="http://localhost:8080/signserver/" />
       	<property name="performancetest.runtime" value="3000" />
       	<property name="performancetest.threads" value="10" />
       	<property name="performancetest.intervalsize" value="1" />
       	<property name="performancetest.statisticsdir" value="${tmp}/statistics/" />
    	<mkdir dir="${performancetest.statisticsdir}"/>
        <echo>Starting performance tests..</echo>
        <echo>Assuming: </echo>
        <echo> - collected data to be found in ${performancetest.statisticsdir} (set by worker property STATISTICS.CSVFILE.OUTPUTDIR).</echo>
        <echo> - A PDF worker with name "PDFSigner" exists.</echo>
        <echo />
        <echo>Processed data can be found in ${performancetest.statisticsdir}.</echo>
        <delete dir="${testperf.dir}" />
        <java jar="${performanceTestToolJar}" fork="true">
            <jvmarg line="-Xmx512m -XX:+UseConcMarkSweepGC" />
            <arg line="test ${performancetest.runtime} ${performancetest.threads} ${performancetest.host}" />
        </java>
        <java jar="${performanceTestToolJar}" fork="true">
        	<arg line="postprocess ${performancetest.statisticsdir} ${performancetest.intervalsize}" />
        </java>
    </target>

    <target name="test:signserver:initpdfperformance" unless="perfTestExists" >
        <antcall target="build" />
    </target>

   <target name="genservercert.jar" depends="signserver" unless="buildMailSigner">
    		<jar destfile="${tmp}/${genServerCertJar}" basedir="${build}">
  	          <manifest>
  	          	<attribute name="Class-Path" value="bcprov-jdk.jar"/>
  	            <attribute name="Main-Class" value="org.signserver.cli.genservercert.GenServerCertificate"/>
  	          </manifest>
              <include name="org/signserver/cli/genservercert/*.class"/>    	          
    		</jar>
   	
    </target>
    <target name="setdbtype.jar" depends="signserver" unless="buildMailSigner">
    		<jar destfile="${tmp}/${setDBTypeJar}" basedir="${build}">
  	          <manifest>
  	          	<attribute name="Class-Path" value=""/>
  	            <attribute name="Main-Class" value="org.signserver.cli.setdbtype.SetDBType"/>
  	          </manifest>
              <include name="org/signserver/cli/setdbtype/*.class"/>    	          
    		</jar>
   	
    </target>

 	<target name="signserver-pkgdist" depends="signserver-pkgdist-server, signserver-pkgdist-mgmt,genservercert.jar, setdbtype.jar" unless="buildMailSigner">
	</target>
    		
	<target name="signserver-pkgdist-server" depends="genservercert.jar, setdbtype.jar" unless="buildMailSigner">
	  <condition property="pkgdist.destdir" value="${env.DESTDIR}" else="${pkg.dist.dir}">
	  	<isset property="${env.DESTDIR}"/>
	  </condition>
		
	   <mkdir dir="${pkgdist.destdir}"/>

	   <property name="pkgdist.deploydir" value="${pkgdist.destdir}/usr/share/signserver-server/deploy"/>
	   <mkdir dir="${pkgdist.deploydir}"/>
	   <copy todir="${pkgdist.deploydir}" >
		  <fileset dir="dist-server">
		  	<include name="signserver.ear"/>
		  </fileset>
		  <fileset dir="src/appserver/jboss">
		  	<include name="signserver-ds.xml"/>
		  	<include name="signserver-mysql-cluster-ds.xml"/>
		  </fileset>
	   </copy>

	   <property name="pkgdist.webconfdir" value="${pkgdist.destdir}/usr/share/signserver-server/webconf"/>
	   <mkdir dir="${pkgdist.webconfdir}"/>	
	   <copy todir="${pkgdist.webconfdir}" >
	       <fileset dir="src/install/common">
			 <include name="tomcat-server*.xml"/>			 
			</fileset>
		</copy>	
	   <property name="pkgdist.dbconfdir" value="${pkgdist.destdir}/usr/share/signserver-server/dbconf"/>
         <mkdir dir="${pkgdist.dbconfdir}"/> 
         <copy todir="${pkgdist.dbconfdir}" >
             <fileset dir="src/deploy/ejb/persistence-mappings">
               <include name="**/**"/>            
              </fileset>
         </copy> 
	   <property name="pkgdist.logconfdir" value="${pkgdist.destdir}/usr/share/signserver-server/logconf"/>
	   <mkdir dir="${pkgdist.logconfdir}"/> 
	   <copy todir="${pkgdist.logconfdir}" >
	      <fileset dir="src/install/common">
	         <include name="jboss-log4j*.xml"/>            
	      </fileset>
	    </copy>
	    <property name="pkgdist.gencertdir" value="${pkgdist.destdir}/usr/share/signserver-server/lib"/>
	    <mkdir dir="${pkgdist.gencertdir}"/>
	    <copy todir="${pkgdist.gencertdir}" >
		   <fileset dir="${tmp}">
		     <include name="${genServerCertJar}"/>			 
		   </fileset>
	    </copy>	
		<copy todir="${pkgdist.gencertdir}" >
		   <fileset dir="${lib}/1.5">
		     <include name="bcprov-jdk.jar"/>			 
		   </fileset>
	    </copy>	
	    <property name="pkgdist.setdbtypedir" value="${pkgdist.destdir}/usr/share/signserver-server/lib"/>
		<mkdir dir="${pkgdist.setdbtypedir}"/>
		<copy todir="${pkgdist.setdbtypedir}" >
		   <fileset dir="${tmp}">
		     <include name="${setDBTypeJar}"/>			 
		   </fileset>
	    </copy>	
	    <property name="pkgdist.initscriptdir" value="${pkgdist.destdir}/usr/share/signserver-server/bin"/>
	    <mkdir dir="${pkgdist.initscriptdir}"/>
	    <copy todir="${pkgdist.initscriptdir}" >
	      <fileset dir="src/install/common">
	        <include name="signserver*.sh"/>           
	      </fileset>
	      <fileset dir="bin">
		     <include name="genservercert.sh"/>
		   </fileset>
	    </copy>		

	 </target>
	 	
	 <target name="signserver-pkgdist-mgmt" depends="genservercert.jar, setdbtype.jar" unless="buildMailSigner">
	    <condition property="pkgdist.destdir" value="${env.DESTDIR}" else="${pkg.dist.dir}">
    	  <isset property="${env.DESTDIR}"/>
    	</condition>
	
	    <mkdir dir="${pkgdist.destdir}"/>
	 		
		<property name="pkgdist.bindir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/bin" />
		<mkdir dir="${pkgdist.bindir}"/>
		
		<property name="pkgdist.clilibdir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/lib" />
     	<mkdir dir="${pkgdist.clilibdir}"/>
     		
		<copy todir="${pkgdist.bindir}">
		   <fileset dir="bin">
		     <include name="signserver.sh"/>
		   	 <include name="signserver.cmd"/>
		   	 <include name="log4j.properties"/>
		   </fileset>
	    </copy>		
		<copy todir="${pkgdist.clilibdir}">
		   <fileset dir="${client.dist.dir}">
		     <include name="signserver-cli.jar"/>		   	 
		   </fileset>
		   <fileset dir="${client.dist.dir}/lib">
			 <include name="jbossall-client.jar"/>		   	 
		   </fileset>
		   <fileset dir="${lib}">
		     <include name="log4j.jar"/>
			 <include name="cert-cvc.jar"/>
			 <include name="ejbca-util.jar"/>
			 <include name="commons-lang-2.4.jar"/>
		  </fileset>
	      <fileset dir="${lib}/1.5">
			 <include name="bcprov-jdk.jar"/>
			 <include name="bcmail-jdk.jar"/>
		  </fileset>
		  <fileset dir="${lib}/asm">
		     <include name="asm-3.1.jar"/>
		     <include name="asm-commons-3.1.jar"/>
		  </fileset>
		  <fileset dir="${lib}/ext/ejb">
		     <include name="jboss-ejb3x.jar"/>
		  </fileset>	
	      <fileset dir="${lib}/ext/james">
			 <include name="james-2.3.1.jar"/>
		  </fileset>
	    </copy>	

		<property name="pkgdist.sampleconfigdir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/sample-configs" />
		<mkdir dir="${pkgdist.sampleconfigdir}"/>
	    <copy todir="${pkgdist.sampleconfigdir}">
	       <fileset dir="sample-configs">
	         <include name="*.*"/>
	       </fileset>
	    </copy> 

	    <property name="pkgdist.moduledir" value="${pkgdist.destdir}/usr/share/signserver-mgmt/modules" />
        <mkdir dir="${pkgdist.moduledir}"/>
        <copy todir="${pkgdist.moduledir}">
           <fileset dir="dist-server">
             <include name="*.mar"/>
           </fileset>
        </copy>
    </target>
	
	 <!--                                                   -->
	 <!-- Target used to build the Performace-test          -->
	 <!--                                                   -->
	  <target name="PDFPerformanceTestTool" depends="signserver:compile" unless="buildMailSigner" if="pdfperformancetest.conditionenabled">
	    <mkdir dir="${performanceTestToolBuild}"/>
	    <javac srcdir="${src.java}" destdir="${performanceTestToolBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
		   <include name="org/signserver/client/PerformanceTest*"/>
            <classpath path="${lib}/reports/jcommon-1.0.12.jar"/>
            <classpath path="${lib}/reports/jfreechart-1.0.9.jar"/>
		   <classpath refid="signserver.compile.classpath"/> 
	    </javac>
	    
	    <unzip src="${lib}/module/pdfsigner/itext/itext.jar" dest="${performanceTestToolBuild}/" />
	    <unzip src="${lib}/reports/jcommon-1.0.12.jar" dest="${performanceTestToolBuild}/" />
	    <unzip src="${lib}/reports/jfreechart-1.0.9.jar" dest="${performanceTestToolBuild}/" />

	    <jar destfile="${performanceTestToolJar}" basedir="${performanceTestToolBuild}">
	      <manifest>
	        <!--<attribute name="Class-Path" value="itext.jar"/>-->
	        <attribute name="Main-Class" value="org.signserver.client.PerformanceTestTool"/>
	      </manifest>
	    </jar>
	  </target>

	
	 <!--                                                   -->
	 <!-- Target Used to test the TimeStamp communication     -->
	 <!--                                                   -->
	  <target name="timeStampTestClient" depends="signserver:compile" unless="buildMailSigner" if="timestampclient.conditionenabled" >
	    <mkdir dir="${timeStampClientBuild}"/>
	    <javac srcdir="${src.java}" destdir="${timeStampClientBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
		   <include name="org/signserver/client/TimeStampClient.java"/> 	       
		   <classpath refid="signserver.compile.classpath"/> 
	    </javac>

          <mkdir dir="${timeStampClientDir}/lib"/>
	    <copy todir="${timeStampClientDir}/lib" >
              <fileset dir="${lib}">
                <include name="log4j.jar"/>
              </fileset>
	      <fileset dir="${lib}/${client.java.target}">
	        <include name="bcprov-jdk.jar"/>	        
	      	<include name="bcmail-jdk.jar"/>
	      </fileset>
	      <fileset dir="${lib}/module/tsa/${client.java.target}">
	        <include name="bctsp-jdk.jar"/>
	      </fileset>
            <fileset dir="${lib}/ext">
              <include name="commons-cli-1.0.jar"/>
            </fileset>
          </copy>
          
	    <jar destfile="${timeStampClientJar}" basedir="${timeStampClientBuild}">
	      <manifest>
	        <attribute name="Class-Path" value="lib/bctsp-jdk.jar lib/bcprov-jdk.jar lib/bcmail-jdk.jar lib/commons-cli-1.0.jar lib/log4j.jar"/>
	        <attribute name="Main-Class" value="org.signserver.client.TimeStampClient"/>
	      </manifest>

              <!-- Place log4j.properties in root of jar. Workaround until DSS-125 -->
              <fileset dir="${src.java}/org/signserver/client">
                  <include name="log4j.properties" />
              </fileset>
	    </jar>
	  </target>
	
    <!--                                                   -->
     <!-- Target Used to perform validations using CLI     -->
     <!--                                                   -->
      <target name="validationClient" depends="signserver:compile, ws.gen.client, signserverws.client" unless="buildMailSigner" if="validationclient.conditionenabled" >
        <mkdir dir="${validationClientBuild}"/>
        <javac srcdir="${src.java}" destdir="${validationClientBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
           <include name="org/signserver/client/validationservice/*.java"/>            
           <classpath refid="signserver.compile.classpath"/> 
        </javac>
        <mkdir dir="${validationClientDir}/lib"/>
        <copy todir="${validationClientDir}/lib" >
          <fileset dir="dist-client/signserverwscli">
              <include name="signserverwscli.jar"/>            
          </fileset>
          <fileset dir="${lib}/${client.java.target}">
            <include name="bcprov-jdk.jar"/>            
            <include name="bcmail-jdk.jar"/>
          </fileset>
          <fileset dir="${lib}">        
	      <include name="log4j.jar"/>      
	      <include name="commons-lang-2.4.jar"/>
	      <include name="ejbca-util.jar"/>
	      <include name="cert-cvc.jar"/>
	    </fileset>	
          <fileset dir="${lib}/ext">
            <include name="commons-cli-1.0.jar"/>
          </fileset>
          <fileset dir="${lib}/jaxws">
            <include name="activation.jar" />
            <include name="FastInfoset.jar" />
            <include name="http.jar" />
            <include name="jaxb-api.jar" />
            <include name="jaxb-impl.jar" />
            <include name="jaxb-xjc.jar" />
            <include name="jaxws-api.jar" />
            <include name="jaxws-rt.jar" />
            <include name="jaxws-tools.jar" />
            <include name="jsr173_api.jar" />
            <include name="jsr181-api.jar" />
            <include name="jsr250-api.jar" />
            <include name="mimepull.jar" />
            <include name="resolver.jar" />
            <include name="saaj-api.jar" />
            <include name="saaj-impl.jar" />
            <include name="sjsxp.jar" />
            <include name="stax-ex.jar" />
            <include name="streambuffer.jar" />
         </fileset>
       </copy>
        <jar destfile="${validationClientJar}" basedir="${validationClientBuild}">
          <manifest>
            <attribute name="Class-Path" value="lib/bcprov-jdk.jar lib/bcmail-jdk.jar lib/commons-cli-1.0.jar  lib/ejbca-util.jar lib/cert-cvc.jar lib/log4j.jar lib/activation.jar lib/FastInfoset.jar lib/http.jar lib/jaxb-api.jar lib/jaxb-impl.jar  lib/jaxb-xjc.jar lib/jaxws-api.jar lib/jaxws-rt.jar lib/jaxws-tools.jar lib/jsr173_api.jar lib/jsr181-api.jar lib/jsr250-api.jar lib/mimepull.jar lib/resolver.jar lib/saaj-api.jar lib/saaj-impl.jar lib/sjsxp.jar lib/stax-ex.jar lib/streambuffer.jar lib/commons-lang-2.4.jar lib/signserverwscli.jar"/>
            <attribute name="Main-Class" value="org.signserver.client.validationservice.ValidationCLI"/>
          </manifest>
        </jar>
      </target>
	
	 <!--                                                 -->
     <!--   Target for building signingAndValidationAPI   -->
     <!--                                                 -->
      <target name="signingAndValidationAPI" depends="signserver:compile, signserverws.client, signserverws.client" unless="buildMailSigner" if="signingandvalidationapi.conditionenabled" >
        <mkdir dir="${signingAndValidationBuild}"/>
        <javac srcdir="${src.java}" destdir="${signingAndValidationBuild}" debug="on" target="${client.java.target}" source="${client.java.target}">
           <include name="org/signserver/client/api/*.java"/>            
           <classpath refid="signserver.compile.classpath"/> 
        </javac>
        
        <mkdir dir="${signingAndValidationDir}/lib"/>
        <copy todir="${signingAndValidationDir}/lib" >
          <fileset dir="${lib}/${client.java.target}">
            <include name="bcprov-jdk.jar"/>            
          </fileset>
          <fileset dir="${lib}">      
          	<include name="cert-cvc.jar"/>  
	      	<include name="log4j.jar"/>      
	      	<include name="ejbca-util.jar"/>
	      	<include name="commons-lang-2.4.jar"/>
	    </fileset>	

       </copy>
        <jar destfile="${signingAndValidationJar}" basedir="${signingAndValidationBuild}">
          <manifest>
            <attribute name="Class-Path" value="lib/bcprov-jdk.jar lib/ejbca-util.jar lib/log4j.jar lib/activation.jar lib/cert-cvc.jar"/>
          </manifest>
          <fileset dir="${tmp}/jaxws/gen-classes/client">
              <include name="**/*.class"/>
            </fileset>	
        </jar>
      </target>

    <target name="martest">
    <taskdef name="mar" classname="org.signserver.anttasks.MarAntTask" classpathref="signserver.test.compile.classpath"/>
    	   <taskdef name="part" classname="org.signserver.anttasks.PartAntTask" classpathref="signserver.test.compile.classpath"/>
    	<mar version="3" verbose="true" destfile="${tmp}/test.mar">
    		<part name="test">
    	         <fileset dir="${lib}/ext">
    	           <include name="commons-cli-1.0.jar"/>
    	         </fileset>
    		</part>
            <part name="test2">
                   <fileset dir="${lib}">
                     <include name="*.jar"/>
                   </fileset>
            </part>
    	</mar>
	</target>
	


</project>	
