/*************************************************************************
 *                                                                       *
 *  SignServer: The OpenSource Automated Signing Server                  *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
 
package org.signserver.module.wsra.core;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;

import org.apache.log4j.Logger;
import org.signserver.module.wsra.beans.PricingDataBean;
import org.signserver.module.wsra.beans.ProductDataBean;
import org.signserver.module.wsra.common.WSRAConstants.PricingStatus;
import org.signserver.module.wsra.common.WSRAConstants.ProductStatus;

/**
 * Class in charge of logic concerning products 
 * and pricing.
 * 
 * All manipulation of Product and pricing data should
 * go through this manager. Products used by an
 * organization is managed by the OrganizationManager.
 * 
 * 
 * @author Philip Vendil 11 okt 2008
 *
 * @version $Id$
 */

public class ProductManager {
	
	@SuppressWarnings("unused")
	private Logger log = Logger.getLogger(this.getClass());

	private EntityManager workerEntityManager;
	
	public ProductManager(EntityManager workerEntityManager){		
		this.workerEntityManager = workerEntityManager;
	}
	

	
	/**
	 * Method that lists all products in system.
	 * 
	 * @param status of of ProductStatus constants, use null for all statuses.
	 * @return a list of products, never null.
	 */
	@SuppressWarnings("unchecked")
	public List<ProductDataBean> listProducts(ProductStatus status){
		List<ProductDataBean> retval = new ArrayList<ProductDataBean>();
		
		try{
			if(status == null){
				retval = workerEntityManager.createNamedQuery("ProductDataBean.findAll")
		                                   .getResultList();
			}else{
				retval = workerEntityManager.createNamedQuery("ProductDataBean.findByStatus")
				                      .setParameter(1, status.getIntValue())
                                      .getResultList();
				
			}
		}catch(NoResultException e){}
		
		return retval;
	}
	
	
	/**
	 * Method used to add/edit a product in the system.
	 * productId is auto generated by the database.  
	 * @return the generated id
	 */
	public int editProduct(ProductDataBean productData){
		ProductDataBean persistData = findProduct(productData.getProductNumber());
		boolean persist = false;
				
		if(persistData == null){
			persistData = new ProductDataBean();
			persist = true;
		}
		persistData.setProductNumber(productData.getProductNumber());
		persistData.setDisplayName(productData.getDisplayName());
		persistData.setDescription(productData.getDescription());		
		persistData.setStatus(productData.getStatus());
		persistData.setComment(productData.getComment());
		if(persist){
			workerEntityManager.persist(persistData);
		}
		
		return persistData.getId();
	}
	
	/**
	 * Method that removes a product.
	 * 
	 * @param userId the unique id of user.
	 */
	public void removeProduct(int productId){
		ProductDataBean data = workerEntityManager.find(ProductDataBean.class, productId);				
		if(data != null){						
			workerEntityManager.remove(data);		
		}
	}
	
	/**
	 * Method used to find a product from it's unique productNumber.
	 * Returns null if no product could be found.
	 * 
	 */
	public ProductDataBean findProduct(String productNumber){
		ProductDataBean retval = null;		
		try{
			retval = (ProductDataBean) workerEntityManager.createNamedQuery("ProductDataBean.findByProductNumber")
			                            .setParameter(1, productNumber)
			                            .getSingleResult();
			
		}catch(NoResultException e){}
		
		return retval;
	}
	
	/**
	 * Method used to find a product from it's unique productId.
	 * Returns null if no product could be found.
	 */
	public ProductDataBean findProduct(int productId){
		ProductDataBean retval = null;
		try{
			retval = (ProductDataBean) workerEntityManager.find(ProductDataBean.class, productId);
		}catch(NoResultException e){}

		return retval;
	}
	
	/**
	 * Method that lists all price classes in system.
	 * 
	 * @param status of of, use null for all statuses.
	 * @return a list of price classes, never null.
	 */
	@SuppressWarnings("unchecked")
	public List<PricingDataBean> listPrices(PricingStatus status){
		List<PricingDataBean> retval = new ArrayList<PricingDataBean>();
		
		try{
			if(status == null){
				retval = workerEntityManager.createNamedQuery("PricingDataBean.findAll")
		                                   .getResultList();
			}else{
				retval = workerEntityManager.createNamedQuery("PricingDataBean.findByStatus")
				                      .setParameter(1, status.getIntValue())
                                      .getResultList();
				
			}
		}catch(NoResultException e){}
		
		return retval;
	}
	
	
	/**
	 * Method used to add/edit a price in the system.
	 * priceId is auto generated by the database.
	 * @return the generated id  
	 */
	public int editPrice(PricingDataBean priceData){
		PricingDataBean persistData = findPrice(priceData.getPriceClass());
		boolean persist = false;
				
		if(persistData == null){
			persistData = new PricingDataBean();
			persist = true;
		}
		persistData.setPriceClass(priceData.getPriceClass());
		persistData.setPrice(priceData.getPrice());
		persistData.setDisplayName(priceData.getDisplayName());
		persistData.setCurrency(priceData.getCurrency());		
		persistData.setStatus(priceData.getStatus());
		persistData.setComment(priceData.getComment());
		if(persist){
			workerEntityManager.persist(persistData);
		}
			
		return persistData.getId();
	}
	
	/**
	 * Method that removes a price.
	 * 
	 * 
	 * @param priceId the unique id of price.
	 */
	public void removePrice(int priceId){		
		PricingDataBean data = workerEntityManager.find(PricingDataBean.class, priceId);				
		if(data != null){						
			workerEntityManager.remove(data);		
		}
	}
	
	/**
	 * Method used to find a price from it's unique productClass.
	 * Returns null if no price could be found.
	 * 
	 */
	public PricingDataBean findPrice(String priceClass){
		PricingDataBean retval = null;		
		try{
			retval = (PricingDataBean) workerEntityManager.createNamedQuery("PricingDataBean.findByPriceClass")
			                            .setParameter(1, priceClass)
			                            .getSingleResult();
			
		}catch(NoResultException e){}
		
		return retval;
	}
	
	/**
	 * Method used to find a price class from it's unique priceId.
	 * Returns null if no product could be found.
	 */
	public PricingDataBean findPrice(int priceId){
		PricingDataBean retval = null;
		try{
			retval = (PricingDataBean) workerEntityManager.find(PricingDataBean.class, priceId);
		}catch(NoResultException e){}

		return retval;
	}
	


}
