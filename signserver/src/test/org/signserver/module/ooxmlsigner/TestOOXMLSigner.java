/*************************************************************************
 *                                                                       *
 *  SignServer: The OpenSource Automated Signing Server                  *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/

package org.signserver.module.ooxmlsigner;

import java.io.File;
import java.io.FileOutputStream;
import java.security.cert.Certificate;
import java.util.Hashtable;

import javax.naming.Context;
import javax.naming.InitialContext;

import junit.framework.TestCase;

import org.ejbca.util.Base64;
import org.signserver.cli.CommonAdminInterface;
import org.signserver.common.GenericSignRequest;
import org.signserver.common.GenericSignResponse;
import org.signserver.common.RequestContext;
import org.signserver.common.SignServerUtil;
import org.signserver.common.SignerStatus;
import org.signserver.common.clusterclassloader.MARFileParser;
import org.signserver.ejb.interfaces.IWorkerSession;
import org.signserver.testutils.TestUtils;
import org.signserver.testutils.TestingSecurityManager;

/**
 * 
 * Test for ooxmlsigner. Worker ID of 5677 is hard coded here and used from module-configs/ooxmlsigner/junittest-part-config.properties
 * 
 * Test case : signs docx file with certificate defined in module-configs/ooxmlsigner/junittest-part-config.properties
 *  
 * @author Aziz Göktepe
 * @version $Id: TestOOXMLSigner.java 550 2009-08-12 11:56:16Z rayback_2 $
 */
public class TestOOXMLSigner extends TestCase {

	/**
	 * WORKERID used in this test case as defined in
	 * junittest-part-config.properties
	 */
	private static final int WORKERID = 5677;

	private static IWorkerSession.IRemote sSSession = null;
	private static String signserverhome;
	private static int moduleVersion;

	public static void main(String[] args)
	{
		try
		{
		TestOOXMLSigner den = new TestOOXMLSigner();
		den.setUp();
		den.test00SetupDatabase();
		den.test01SignDocx();
		den.test02GetStatus();
		den.test99TearDownDatabase();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
	}
	
	protected void setUp() throws Exception {
		super.setUp();
		SignServerUtil.installBCProvider();
		Context context = getInitialContext();
		sSSession = (IWorkerSession.IRemote) context.lookup(IWorkerSession.IRemote.JNDI_NAME);
		TestUtils.redirectToTempOut();
		TestUtils.redirectToTempErr();
		TestingSecurityManager.install();
		signserverhome = System.getenv("SIGNSERVER_HOME");
		assertNotNull("Please set SIGNSERVER_HOME environment variable", signserverhome);
		CommonAdminInterface.BUILDMODE = "SIGNSERVER";
		
	}
	
	@Override
	protected void tearDown() throws Exception {
		super.tearDown();
		TestingSecurityManager.remove();
	}	
	
	public void test00SetupDatabase() throws Exception {

		MARFileParser marFileParser = new MARFileParser(signserverhome + "/dist-server/ooxmlsigner.mar");
		moduleVersion = marFileParser.getVersionFromMARFile();

		TestUtils.assertSuccessfulExecution(new String[] { "module", "add", signserverhome + "/dist-server/ooxmlsigner.mar", "junittest" });
		assertTrue(TestUtils.grepTempOut("Loading module OOXMLSIGNER"));
		assertTrue(TestUtils.grepTempOut("Module loaded successfully."));

		sSSession.reloadConfiguration(WORKERID);
	}

	public void test01SignDocx() throws Exception {

		int reqid = 13;

		GenericSignRequest signRequest = new GenericSignRequest(reqid, Base64.decode(testDocx.getBytes()));

		GenericSignResponse res = (GenericSignResponse) sSSession.process(WORKERID, signRequest, new RequestContext());
		byte[] data = res.getProcessedData();
		
		// Answer to right question
		assertTrue(reqid == res.getRequestID());
		
		// Output for manual inspection
		File file = new File(signserverhome + File.separator + "tmp" + File.separator + "signedTestDoc.docx");
		FileOutputStream fos = new FileOutputStream(file);
		fos.write((byte[]) data);
		fos.close();

		//TODO : add validation of document (core validation + reference validaton) when ooxmlvalidator is finished
		
		// Check certificate
		Certificate signercert = res.getSignerCertificate();
		assertNotNull(signercert);

	}

	public void test02GetStatus() throws Exception {
		SignerStatus stat = (SignerStatus) sSSession.getStatus(WORKERID);
		assertTrue(stat.getTokenStatus() == SignerStatus.STATUS_ACTIVE);
	}

	public void test99TearDownDatabase() throws Exception {
		TestUtils.assertSuccessfulExecution(new String[] { "removeworker", ""+WORKERID });

		TestUtils.assertSuccessfulExecution(new String[] { "module", "remove", "ooxmlsigner", "" + moduleVersion });
		assertTrue(TestUtils.grepTempOut("Removal of module successful."));
		sSSession.reloadConfiguration(WORKERID);
	}

	/**
	 * Get the initial naming context
	 */
	private Context getInitialContext() throws Exception {
		Hashtable<String, String> props = new Hashtable<String, String>();
		props.put(Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.NamingContextFactory");
		props.put(Context.URL_PKG_PREFIXES, "org.jboss.naming:org.jnp.interfaces");
		props.put(Context.PROVIDER_URL, "jnp://localhost:1099");
		Context ctx = new InitialContext(props);
		return ctx;
	}

	/**
	 * predefined docx file in base64 format.
	 */
	private static final String testDocx = "";
	
}

