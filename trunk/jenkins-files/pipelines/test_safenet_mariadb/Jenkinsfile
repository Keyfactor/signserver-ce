/*************************************************************************
 *                                                                       *
 *  SignServer Enterprise - Proprietary Modules.                         *
 *                                                                       *
 *  Copyright (c), PrimeKey Solutions AB. All rights reserved.           *
 *  The use of the Proprietary Modules are subject to specific           *
 *  commercial license terms.                                            *
 *                                                                       *
 *************************************************************************/
/**
 * Jenkins pipeline for running system tests with an application server
 * and use a SafeNet HSM emulator and MariaDB.
 *
 */
node('dss-docker') {

    try {

        checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[cancelProcessOnExternalsFail: true, credentialsId: 'e8aa0eb0-9eb8-42d2-8596-6a7a90c8f7cc', depthOption: 'infinity', ignoreExternalsOption: true, local: '', remote: 'https://svn.cesecore.eu/svn/signserver-restricted/trunk/jenkins-files']], quietOperation: true, workspaceUpdater: [$class: 'UpdateUpdater']])

        def testImage
        def PWD = pwd();                 
    
        stage('Prepare Container') {
            sh 'hostname'
            sh 'pwd'
            sh "cd jenkins-files/containers/${env.CONTAINER} && ls -ltr && whoami"
            sh "cp -rv /home/user/binaries `pwd`/jenkins-files/containers/${env.CONTAINER}/"
            sh "cat jenkins-files/containers/${env.CONTAINER}/Dockerfile"
            sh 'which java'
        }

        stage('Build Container') {
            sh 'hostname'
            sh 'ls'
            testImage = docker.build("${PIPELINE_NAME}:${env.BUILD_ID}", "-m 512m --memory-swap 512m jenkins-files/containers/${env.CONTAINER}/")
        }

        docker.image('mariadb:10.3.12').withRun('-e "MYSQL_ROOT_PASSWORD=my-secret-pw" -m 512m --memory-swap 512m') { c ->
            docker.image('mariadb:10.3.12').inside("--link ${c.id}:db -m 512m --memory-swap 512m") {
                /* Wait until mysql service is up */
                sh 'while ! mysqladmin ping -hdb --silent; do sleep 1; done'

                stage('Setup DB') {
		        sh 'mysql -hdb -P3306 -uroot -pmy-secret-pw'
		        sh 'mysql -hdb -uroot -pmy-secret-pw -e "CREATE DATABASE signserver_trunk CHARACTER SET utf8 COLLATE utf8_general_ci"'
		        sh 'mysql -hdb -uroot -pmy-secret-pw -e "GRANT ALL PRIVILEGES ON signserver_trunk.* TO \'signserver_trunk\'@\'%\' IDENTIFIED BY \'signserver\'"'
		        sh 'mysqladmin version -hdb -uroot -pmy-secret-pw'
                }
            }
            testImage.inside ("--link ${c.id}:db -m 2500m --memory-swap 2500m") {
                withEnv(['HOME=/opt/jboss',
                         'DATABASE_NAME=mysql',
                         'DBHOST=db',
                         'DBUSER=signserver_trunk',
                         'DBPASS=signserver',
                         'DBSCHEMA=signserver_trunk',
                         'DBDRIVER=org.mariadb.jdbc.Driver']) {

                    stage('Patch java') {
                        if (env.PATCH_JAVA.toBoolean()) {
                            sh 'echo "Java will be patched"'
                            sh 'cd ${JAVA_HOME}/lib/ext && ls -ltr'
                            copyArtifacts filter: 'artifacts*.zip', fingerprintArtifacts: true, projectName: "${env.UPSTREAM_BUILD_PATCH_JOB}", selector: lastSuccessful()
                            sh 'mv ${JAVA_HOME}/lib/ext/sunec.jar ${JAVA_HOME}/lib/ext/sunec_original_jar.bkp'
                            sh 'mv ${JAVA_HOME}/lib/ext/sunpkcs11.jar ${JAVA_HOME}/lib/ext/sunpkcs11_original_jar.bkp'
                            sh 'unzip artifacts*.zip'
                            sh 'cp -v artifacts*/sunec-java*.jar ${JAVA_HOME}/lib/ext/sunec.jar'
                            sh 'cp -v artifacts*/sunpkcs11-java*.jar ${JAVA_HOME}/lib/ext/sunpkcs11.jar'
                        } 
                        else {
                            sh 'echo "This stage is not applicable as per configuration"'
                        }
                    }

                    stage('Verify environment') {
                        // Print versions
                        sh "java -version"
                        sh  'cd /usr/lib/jvm && ls -ltr'
                        sh "ant -version"
                        sh "locale"
                        echo 'All environment variables'
                        sh 'printenv'          
                        sh 'cat ${JAVA_HOME}/lib/security/java.security || echo "No java.security file exists in Java8 location"'
                        sh 'cat ${JAVA_HOME}/conf/security/java.security || echo "No java.security file exists in Java11 location"'
                        sh 'ls -ltr $JAVA_HOME/lib/ext/ || echo "No ext folder exists in Java8 location"'
                        sh 'id'
                        sh 'gpg2 --version'
                        
                        sh 'ping -c 4 db'
                        sh 'mysql -h db -u signserver_trunk --password=signserver -e "show tables;" signserver_trunk'
                    }

                    stage('Unpack') {
                        sh 'rm -rf signserver-${EDITION}-*'            
                        copyArtifacts filter: 'signserver-${EDITION}-*-bin.zip', fingerprintArtifacts: true, projectName: "${env.UPSTREAM_BUILD_JOB}", selector: lastSuccessful()

                        sh 'ls'
                        sh 'unzip signserver-${EDITION}*.zip'
                        sh 'rm signserver-${EDITION}*.zip'         
                    }            

                    stage('Setup cryptoki') {
                        sh 'ls -la $HOME'
                        sh 'unzip -d $HOME /opt/eracom/${CRYPTOKI_ZIP}'
                    }

                    stage('Configure App Server') {
                        sh 'cp -v jenkins-files/configurations/${APPSERVER_STANDALONE_XML} ${APPSRV_HOME}/standalone/configuration/standalone.xml'

                        sh 'mkdir ${APPSRV_HOME}/standalone/configuration/keystore/'
                        sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_demo-tls.jks ${APPSRV_HOME}/standalone/configuration/keystore/keystore.jks'
                        sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_truststore.jks ${APPSRV_HOME}/standalone/configuration/keystore/truststore.jks'
                        sh 'mkdir /tmp/data'

		        sh 'mkdir -p ${APPSRV_HOME}/modules/system/layers/base/org/mariadb/main/'
			sh 'cp /opt/jboss/${MARIADB_DRIVER_JAR} ${APPSRV_HOME}/modules/system/layers/base/org/mariadb/main/mariadb.jar'
                        sh '''echo '
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<module xmlns=\"urn:jboss:module:1.0\" name=\"org.mariadb\">
  <resources>
    <resource-root path=\"mariadb.jar\"/>
  </resources>
  <dependencies>
    <module name=\"javax.api\"/>
    <module name=\"javax.transaction.api\"/>
  </dependencies>
</module>
			   ' > ${APPSRV_HOME}/modules/system/layers/base/org/mariadb/main/module.xml
			  '''
		      sh 'ls -la ${APPSRV_HOME}/modules/system/layers/base/org/mariadb/main/'
                      sh 'cat ${APPSRV_HOME}/modules/system/layers/base/org/mariadb/main/module.xml'
                    }

                    stage('Configure SignServer') {                   
                        sh '''
                        cd signserver-${EDITION}* && echo "
                            j2ee.web-nohttps=true
                            database.name=${DATABASE_NAME}
                            datasource.jndi-name=${DATASOURCE_NAME}
                            database.nodb.location=_NON_EXISTING_
                            healthcheck.maintenancefile=${PWD}/maintenance.properties
                            web.admingui.dist.enabled=${ENTERPRISE_EDITION}
                            web.clientcli.dist.enabled=true" > conf/signserver_deploy.properties
                        '''
                        sh '''
                        cd signserver-${EDITION}* && echo "
        # Set root logger level to DEBUG for debug output.
        log4j.rootLogger=DEBUG, A1

        # A1 is set to be a ConsoleAppender. 
        log4j.appender.A1=org.apache.log4j.ConsoleAppender

        # A1 uses PatternLayout.
        log4j.appender.A1.layout=org.apache.log4j.PatternLayout
        log4j.appender.A1.layout.ConversionPattern=%d{ISO8601} %-5p [%c{1}] %m%n

        # Limit categories related to the Database CLI
        log4j.category.org.hibernate=WARN, A1
        log4j.category.org.cesecore.keys.token.CryptoTokenFactory=WARN, A1
        log4j.category.org.cesecore.keys.util.KeyTools=WARN, A1

        # Limit categories related to JBoss AS 7/EAP6 remote EJB
        #log4j.category.org.jboss.remoting=ERROR, A1
        #log4j.category.org.jboss.ejb.client=ERROR, A1
        #log4j.category.org.xnio=ERROR, A1" > conf/log4j.properties
                    '''
                        sh 'cd signserver-${EDITION}* && mkdir p12 && mkdir jarsigner-test-files'

			sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_demo-tls.jks p12/tomcat.jks'
                    	sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_truststore.jks p12/truststore.jks'
                        sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_admin1.p12 p12/client.p12'

                        sh 'cd signserver-${EDITION}* && ls -ltr'
                        sh 'cd ${PWD}/jenkins-files/pipelines/${PIPELINE_NAME} &&  ls -ltr'

                        sh 'cd signserver-${EDITION}*/lib/ext && cp -v commons-lang*.jar ../../jarsigner-test-files/'
                        sh 'cd signserver-${EDITION}*/lib/ext && cp -v log4j*.jar ../../jarsigner-test-files/'
                        sh 'cd signserver-${EDITION}*/lib/ext && cp -v cesecore-*.jar ../../jarsigner-test-files/'

                        sh "cd signserver-${EDITION}* && cp -v ../jenkins-files/containers/${env.CONTAINER}" + '/binaries/${DNSSEC_TEST_ZIP:-dnssec-test-files.zip} .'
                        sh 'cd signserver-${EDITION}* && unzip ${DNSSEC_TEST_ZIP:-dnssec-test-files.zip}'

                        // P11 test configuration
                        sh '''
                   cd signserver-${EDITION}* && echo "
        test.p11.sharedlibrary=${LIBCRYPTOKI}
        test.p11.slot=${P11SLOT}
        test.p11.slotindex=${P11SLOTINDEX}
        test.p11.pin=${P11PIN}
        test.p11.existingkey1=${P11KEY}
        test.p11.provider=${P11_PROVIDER}
        test.p11.MAKE_UNMODIFIABLE_SUPPORTED=false
        test.disablekeygen.disabled=true
        test.dpkgsig.enabled=${DPKGSIG_ENABLED}
        test.dnssec.enabled=${DNSSEC_ENABLED}
	test.dnssec-verify.path=${DNSSEC_VERIFY_PATH}" > test-config.properties
                   '''
                        // Database CLI  TODO: parametrization
                        sh '''
                   cd signserver-${EDITION}* && echo "
        dbcli.database.name=${DATABASE_NAME}
        dbcli.database.url=jdbc:${DATABASE_NAME}://${DBHOST}:3306/${DBSCHEMA}?characterEncoding=UTF-8
        dbcli.database.username=${DBUSER}
        dbcli.database.password=${DBPASS}
        dbcli.database.driver=${DBDRIVER}" > conf/signserver_cli.properties
                   '''

                      // Database audit log
                        sh '''
                   cd signserver-${EDITION}* && echo "          
        databaseprotection.enablesign.AuditRecordData = true
        databaseprotection.enableverify.AuditRecordData = true	 	    
        databaseprotection.keyid = 400
        databaseprotection.keyid.0 = 400
        databaseprotection.keylabel.0 = dbStoreKey
        databaseprotection.classname.0 = org.cesecore.keys.token.SoftCryptoToken
        databaseprotection.properties.0 =
        databaseprotection.data.0 = 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
        databaseprotection.tokenpin.0 = userpin1
        databaseprotection.version.0 = 2
                            " > conf/databaseprotection.properties
                    '''

                      // CESECORE configuration
                        sh '''
                   cd signserver-${EDITION}* && echo "          
        securityeventsaudit.implementation.0=org.signserver.server.log.SignServerLog4jDevice
        securityeventsaudit.implementation.1=org.cesecore.audit.impl.integrityprotected.IntegrityProtectedDevice
        securityeventsaudit.exporter.1=org.cesecore.audit.impl.AuditExporterXml
        pkcs11.makeKeyUnmodifiableAfterGeneration=${PATCH_JAVA}
                            " > conf/cesecore.properties
                    '''

                        sh 'cd signserver-${EDITION}*/lib/ext/jdbc && ln -s /opt/jboss/${MARIADB_DRIVER_JAR} jdbc.jar'
                    }

                    stage('Verify HSM') {
                        if (env.EDITION == 'ee') {
                            sh 'cd signserver-${EDITION}* && chmod a+x bin/p11ng-tool && ./bin/p11ng-tool -libfile /opt/ETcpsdk/lib/linux-x86_64/libcryptoki.so -action listSlots'
                        }
                        else {
                            sh 'echo "This stage is not applicable for configured edition of SignServer"'
                        }
                    }

                    stage('Deploy SignServer') {
                        sh 'cd signserver-${EDITION}* && ant -q deploy-ear'

                        archiveArtifacts 'signserver-${EDITION}*/tmp/signserver.ear'
                    }

                    stage('Run') {
                        sh 'hostname'
                        sh 'ls'
                        sh 'id'
                        sh '$USER'   

                        sh 'chmod +x jenkins-files/tools/run.sh'
                        sh 'jenkins-files/tools/run.sh && cd signserver-${EDITION}* && export SIGNSERVER_HOME=. && export SIGNSERVER_NODEID="magnum-ci" && export JAVA_OPTS="-Dhttps.protocols=TLSv1.1" && bin/ant systemtest:jars -Dno.clover=true'
                    }                

                    stage('Gather Results') {            
                        junit "signserver-${EDITION}*/tmp/test/results/TEST-*.xml"                                  
                    }
                }
            }
        }
    }

    finally {   
        cleanWs()   
    }
    
}
