/**
 * Jenkins pipeline for running system tests with an application server
 * and use a SafeNet HSM emulator and SignServer in NoDB mode.
 *
 */
node('dss-docker-slave') {

    try {

        checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[cancelProcessOnExternalsFail: true, credentialsId: 'e8aa0eb0-9eb8-42d2-8596-6a7a90c8f7cc', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: 'https://svn.cesecore.eu/svn/signserver-restricted/trunk']], quietOperation: true, workspaceUpdater: [$class: 'UpdateUpdater']])

        def testImage
        def PWD = pwd();
    
        stage('Prepare Container') {
            sh 'hostname'
            sh 'pwd'
            sh "cd jenkins-files/containers/${env.CONTAINER} && ls -ltr && whoami"
            sh "cp -rv /home/user/binaries `pwd`/jenkins-files/containers/${env.CONTAINER}/"
            sh 'which java'
        }

        stage('Build Container') {
            dockerfile {
                label 'dss-docker'
                dir  "jenkins-files/containers/${env.CONTAINER}"
                filename 'Dockerfile'
                additionalBuildArgs  '--disable-content-trust=true --pull' // TODO: We want to find out how to run with content trust enabled for Red Hat images
                args '--group-add root --volume m2-repo:/m2-repo'
            }
        
            sh 'hostname'
            sh 'ls'
            testImage = docker.build("${PIPELINE_NAME}:${env.BUILD_ID}", "jenkins-files/containers/${env.CONTAINER}/")
        }

        testImage.inside {
            withEnv(['HOME=/opt/jboss']) {

                stage('Verify environment') {
                    // Print versions
                    sh "java -version"
                    sh "ant -version"
                    sh "locale"
                    echo 'All environment variables'         
                    sh 'printenv'          
                    sh 'cat ${JAVA_HOME}/lib/security/java.security'
                    sh 'ls -ltr $JAVA_HOME/lib/ext/'
                    sh 'id'
                    sh 'cd /tmp && ls -ltr'
                }

                stage('Unpack') {
                    sh 'rm -rf signserver-ee-*'            
                    copyArtifacts filter: 'signserver-ee-*-bin.zip', fingerprintArtifacts: true, projectName: "${env.UPSTREAM_BUILD_JOB}", selector: lastSuccessful()

                    sh 'ls'
                    sh 'unzip signserver-ee*.zip'
                    sh 'rm signserver-ee*.zip'         
                }            

                stage('Setup cryptoki') {
                    sh 'ls -la $HOME'
                    sh 'unzip -d $HOME /opt/eracom/${CRYPTOKI_ZIP}'
                }

                stage('Configure App Server') {
                    sh 'cp -v jenkins-files/configurations/${APPSERVER_STANDALONE_XML} ${APPSRV_HOME}/standalone/configuration/standalone.xml'

                    sh 'mkdir ${APPSRV_HOME}/standalone/configuration/keystore/'
                    sh 'cp -v jenkins-files/configurations/keystore.jks ${APPSRV_HOME}/standalone/configuration/keystore/'
                    sh 'cp -v jenkins-files/configurations/truststore.jks ${APPSRV_HOME}/standalone/configuration/keystore/'
                    sh 'mkdir /tmp/data'
                    sh 'ls -lta /tmp/data'
                }

                stage('Configure SignServer') {
                    sh '''
                    cd signserver-ee* && echo "
                        j2ee.web-nohttps=true
                        database.name=nodb
                        database.nodb.location=/tmp/data
                        healthcheck.maintenancefile=${PWD}/maintenance.properties
                        web.admingui.dist.enabled=true
                        web.clientcli.dist.enabled=true" > conf/signserver_deploy.properties
                    '''
                    sh '''
                    cd signserver-ee* && echo "
    # Set root logger level to DEBUG for debug output.
    log4j.rootLogger=DEBUG, A1

    # A1 is set to be a ConsoleAppender. 
    log4j.appender.A1=org.apache.log4j.ConsoleAppender

    # A1 uses PatternLayout.
    log4j.appender.A1.layout=org.apache.log4j.PatternLayout
    log4j.appender.A1.layout.ConversionPattern=%d{ISO8601} %-5p [%c{1}] %m%n

    # Limit categories related to the Database CLI
    log4j.category.org.hibernate=WARN, A1
    log4j.category.org.cesecore.keys.token.CryptoTokenFactory=WARN, A1
    log4j.category.org.cesecore.keys.util.KeyTools=WARN, A1

    # Limit categories related to JBoss AS 7/EAP6 remote EJB
    #log4j.category.org.jboss.remoting=ERROR, A1
    #log4j.category.org.jboss.ejb.client=ERROR, A1
    #log4j.category.org.xnio=ERROR, A1" > conf/log4j.properties
                '''
                    sh 'cd signserver-ee* && mkdir p12 && mkdir jarsigner-test-files'

                    sh 'cd ${PWD}/jenkins-files/pipelines/${PIPELINE_NAME} &&  ls -ltr'

                    sh 'cd signserver-ee* && cp -v ../jenkins-files/configurations/keystore.jks p12/tomcat.jks'
                    sh 'cd signserver-ee* &&  cp -v ../jenkins-files/configurations/truststore.jks p12/'

                    sh 'cd signserver-ee*/lib/ext && cp -v commons-lang*.jar ../../jarsigner-test-files/'
                    sh 'cd signserver-ee*/lib/ext && cp -v log4j*.jar ../../jarsigner-test-files/'
                    sh 'cd signserver-ee*/lib/ext && cp -v cesecore-*.jar ../../jarsigner-test-files/'

                    // P11 test configuration
                    sh '''
               cd signserver-ee* && echo "
    test.p11.sharedlibrary=${LIBCRYPTOKI}
    test.p11.slot=${P11SLOT}
    test.p11.pin=${P11PIN}
    test.p11.existingkey1=${P11KEY}" > test-config.properties
               '''

                }

                stage('Verify HSM') {
                    sh 'cd signserver-ee* && chmod a+x bin/p11ng-tool && ./bin/p11ng-tool -libfile /opt/ETcpsdk/lib/linux-x86_64/libcryptoki.so -action listSlots'
                }

                stage('Deploy SignServer') {
                    sh 'cd signserver-ee* && ant -q deploy-ear'

                    archiveArtifacts 'signserver-ee*/tmp/signserver.ear'
                }

                stage('Run') {
                    sh 'hostname'
                    sh 'ls'
                    sh 'id'
                    sh '$USER'
                    sh 'ls -lta /tmp/data'

                    sh 'chmod +x jenkins-files/tools/run.sh'
                    sh 'jenkins-files/tools/run.sh && cd signserver-ee* && export SIGNSERVER_HOME=. && export SIGNSERVER_NODEID="magnum-ci" && bin/ant systemtest:jars -Dsystemtest.excludes="**/ArchivingCLITest*,**/GroupKeyServiceCLITest*,**/Base64DatabaseArchiverTest*,**/OldDatabaseArchiverTest*,,**/GroupKeyServiceTest*,**/ArchiveTest*,**/AuditLogCLITest*,**/VerifyLogCommandTest*,**/DatabaseCLITest*" -Dno.clover=true'
                }                

                stage('Gather Results') {            
                    junit "signserver-ee*/tmp/test/results/TEST-*.xml"                                  
                }
            }
        }
    }

    finally {   
        cleanWs()   
    }
    
}
