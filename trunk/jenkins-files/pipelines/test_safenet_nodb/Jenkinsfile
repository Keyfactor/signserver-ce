/**
 * Jenkins pipeline for running system tests with an application server
 * and use a SafeNet HSM emulator and SignServer in NoDB mode.
 *
 */
node('dss-docker-slave') {

    try {

        checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[cancelProcessOnExternalsFail: true, credentialsId: 'e8aa0eb0-9eb8-42d2-8596-6a7a90c8f7cc', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: 'https://svn.cesecore.eu/svn/signserver-restricted/trunk']], quietOperation: true, workspaceUpdater: [$class: 'UpdateUpdater']])

        def testImage
        def PWD = pwd();
    
        stage('Prepare Container') {
            sh 'hostname'
            sh 'pwd'
            sh "cd jenkins-files/containers/${env.CONTAINER} && ls -ltr && whoami"
            sh "cp -rv /home/user/binaries `pwd`/jenkins-files/containers/${env.CONTAINER}/"
            sh 'which java'
        }

        stage('Build Container') {
            sh 'hostname'
            sh 'ls'
            testImage = docker.build("${PIPELINE_NAME}:${env.BUILD_ID}", "-m 512m --memory-swap 512m jenkins-files/containers/${env.CONTAINER}/")
        }

        testImage.inside ("-m 2500m --memory-swap 2500m") {
            withEnv(['HOME=/opt/jboss']) {
                
                stage('Patch java') {
                        if (env.PATCH_JAVA.toBoolean()) {
                            sh 'echo "Java will be patched"'
                            sh 'cd ${JAVA_HOME}/lib/ext && ls -ltr'
                            copyArtifacts filter: 'artifacts*.zip', fingerprintArtifacts: true, projectName: "${env.UPSTREAM_BUILD_PATCH_JOB}", selector: lastSuccessful()
                            sh 'mv ${JAVA_HOME}/lib/ext/sunec.jar ${JAVA_HOME}/lib/ext/sunec_original_jar.bkp'
                            sh 'mv ${JAVA_HOME}/lib/ext/sunpkcs11.jar ${JAVA_HOME}/lib/ext/sunpkcs11_original_jar.bkp'
                            sh 'unzip artifacts*.zip'
                            sh 'cp -v artifacts*/sunec-java*.jar ${JAVA_HOME}/lib/ext/sunec.jar'
                            sh 'cp -v artifacts*/sunpkcs11-java*.jar ${JAVA_HOME}/lib/ext/sunpkcs11.jar'
                        } 
                        else {
                            sh 'echo "This stage is not applicable as per configuration"'
                        }
                    }

                stage('Verify environment') {
                    // Print versions
                    sh "java -version"
                    sh "ant -version"
                    sh "locale"
                    echo 'All environment variables'         
                    sh 'printenv'          
                    sh 'cat ${JAVA_HOME}/lib/security/java.security || echo "No java.security file exists in Java8 location"'
                    sh 'cat ${JAVA_HOME}/conf/security/java.security || echo "No java.security file exists in Java11 location"'
                    sh 'ls -ltr $JAVA_HOME/lib/ext/ || echo "No ext folder exists in Java8 location"'
                    sh 'id'
                    sh 'gpg2 --version'
                    sh 'cd /tmp && ls -ltr'
                }

                stage('Unpack') {
                    sh 'rm -rf signserver-${EDITION}-*'            
                    copyArtifacts filter: 'signserver-${EDITION}-*-bin.zip', fingerprintArtifacts: true, projectName: "${env.UPSTREAM_BUILD_JOB}", selector: lastSuccessful()

                    sh 'ls'
                    sh 'unzip signserver-${EDITION}*.zip'
                    sh 'rm signserver-${EDITION}*.zip'         
                }            

                stage('Setup cryptoki') {
                    sh 'ls -la $HOME'
                    sh 'unzip -d $HOME /opt/eracom/${CRYPTOKI_ZIP}'
                }

                stage('Configure App Server') {
                    sh 'cp -v jenkins-files/configurations/${APPSERVER_STANDALONE_XML} ${APPSRV_HOME}/standalone/configuration/standalone.xml'

                    sh 'mkdir ${APPSRV_HOME}/standalone/configuration/keystore/'
		    sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_demo-tls.jks ${APPSRV_HOME}/standalone/configuration/keystore/keystore.jks'
                    sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_truststore.jks ${APPSRV_HOME}/standalone/configuration/keystore/truststore.jks'
                    sh 'mkdir /tmp/data'
                    sh 'ls -lta /tmp/data'
                }

                stage('Configure SignServer') {
                    sh '''
                    cd signserver-${EDITION}* && echo "
                        j2ee.web-nohttps=true
                        database.name=nodb
                        database.nodb.location=/tmp/data
                        healthcheck.maintenancefile=${PWD}/maintenance.properties
                        web.admingui.dist.enabled=${ENTERPRISE_EDITION}
                        web.clientcli.dist.enabled=true" > conf/signserver_deploy.properties
                    '''
                    sh '''
                    cd signserver-${EDITION}* && echo "
    # Set root logger level to DEBUG for debug output.
    log4j.rootLogger=DEBUG, A1

    # A1 is set to be a ConsoleAppender. 
    log4j.appender.A1=org.apache.log4j.ConsoleAppender

    # A1 uses PatternLayout.
    log4j.appender.A1.layout=org.apache.log4j.PatternLayout
    log4j.appender.A1.layout.ConversionPattern=%d{ISO8601} %-5p [%c{1}] %m%n

    # Limit categories related to the Database CLI
    log4j.category.org.hibernate=WARN, A1
    log4j.category.org.cesecore.keys.token.CryptoTokenFactory=WARN, A1
    log4j.category.org.cesecore.keys.util.KeyTools=WARN, A1

    # Limit categories related to JBoss AS 7/EAP6 remote EJB
    #log4j.category.org.jboss.remoting=ERROR, A1
    #log4j.category.org.jboss.ejb.client=ERROR, A1
    #log4j.category.org.xnio=ERROR, A1" > conf/log4j.properties
                '''
                    sh 'cd signserver-${EDITION}* && mkdir p12 && mkdir jarsigner-test-files'

		    sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_demo-tls.jks p12/tomcat.jks'
                    sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_truststore.jks p12/truststore.jks'
                    sh 'cd signserver-${EDITION}* && cp -v res/test/dss10/dss10_admin1.p12 p12/client.p12'

                    sh 'cd ${PWD}/jenkins-files/pipelines/${PIPELINE_NAME} &&  ls -ltr'

                    sh 'cd signserver-${EDITION}*/lib/ext && cp -v commons-lang*.jar ../../jarsigner-test-files/'
                    sh 'cd signserver-${EDITION}*/lib/ext && cp -v log4j*.jar ../../jarsigner-test-files/'
                    sh 'cd signserver-${EDITION}*/lib/ext && cp -v cesecore-*.jar ../../jarsigner-test-files/'

                    // P11 test configuration
                    sh '''
               cd signserver-${EDITION}* && echo "
    test.p11.sharedlibrary=${LIBCRYPTOKI}
    test.p11.slot=${P11SLOT}
    test.p11.slotindex=${P11SLOTINDEX}
    test.p11.pin=${P11PIN}
    test.p11.existingkey1=${P11KEY}
    test.p11.provider=${P11_PROVIDER}
    test.p11.MAKE_UNMODIFIABLE_SUPPORTED=false
    test.disablekeygen.disabled=true
    test.dpkgsig.enabled=${DPKGSIG_ENABLED}" > test-config.properties
               '''
                    // CESECORE configuration
                        sh '''
                cd signserver-${EDITION}* && echo "          
    securityeventsaudit.implementation.0=org.signserver.server.log.SignServerLog4jDevice
    securityeventsaudit.implementation.1=org.cesecore.audit.impl.integrityprotected.IntegrityProtectedDevice
    securityeventsaudit.exporter.1=org.cesecore.audit.impl.AuditExporterXml
    pkcs11.makeKeyUnmodifiableAfterGeneration=${PATCH_JAVA}
                            " > conf/cesecore.properties
                    '''
                }

                stage('Verify HSM') {
                        if (env.EDITION == 'ee') {
                            sh 'cd signserver-${EDITION}* && chmod a+x bin/p11ng-tool && ./bin/p11ng-tool -libfile /opt/ETcpsdk/lib/linux-x86_64/libcryptoki.so -action listSlots'
                        }
                        else {
                            sh 'echo "This stage is not applicable for configured edition of SignServer"'
                        }
                    }

                stage('Deploy SignServer') {
                    sh 'cd signserver-${EDITION}* && ant -q deploy-ear'

                    archiveArtifacts 'signserver-${EDITION}*/tmp/signserver.ear'
                }

                stage('Run') {
                    sh 'hostname'
                    sh 'ls'
                    sh 'id'
                    sh '$USER'
                    sh 'ls -lta /tmp/data'

                    sh 'chmod +x jenkins-files/tools/run.sh'
                    sh 'jenkins-files/tools/run.sh && cd signserver-${EDITION}* && export SIGNSERVER_HOME=. && export SIGNSERVER_NODEID="magnum-ci" && export JAVA_OPTS="-Dhttps.protocols=TLSv1.1" && bin/ant systemtest:jars -Dsystemtest.excludes="**/ArchivingCLITest*,**/GroupKeyServiceCLITest*,**/Base64DatabaseArchiverTest*,**/OldDatabaseArchiverTest*,,**/GroupKeyServiceTest*,**/ArchiveTest*,**/AuditLogCLITest*,**/VerifyLogCommandTest*,**/DatabaseCLITest*" -Dno.clover=true'
                }                

                stage('Gather Results') {            
                    junit "signserver-${EDITION}*/tmp/test/results/TEST-*.xml"                                  
                }
            }
        }
    }

    finally {   
        cleanWs()   
    }
    
}
