<?xml version="1.0" encoding="utf-8"?>
<!--

  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER

  Copyright 2008 Sun Microsystems, Inc. All rights reserved.
  Copyright 2009 IBM. All rights reserved.
  
  Use is subject to license terms.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
  obtain a copy of the License at http://odftoolkit.org/docs/license.txt

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and
  limitations under the License.
 
-->
<template class="java">

<ref name="gen_dom_attributes"/>
<ref name="gen_dom_base_elements"/>
<ref name="gen_dom_elements"/>
<!--ref name="gen_doc_elements"/-->
<ref name="gen_OdfNamespaceNames"/>
<ref name="gen_OdfElementNames"/>
<ref name="gen_OdfAttributeNames"/>
    
<!-- generate flat rng -->
<!--file name="elements" extension="xml">
<code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;elements&gt;</code>
      <foreach type="element">
<code>
&lt;element name="%{elementqname}"&gt;</code>
<foreach type="attribute">
<if test="valuetype='enum'">
<code>
&lt;attribute name="%{attributeqname}" type="enum"&gt;</code>
<foreach type="value" seperator=", ">
 <code>"%{value}"</code>
</foreach>
<code>&lt;/attribute&gt;</code>
<else>
<code>
&lt;attribute name="%{attributeqname}" type="%{valuetype}"/&gt;</code>    
</else>
</if>
</foreach>   
<code>
&lt;/element&gt;</code>      
      </foreach>
<code>
&lt;/elements&gt;</code>
</file-->  

<!-- copyright header for .java files -->  
<define name="header">
<code>/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    
</code>
</define>

<!-- copyright header for .java files -->  
<define name="docheader">
<code>/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/
</code>
</define>
<!-- sets the name for the current attribute ============================== -->

<define name="convertenumvaluetype">
    <if test="valuetype='enum'">
        <if test="not endswith(conversiontype,'type')">
            <set valuetype="org.odftoolkit.odfdom.dom.attribute.%{prefix(conversiontype)}:%{identifier(prefix(conversiontype))}%{identifier(conversiontype)}Type"/>
            <else>
                <set valuetype="org.odftoolkit.odfdom.dom.attribute.%{prefix(conversiontype)}:%{identifier(prefix(conversiontype))}%{identifier(conversiontype)}"/>
            </else>
         </if>
         <set conversiontype="%{valuetype}"/>
         <set valueoffunc="enumValueOf"/>
         <else>
         	<if test="valuetype='org.odftoolkit.odfdom.type.TargetFrameName' or valuetype='org.odftoolkit.odfdom.type.ValueType' or valuetype='org.odftoolkit.odfdom.attribute.PresentationClasses'">
         			<set valueoffunc="enumValueOf"/>
         		<else>
             		<set valueoffunc="valueOf"/>
            	</else>
            </if>
         </else>
    </if>            
</define>


<!-- declare attribute enum value of the current element if the attribute has the different value sets depend on the different elements -->

<define name="attributevaluedeclare">
<!-- define enum value for the attribute which has several value sets dependent on the owner element-->
<foreach type="attribute">
	<if test="hasmultivaluesets and valuetype='enum'">
	<set enumname = "%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
	<code>
	/**
	 * The value set of {@odf.attribute %{attributeqname}}.
	 */
	 public enum %{enumname}Value {
	 
	 </code>
              <foreach type="value" seperator=", ">
              	<if test = "attributeqname='style:num-format'">
              	 <code>_%{value}( "%{value}" )</code>
              	<else>
                 <code>%{toupper(identifier(replace("-","_",value)))}( %{enumname}.Value.%{toupper(identifier(replace("-","_",value)))}.toString() )</code>
                </else>
                </if>
              </foreach>
              <code>;
              
		private String mValue;
	 	
		%{enumname}Value( String value )
		{
			mValue = value;
		}
		
		@Override
		public String toString()
		{
			return mValue;
		}
		
		public static %{enumname}Value enumValueOf( String value )
	    {
	        for( %{enumname}Value aIter : values() )
	        {
	            if( value.equals( aIter.toString() ) )
	            {
	                return aIter;
	            }
	        }
	        return null;
	    }
	}</code>
	</if>
</foreach>

<!-- define default value for the attribute which has several default values dependent on the owner element-->
<foreach type="attribute">
	<if test="defaultvalue!='' and hasmultidefaultvalues">
		<set defaultname="DEFAULT_VALUE_%{toupper(identifier(prefix(attributeqname)))}_%{toupper(identifier(attributename))}_ATTRIBUTE"/>
		<set enumname = "%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
		<if test="valuetype='enum'">
		<code>
	public static final String  %{defaultname} = %{enumname}.Value.%{toupper(identifier(defaultvalue))}.toString();</code>
	 	<else>
	 		<code>
	public static final String  %{defaultname} = %{enumname}.DEFAULT_VALUE_%{toupper(identifier(defaultvalue))};</code>
	 	</else>
		</if>
	</if>
</foreach>

</define>
<!--define name="getdefaultvalue">
<foreach type="attribute">
	<if test="defaultvalue!='' and hasmultidefaultvalues">
		<set defaultname="DEFAULT_VALUE_%{toupper(identifier(prefix(attributeqname)))}_%{toupper(identifier(attributename))}_ATTRIBUTE"/>
		<set enumname = "%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
		<set attributeclassname = "%{identifier(prefix(attributeqname))}%{identifier(attributename)}"/>
		<code>
	/**
	 * Receives the value of ODFDOM attribute representation of {@odf.attribute %{attributeqname}}
	 *
	 * @return - return the default value of &lt;code&gt;%{attributeqname}&lt;/code&gt;, if the attribute is not set
	 */
	public String get%{attributeclassname}()
	{
		%{attributeclassname}Attribute %{lowerfirst(attributeclassname)}Attr = get%{attributeclassname}Attribute();
		if( %{lowerfirst(attributeclassname)}Attr != null )
			return %{lowerfirst(attributeclassname)}Attr.getValue();
		else
			return %{defaultname};
	}
		</code>
	</if>
</foreach>
</define-->

<!--define name="attributes">
    <foreach type="attribute">
    <if test="not prefix(attributeqname)">
        <set namespace='""'/>
        <else>
            <set namespace="OdfNamespace.get(OdfNamespaceNames.%{toupper(prefix(attributeqname))})"/>
        </else>
    </if>
    <set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
    <set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
<code>

	/**
	 * Receives the ODFDOM attribute representation of {@odf.attribute %{attributeqname}}
	 *
	 * @return - the &lt;code&gt;%{attributeclassname}&lt;/code&gt; reference or &lt;code&gt;null&lt;/code&gt;, if the attribute is not set
	 */
	public %{attributeclassname} get%{attributeclassname}()
	{
		return (%{attributeclassname}) getOdfAttribute( OdfName.get( %{namespace}, "%{local_name(attributeqname)}" ) );
	}
	
	/**
	 * Sets the ODFDOM attribute representation of {@odf.attribute %{attributeqname}}
	 *
	 * @param %{lowerfirst(attributeclassname)}   The type is &lt;code&gt;%{attributeclassname}&lt;/code&gt;
	 */
	public void set%{attributeclassname}( %{attributeclassname} %{lowerfirst(attributeclassname)} )
	{
		setOdfAttribute( %{lowerfirst(attributeclassname)} );
	}
</code>
    </foreach>          
</define-->

<define name="attributes">
    <foreach type="attribute">
    <if test="not prefix(attributeqname)">
        <set namespace='""'/>
        <else>
            <set namespace="OdfNamespace.get(OdfNamespaceNames.%{toupper(prefix(attributeqname))})"/>
        </else>
    </if>
    
	<set attributetype = "String"/>
	<set methodtype = ""/>
    <if test="not hasmultivaluesets">
    	<if test=" valuetype ='Integer' ">
    		<set methodtype = "int"/>
    		<set attributetype = "%{valuetype}"/>
    	<else>
    		<if test=" valuetype ='Boolean' ">
    	 		<set methodtype = "boolean"/>
    	 		<set attributetype = "%{valuetype}"/>
			<else>
				<if test=" valuetype ='Double' ">
					<set methodtype = "double"/>
					<set attributetype = "%{valuetype}"/>
				</if>
			</else>
			</if>
		</else>
		</if>
	</if>
    <set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}"/>
    <set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
<code>

	/**
	 * Receives the value of the ODFDOM attribute representation &lt;code&gt;%{attributeclassname}Attribute&lt;/code&gt; , See {@odf.attribute %{attributeqname}}
	 *
	 * @return - the &lt;code&gt;%{attributetype}&lt;/code&gt; , the value or &lt;code&gt;null&lt;/code&gt;, if the attribute is not set and no default value defined.
	 */
	public %{attributetype} get%{attributeclassname}Attribute()
	{
		%{attributeclassname}Attribute attr = (%{attributeclassname}Attribute) getOdfAttribute( OdfName.get( %{namespace}, "%{local_name(attributeqname)}" ) );
		if( attr != null ){</code>
	<if test="methodtype!=''">
		<code>
			return %{attributetype}.valueOf( attr.%{methodtype}Value() );</code>
	<else>
		<code>
			return %{attributetype}.valueOf( attr.getValue() );</code>
	</else>
	</if>
	<code>
		}
</code>
	<if test="defaultvalue!=''">
		<if test="hasmultidefaultvalues">
			<set defaultvalue="DEFAULT_VALUE_%{toupper(identifier(prefix(attributeqname)))}_%{toupper(identifier(attributename))}_ATTRIBUTE"/>
		<else>
			<set defaultvalue="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute.DEFAULT_VALUE"/>
		</else>
		</if>
		<if test="attributetype='String'">
<code>		return %{defaultvalue};
</code>
		<else>
<code>		return %{attributetype}.valueOf( %{defaultvalue} );
</code>
		</else>
		</if>
	<else>
<code>		return null;
</code>
	
	</else>
	</if>
<code>	}
		 
	/**
	 * Sets the value of ODFDOM attribute representation &lt;code&gt;%{attributeclassname}Attribute&lt;/code&gt; , See {@odf.attribute %{attributeqname}}
	 *
	 * @param %{lowerfirst(attributeclassname)}Value   The type is &lt;code&gt;%{attributetype}&lt;/code&gt;
	 */
	public void set%{attributeclassname}Attribute( %{attributetype} %{lowerfirst(attributeclassname)}Value )
	{
		%{attributeclassname}Attribute attr =  new %{attributeclassname}Attribute( (OdfFileDom)this.ownerDocument );
		setOdfAttribute( attr );
</code>
<if test="attributetype='String'">
<code>		attr.set%{identifier(methodtype)}Value( %{lowerfirst(attributeclassname)}Value );
</code>
<else>
<code>		attr.set%{identifier(methodtype)}Value( %{lowerfirst(attributeclassname)}Value.%{methodtype}Value() );
</code>
</else>
</if>
<code>	}
</code>
    </foreach>          
</define>

<!-- imports section for the current element =============================== -->

<define name="doImport">
  <if test="not contains(imports,import,';')">
<code>import %{import};
</code>
      <set imports="%{imports};%{import}"/>
  </if>
</define>

<define name="element-import-section">
<code>import org.odftoolkit.odfdom.OdfName;
import org.odftoolkit.odfdom.OdfNamespace;
import org.odftoolkit.odfdom.OdfFileDom;
import org.odftoolkit.odfdom.dom.OdfNamespaceNames;
</code>
<if test="(elementstylefamily != '') and (elementstylefamily != 'draw:graphic,presentation:presentation')">
<code>import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;
</code>
</if>
<!-- import base class, but only if it is in another package -->
<if test="prefix(baseclassname) != prefix(classname)">
<code>import %{baseclassname};
</code>
</if>
  <!-- do imports for attribute values and conversion types -->
 <if test="elementbasename = 'styleproperties'">
<code>import org.odftoolkit.odfdom.dom.style.props.OdfStyleProperty;
import org.odftoolkit.odfdom.dom.style.props.OdfStylePropertiesSet;
</code>
  </if>
  <set imports=""/>
  <foreach type="attribute">
      	<set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
      	<set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
    	<set import="%{pathname}.%{attributeclassname}"/>
    <if test="import">
        <ref name="doImport"/>
    </if>
  </foreach>
</define>

<!-- sets 'ret' to 'true' if the current element has non optional attributes -->
<define name="check_for_non_optional_attributes">
    <set ret="false"/>
    <foreach type="attribute">
        <if test="not optionalattribute">
            <set ret="true"/>
        </if>
    </foreach>
</define>

<!-- create constructor parameter string for current non optional attributes -->
<define name="element_ctor_params">
    <foreach type="attribute">
        <if test="not optionalattribute">
      		<set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
      		<set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
    		<set attributetype = "String"/>
    		<if test="not hasmultivaluesets">
    		<if test=" valuetype ='Integer' ">
    		 	<set attributetype = "int"/>
    		<else>
    		 	<if test=" valuetype ='Boolean' ">
    		 		<set attributetype = "boolean"/>
				<else>
					<if test=" valuetype ='Double' ">
						<set attributetype = "double"/>
					</if>
				</else>
				</if>
			</else>
			</if>
			</if>
					 <code>%{sep}%{attributetype} %{lowerfirst(attributeclassname)}Value</code>
            <set sep=", "/>
        </if>
    </foreach>
</define>

<define name="element_ctor_params_javadoc">
    <set parameter="" />
    <foreach type="attribute">
        <if test="not optionalattribute">
      		<set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
     		<set parameter ="%{lowerfirst(attributeclassname)}Value" />       
	 <code>* @param %{parameter}  The mandatory attribute {@odf.attribute  %{attributename}}"
     </code>
        </if>
    </foreach>
    <if test=" parameter != ''">
    <code>*</code>
    </if>
</define>

<!-- create the parameter list for the init method of the current element == -->
<define name="element_init_params">
    <foreach type="attribute">
        <if test="not optionalattribute">
      		<set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
                <code>%{lowerfirst(attributeclassname)}Value</code>
            <set sep=", "/>
        </if>
    </foreach>
</define>

<!-- create init method for current non optional attributes -->
<define name="element_ctor_init">
    <foreach type="attribute">
        <if test="not optionalattribute">
      		<set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
    		<set attributetype = ""/>
    		<if test="not hasmultivaluesets">
    			<if test=" valuetype ='Integer' or  valuetype ='Boolean' or valuetype ='Double'">
    			<code>
		set%{attributeclassname}( %{valuetype}.valueOf(%{lowerfirst(attributeclassname)}Value) );</code>
				<else>
				<code>
		set%{attributeclassname}( %{lowerfirst(attributeclassname)}Value );</code>
				</else>
				</if>
			</if>
			

        </if>
    </foreach>
</define>

<!-- create dom attributes java files ===================================== -->
<define name="gen_dom_attributes">
  <foreach type="attributeset">
    <set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
    <set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
    <file path="%{pathname}" name="%{attributeclassname}" extensions="java">
          <ref name="header"/>
<code>package %{pathname};

import org.odftoolkit.odfdom.OdfFileDom;
import org.odftoolkit.odfdom.OdfName;
import org.odftoolkit.odfdom.OdfNamespace;
import org.odftoolkit.odfdom.dom.OdfNamespaceNames;
import org.odftoolkit.odfdom.OdfAttribute;
</code>

<if test="hasmultivaluesets or hasdefaultvalue">
<code>import org.odftoolkit.odfdom.OdfElement;
</code>
</if>
<foreach type="attribute">
<if test="(hasmultidefaultvalues and defaultvalue!='') or hasmultivaluesets">
<code>import org.odftoolkit.odfdom.dom.element.%{prefix(ownerelementqname)}.%{identifier(prefix(ownerelementqname))}%{identifier(local_name(ownerelementqname))}Element;
</code>
</if>
</foreach>
<code>     
/**
 * DOM implementation of OpenDocument attribute  {@odf.attribute %{attributeqname}}.
 *
 */
public class %{attributeclassname} extends OdfAttribute {

	public static final OdfName ATTRIBUTE_NAME = OdfName.get( OdfNamespace.get(OdfNamespaceNames.%{toupper(prefix(attributeqname))}), "%{local_name(attributeqname)}" );</code>
	<foreach type="defaultvalueset">
		<if test="hasmultidefaultvalues">
			<if test="(value='true' or value='false') and ( valuetype!='enum' )">
			<code>
	public static final String DEFAULT_VALUE_%{toupper(identifier(value))} = "%{value}";</code>
			<else>
			<code>
	public static final String DEFAULT_VALUE_%{toupper(identifier(value))} = Value.%{toupper(identifier(replace("-","_",value)))}.toString();</code>
			</else>
			</if>
		<else>
			<if test="value='&#34;'">
			<code>
	public static final String DEFAULT_VALUE = "\%{value}";</code>
			<else>
			<code>
	public static final String DEFAULT_VALUE = "%{value}";</code>
			</else>
			</if>
		</else>
		</if>
	</foreach>
<code>

	/**
	 * Create the instance of OpenDocument attribute {@odf.attribute %{attributeqname}}.
	 * 
	 * @param ownerDocument       The type is &lt;code&gt;OdfFileDom&lt;/code&gt;
	 */
	public %{attributeclassname}(OdfFileDom ownerDocument) {
		super(ownerDocument, ATTRIBUTE_NAME);
	}
	
	/**
	 * Returns the attribute name.
	 * 
	 * @return the &lt;code&gt;OdfName&lt;/code&gt; for {@odf.attribute %{attributeqname}}.
	 */
	@Override
	public OdfName getOdfName() {
		return ATTRIBUTE_NAME;
	}
	
	/**
	 * @return Returns the name of this attribute.
	 */
	@Override
	public String getName() {
		return ATTRIBUTE_NAME.getLocalName();
	}
</code>
    <set returntype = "String"/>
    
	<if test=" valuetype ='Integer' ">
		<set returntype = "int"/>
	<else>
		<if test=" valuetype ='Boolean' ">
			<set returntype = "boolean"/>
		<else>
			<if test=" valuetype ='Double' ">
				<set returntype = "double"/>
			</if>
		</else>
		</if>
	</else>
	</if>
	
    <!--the attribute contians the enum value set-->
    <set finished = "false"/>
	<foreach type="valueset">
		<if test="(not finished) and value">
			<set returntype="enum"/>
			<set finished = "true"/>
		</if>
	</foreach>
	
	<if test = "returntype='enum'">
	<!--value type of attributeset is enum-->
	<code>
	/**
	 * The value set of {@odf.attribute %{attributeqname}}.
	 */
	public enum Value {
	 
	 </code>
              <foreach type="valueset" seperator=", ">
              	<if test = "attributeqname='style:num-format'">
              	 <code>_%{value}( "%{value}" )</code>
              	<else>
                 <code>%{toupper(identifier(replace("-","_",value)))}( "%{value}" )</code>
                 </else>
                 </if>
              </foreach>
              <code>;
              
		private String mValue;

		Value( String value )
		{
			mValue = value;
		}
	 	
		@Override
		public String toString()
		{
			return mValue;
		}
		
		public static Value enumValueOf( String value )
	    {
	        for( Value aIter : values() )
	        {
	            if( value.equals( aIter.toString() ) )
	            {
	                return aIter;
	            }
	        }
	        return null;
	    }
	}
	 
	/**
	 * @param attrValue The &lt;code&gt;Enum&lt;/code&gt; value of the attribute.
	 */
	public void setEnumValue(Value attrValue) {
		setValue(attrValue.toString());
	}
    
	/**
	 * @return Returns the &lt;code&gt;Enum&lt;/code&gt; value of the attribute
	 */
	public Value getEnumValue(){
		return Value.enumValueOf(this.getValue());
	}
    </code>
    <else>
    	<!--value type of attributeset is Integer, Boolean or Double-->
    	<if test=" returntype != 'String'">
			<code>
	/**
	 * @param value The &lt;code&gt;%{returntype}&lt;/code&gt; value of the attribute.
	 */
	public void set%{identifier(returntype)}Value(%{returntype} value) {</code>
    	<if test = "valuetype != conversiontype"><code>
    	//2DO: need validate value against %{local_name(conversiontype)} </code>
    	</if><code>
 		super.setValue(String.valueOf(value));
	}
    
	/**
	 * @return Returns the &lt;code&gt;%{returntype}&lt;/code&gt; value of the attribute
	 */
	public %{returntype} %{returntype}Value(){
		String value = super.getValue();
		try {</code>
            <if test = "valuetype != conversiontype"><code>
        	//2DO: need validate value against %{local_name(conversiontype)}</code>
        	</if><code>
			return %{valuetype}.parse%{identifier(returntype)}(value);
		} catch (NumberFormatException e) {
			// TODO: validation handling/logging
			throw (e);
		}
	}</code>
    	</if>
    </else>
    </if>
   
    <code>
	/**
	 * @param attrValue The &lt;code&gt;String&lt;/code&gt; value of the attribute.
	 * @throws IllegalArgumentException If the provided attribute value is invalid
	 */
	@Override
	public void setValue(String attrValue) {</code>
    <if test="hasmultivaluesets">
    	<code>
		OdfElement parentElement = (OdfElement)getOwnerElement();
		if( parentElement != null ){
			try {</code>
    <else>
    	<code>
		try{</code>
    </else>
    </if>
	<set firstflag="true"/>
	<foreach type="attribute">
		<set elementclassname ="%{identifier(prefix(ownerelementqname))}%{identifier(local_name(ownerelementqname))}Element"/>
		<set attributevaluename = "%{identifier(prefix(attributeqname))}%{identifier(attributename)}AttributeValue"/>
		<set returntype = "String"/>
		<if test=" valuetype ='Integer' ">
			<set returntype = "int"/>
		<else>
			<if test=" valuetype ='Boolean' ">
				<set returntype = "boolean"/>
			<else>
				<if test=" valuetype ='Double' ">
					<set returntype = "double"/>
					<else>
						<if test=" valuetype ='enum' ">
							<set returntype = "enum"/>
						</if>
					</else>
				</if>
			</else>
			</if>
		</else>
		</if>
		<if test="firstflag">
			<if test="hasmultivaluesets">
				<code>
				if( parentElement instanceof %{elementclassname} ){</code>
				
				<if test="returntype = 'enum'">
					<code>
					super.setValue(%{elementclassname}.%{attributevaluename}.enumValueOf(attrValue).toString());</code>
				<else>
					<if test = "valuetype != conversiontype or hasdelimiter(valuetype, ';')">
            		<code>
					//2DO: need validate value against %{local_name(conversiontype)}</code>
            		</if>
					<if test="returntype != 'String'">
            		<code>
					super.setValue(%{valuetype}.toString(%{valuetype}.parse%{identifier(returntype)}(attrValue)));</code>
            		<else>
            		<code>
					super.setValue(attrValue);</code>
            		</else>
            		</if>
        		</else>
				</if>
				<code>
				}</code>
			<else><!-- has only one value set-->
				<if test="returntype = 'enum'">
				<code>
			super.setValue(Value.enumValueOf(attrValue).toString());</code>
				<else>
				  <if test = "valuetype != conversiontype or hasdelimiter(valuetype, ';')">
				  <code>
			//2DO: need validate value against %{local_name(conversiontype)}</code>
            	  </if>
					<if test="returntype != 'String'">
            	<code>
			super.setValue(%{valuetype}.toString(%{valuetype}.parse%{identifier(returntype)}(attrValue)));</code>
            		<else>
            	<code>
			super.setValue(attrValue);</code>
            		</else>
            		</if>
        		</else>
				</if>
			</else>
			</if>
			<set firstflag="false"/>
		<else>
			<if test="hasmultivaluesets">
<code>else if( parentElement instanceof %{elementclassname} ){</code>
				<if test="returntype = 'enum'">
					<code>
					super.setValue(%{elementclassname}.%{attributevaluename}.enumValueOf(attrValue).toString());</code>
				<else>
					<if test = "valuetype != conversiontype or hasdelimiter(valuetype, ';')">
						<code>
					//2DO: need validate value against %{local_name(conversiontype)}</code>
            		</if>
					<if test="returntype != 'String'">
            		<code>
					super.setValue(%{valuetype}.toString(%{valuetype}.parse%{identifier(returntype)}(attrValue)));</code>
            		<else>
            		<code>
					super.setValue(attrValue);</code>
            		</else>
            		</if>
        		</else>
				</if>
				<code>
				}</code>
			</if>
		</else>
		</if>
	</foreach>
	<if test="hasmultivaluesets">
<code>			
			} catch (NullPointerException e) {
				// TODO: validation handling/logging
				throw new IllegalArgumentException(e);
			}
			  catch (IllegalArgumentException e) {
				// TODO: validation handling/logging
				throw (e);
			}
		}else{
			//2DO:what should do when the owner element is null?
			super.setValue(attrValue);
		}</code>
	<else>
	<code>	
		}  catch (NullPointerException e) {
			// TODO: validation handling/logging
			throw new IllegalArgumentException(e);
		} catch (IllegalArgumentException e) {
			// TODO: validation handling/logging
			throw (e);
		}</code>
	</else>
	</if>
    <code>
	}
    
	/**
	 * @return Returns the &lt;code&gt;String&lt;/code&gt; value of the attribute
	 */
	@Override
	public String getValue(){</code>
    <if test="hasmultivaluesets">
    	<code>
		OdfElement parentElement = (OdfElement)getOwnerElement();
		if( parentElement != null ){
			try {</code>
    <else>
    	<code>
		try{</code>
    </else>
    </if>
	<set firstflag="true"/>
	<foreach type="attribute">
		<set elementclassname ="%{identifier(prefix(ownerelementqname))}%{identifier(local_name(ownerelementqname))}Element"/>
		<set attributevaluename = "%{identifier(prefix(attributeqname))}%{identifier(attributename)}AttributeValue"/>
		<set returntype = "String"/>
		<if test=" valuetype ='Integer' ">
			<set returntype = "int"/>
		<else>
			<if test=" valuetype ='Boolean' ">
				<set returntype = "boolean"/>
			<else>
				<if test=" valuetype ='Double' ">
					<set returntype = "double"/>
					<else>
						<if test=" valuetype ='enum' ">
							<set returntype = "enum"/>
						</if>
					</else>
				</if>
			</else>
			</if>
		</else>
		</if>
		<if test="firstflag">
			<if test="hasmultivaluesets">
				<code>
				if( parentElement instanceof %{elementclassname} ){</code>
				
				<if test="returntype = 'enum'">
					<code>
					return %{elementclassname}.%{attributevaluename}.enumValueOf(super.getValue()).toString();</code>
				<else>
					<if test = "valuetype != conversiontype or hasdelimiter(valuetype, ';')">
            		<code>
					//2DO: need validate value against %{local_name(conversiontype)}</code>
            		</if>
					<if test="returntype != 'String'">
            		<code>
					return String.valueOf(%{valuetype}.parse%{identifier(returntype)}(super.getValue()));</code>
            		<else>
            		<code>
					return super.getValue();</code>
            		</else>
            		</if>
        		</else>
				</if>
				<code>
				}</code>
			<else><!-- has only one value set-->
				<if test="returntype = 'enum'">
					<code>
			return Value.enumValueOf(super.getValue()).toString();</code>
				<else>
					<if test = "valuetype != conversiontype or hasdelimiter(valuetype, ';')">
            		<code>
			//2DO: need validate value against %{local_name(conversiontype)}</code>
            		</if>
					<if test="returntype != 'String'">
            		<code>
			return String.valueOf(%{valuetype}.parse%{identifier(returntype)}(super.getValue()));</code>
            		<else>
            		<code>
			return super.getValue();</code>
            		</else>
            		</if>
        		</else>
				</if>
			</else>
			</if>
			<set firstflag="false"/>
		<else>
			<if test="hasmultivaluesets">
<code>else if( parentElement instanceof %{elementclassname} ){</code>
				<if test="returntype = 'enum'">
					<code>
					return %{elementclassname}.%{attributevaluename}.enumValueOf(super.getValue()).toString();</code>
				<else>
					<if test = "valuetype != conversiontype or hasdelimiter(valuetype, ';')">
            		<code>
					//2DO: need validate value against %{local_name(conversiontype)}</code>
            		</if>
					<if test="returntype != 'String'">
            		<code>
					return String.valueOf(%{valuetype}.parse%{identifier(returntype)}(super.getValue()));</code>
            		<else>
            		<code>
					return super.getValue();</code>
            		</else>
            		</if>
        		</else>
				</if>
				<code>
				}</code>
			</if>
		</else>
		</if>
	</foreach>
	<if test="hasmultivaluesets">
<code>			
			} catch (IllegalArgumentException e) {
				// TODO: validation handling/logging
				throw new NumberFormatException("the value of %{attributeqname} is not valid");
			}
		}else{
			//2DO:what should do when the owner element is null?
			return super.getValue();
		}
		return null;</code>
	<else>
	<code>		
		} catch (IllegalArgumentException e) {
			// TODO: validation handling/logging
			throw new NumberFormatException("the value of %{attributeqname} is not valid");
		}</code>
	</else>
	</if>
    <code>
	}</code>
    
<!-- get/hasDefault() method-->		
	<if test="hasdefaultvalue">
	<code>
	/**
	 * Returns the default value of {@odf.attribute %{attributeqname}} dependent of its element name
	 * 
	 * @return the default value as &lt;code&gt;String&lt;/code&gt;, 
	 *         return &lt;code&gt;null&lt;/code&gt; if the default value does not exist
	 */
	@Override
	public String getDefault() {
		OdfElement parentElement = (OdfElement)getOwnerElement();
		String defaultValue = null;
		if (parentElement != null) {
</code>
	<set firstflag="true"/>
	<foreach type="attribute">
		<set elementclassname ="%{identifier(prefix(ownerelementqname))}%{identifier(local_name(ownerelementqname))}Element"/>
		<if test="defaultvalue!=''">
		<if test="firstflag">
			<if test="hasmultidefaultvalues">
<code>			if( parentElement instanceof %{elementclassname} ){
				defaultValue = DEFAULT_VALUE_%{toupper(identifier(defaultvalue))};
			}</code>
			<else>
<code>			defaultValue = DEFAULT_VALUE;</code>
			</else>
			</if>
			<set firstflag="false"/>
		<else>
			<if test="hasmultidefaultvalues">
<code>else if( parentElement instanceof %{elementclassname} ){
				defaultValue = DEFAULT_VALUE_%{toupper(identifier(defaultvalue))};
			}</code>
			</if>
		</else>
		</if>
		</if>
	</foreach>
<code>			
		}
		return defaultValue;
	}

	/**
	 * Default value indicator. As the attribute default value is dependent from its element, the attribute has only a default, when a parent element exists.
	 * 
	 * @return &lt;code&gt;true&lt;/code&gt; if {@odf.attribute %{attributeqname}} has an element parent 
	 *         otherwise return &lt;code&gt;false&lt;/code&gt; as undefined.
	 */
	@Override
	public boolean hasDefault() {
		return getOwnerElement() == null ? false : true;
	}
	</code>
	<else>
	<code>
	
	/**
	 * Returns the default value of {@odf.attribute %{attributeqname}}.
	 * 
	 * @return the default value as &lt;code&gt;String&lt;/code&gt; dependent of its element name
	 *         return &lt;code&gt;null&lt;/code&gt; if the default value does not exist
	 */
	@Override
	public String getDefault() {
		return null;
	}
	
	/**
	 * Default value indicator. As the attribute default value is dependent from its element, the attribute has only a default, when a parent element exists.
	 * 
	 * @return &lt;code&gt;true&lt;/code&gt; if {@odf.attribute %{attributeqname}} has an element parent 
	 *         otherwise return &lt;code&gt;false&lt;/code&gt; as undefined.
	 */
	@Override
	public boolean hasDefault() {
		return false;
	}
	</code>
	</else>
	</if>
<code>
	/**
	 * @return Returns whether this attribute is known to be of type ID (i.e. xml:id ?)
	 */
	@Override
	public boolean isId() {</code>
    <if test=" conversiontype ='org.odftoolkit.odfdom.type.ID'">
    <code>
		return true;
    </code>
    <else>
    <code>
		return false;
    </code>
    </else>
    </if><code>
	}
}
</code>
	</file>
   </foreach>
</define>

<!-- create base element class files ===================================== -->
<define name="gen_dom_base_elements">
  <foreach type="baseelement">
    <set classname="org.odftoolkit.odfdom.dom.element.%{prefix(elementqname)}.%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}ElementBase"/>
    <if test="not elementstylefamily">        
        <if test="elementbasename = 'container'">
            <set baseclassname="org.odftoolkit.odfdom.OdfContainerElementBase"/>
            <else>
                <if test="elementbasename = 'style'">
                    <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStyleBase"/>
                    <else>
                       <if test="elementbasename = 'styleproperties'">
                          <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStylePropertiesBase"/>
                          <else>
                              <set baseclassname="org.odftoolkit.odfdom.OdfElement"/>
                          </else>
                       </if>
                     </else>
                  </if>
               </else>
           </if>
        <else>
            <if test="elementstylefamily!='draw:graphic,presentation:presentation'">
                <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStylableElement"/>
                <else>
                    <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStyleablePresentationElement"/>
                </else>
            </if>
        </else>
    </if>
    <file path="%{prefix(classname)}" name="%{local_name(classname)}" extensions="java">      
      <ref name="header"/>
<code>package org.odftoolkit.odfdom.dom.element.%{prefix(elementqname)};
</code>
      <ref name="element-import-section"/>
      <code>

/**
 * DOM implementation of OpenDocument base element 
 */
public abstract class %{local_name(classname)} extends %{local_name(baseclassname)}
{</code>

<ref name = "attributevaluedeclare"/>
<if test="(elementstylefamily = '') or (elementstylefamily = 'draw:graphic,presentation:presentation')">
<code>
	/**
	 * Create the instance of %{local_name(classname)} 
	 *
	 * @param  ownerDoc     The type is &lt;code&gt;OdfFileDom&lt;/code&gt;
	 * @param  elementName   The type is &lt;code&gt;OdfName&lt;/code&gt;
	 */
	public %{local_name(classname)}( OdfFileDom ownerDoc, OdfName elementName )
	{
		super( ownerDoc, elementName );
	}</code>
<else>    
<code>
	/**
	 * Create the instance of %{local_name(classname)} 
	 *
	 * @param  ownerDoc      The type is &lt;code&gt;OdfFileDom&lt;/code&gt;
	 * @param  elementName   The type is &lt;code&gt;OdfName&lt;/code&gt;
	 * @param  styleFamily    The type is &lt;code&gt;OdfStyleFamily&lt;/code&gt;
	 * @param  styleAttrName  The type is &lt;code&gt;OdfName&lt;/code&gt;
	 */
	public %{local_name(classname)}( OdfFileDom ownerDoc ,OdfName elementName ,OdfStyleFamily styleFamily ,OdfName styleAttrName )
    {
		super( ownerDoc, elementName, styleFamily, styleAttrName );
	}</code>   
</else>    
</if>
<ref name="check_for_non_optional_attributes"/>
<set baseHasMandatoryAttr="%{ret}"/>
<if test="baseHasMandatoryAttr">
<code>
	/**
	 * Initialization of the mandatory attributes of {@link  %{local_name(classname)}}
	 *
     </code>
	 <ref name="element_ctor_params_javadoc"/>
	 <code>*/
     
	public void init(</code>
<set sep=""/>    
<ref name="element_ctor_params"/>    
<code>)
	{</code>
<ref name="element_ctor_init"/>    
<code>	
	}</code>
</if>
      <if test="elementbasename != 'styleproperties'">
        <ref name="attributes"/>
        <else>
            
        </else>
      </if>
      <code>
}
      </code>
    </file>
  </foreach>    
</define>

<define name="get_baseclassname">
    <if test="not elementbasename">
        <if test="not elementstylefamily">        
            <set baseclassname="org.odftoolkit.odfdom.OdfElement"/>
            <else>
                <if test="elementstylefamily!='draw:graphic,presentation:presentation'">
                    <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStylableElement"/>
                    <else>
                        <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStyleablePresentationElement"/>
                    </else>
                </if>                
            </else>
        </if>
        <else>
            <if test="elementbasename = 'container'">
                <set baseclassname="org.odftoolkit.odfdom.OdfContainerElementBase"/>
            <else>
                <if test="elementbasename = 'style'">
                    <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStyleBase"/>
                    <else>
                       <if test="elementbasename = 'styleproperties'">
                          <set baseclassname="org.odftoolkit.odfdom.dom.element.OdfStylePropertiesBase"/>
                          <else>
                            <set baseclassname="org.odftoolkit.odfdom.dom.element.%{prefix(elementbasename)}.%{identifier(prefix(elementbasename))}%{identifier(elementbasename)}ElementBase"/>
                          </else>
                       </if>
                    </else>
                </if>
            </else>
            </if>
        </else>
    </if>
</define>

<!-- create dom element class files ========================================== -->
<define name="gen_dom_elements">
  <foreach type="element">
    <!-- test if this element has mandatory (non optional) attributes -->
    <ref name="check_for_non_optional_attributes"/>
    <set hasMandatoryAttr="%{ret}"/>
    <set packagename = "%{prefix(elementqname)}" />
    <set currentname = "%{elementname}" />

    <!-- now check if base element has mandatory (non optional) attributes -->
    <set baseHasMandatoryAttr="false"/>
    <if test="prefix(elementbasename) != ''">
      <select type="baseelement" name="%{elementbasename}">
        <ref name="check_for_non_optional_attributes"/>
        <set baseHasMandatoryAttr="%{ret}"/>
      </select>
    </if>

    <set classname="org.odftoolkit.odfdom.dom.element.%{prefix(elementqname)}.%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element"/>
    <ref name="get_baseclassname"/>
    <file path="%{prefix(classname)}" name="%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element" extensions="java">
      <ref name="header"/>
      <code>
package %{prefix(classname)};

</code>
      <ref name="element-import-section"/>
      <!-- now set the imports for child elements and attributes -->
     <set imports=""/>
     <set import="" />  
       <children type="element">
            <if test = "packagename != prefix(elementqname)">
                  <set import="org.odftoolkit.odfdom.dom.element.%{prefix(elementqname)}.%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element"/>
           </if>
           <if test="not contains(imports,import,';')">
               <if test="import !=''">
                <if test="imports =''">
                   <set imports="import %{import}"/>
                   <else>
                      <set imports="%{imports};%{import}"/>
                   </else>
                </if>
               </if>
           </if>
           <set import="" />
           <!--subattribute>
               <group>
                  <set import="" />
      			  <set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
      			  <set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
    			  <set import="%{pathname}.%{attributeclassname}"/>
                  <if test="not contains(imports,import,';')">
                          <if test="import !=''">
                            <if test="imports =''">
                                <set imports="import %{import}"/>
                            <else>
                                 <set imports="%{imports};%{import}"/>
                             </else>
                             </if>
                           </if>
                   </if>
               </group>
           </subattribute-->
      </children>
      <if test ="imports =''">
           <set allimport=""/>
         <else>
           <set allimport="%{imports}"/>
           <set allimport="%{replace(';',';\nimport ',allimport)}" />
           <code>
%{allimport};</code>
        </else>
       </if>
      <code>

/**
 * DOM implementation of OpenDocument element  {@odf.element %{elementqname}}.
 *
 */
public abstract class %{local_name(classname)} extends %{local_name(baseclassname)}
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.get(OdfNamespaceNames.%{toupper(prefix(elementqname))}), "%{local_name(elementqname)}" );
</code>
<ref name = "attributevaluedeclare"/>
<code>

	/**
	 * Create the instance of &lt;code&gt;%{local_name(classname)}&lt;/code&gt; 
	 *
	 * @param  ownerDoc     The type is &lt;code&gt;OdfFileDom&lt;/code&gt;
	 */
	public %{local_name(classname)}( OdfFileDom ownerDoc )
	{
		super( ownerDoc, ELEMENT_NAME</code>
<if test="(elementstylefamily != '') and (elementstylefamily != 'draw:graphic,presentation:presentation')">
<code>, OdfStyleFamily.%{identifier(elementstylefamily)}, OdfName.get( OdfNamespace.get(OdfNamespaceNames.%{toupper(prefix(elementstylefamily))}), "style-name" )</code>
</if>
<code>	);
	}

	/**
	 * Get the element name 
	 *
	 * @return  return   &lt;code&gt;OdfName&lt;/code&gt; the name of element {@odf.element %{elementqname}}.
	 */
	public OdfName getOdfName()
	{
		return ELEMENT_NAME;
	}

</code>

      <if test="elementbasename = 'styleproperties'">
            <foreach type="attribute">
            	<set propertysetname = '%{identifier(attributename)}'/>
            	<if test="attributeqname = 'draw:shadow' or attributeqname = 'dr3d:shadow'">
            		<set propertysetname = '%{identifier(prefix(attributeqname))}%{identifier(local_name(attributeqname))}'/>
            	</if>
<code>    public final static OdfStyleProperty %{propertysetname} = 
        OdfStyleProperty.get(OdfStylePropertiesSet.%{identifier(local_name(elementqname))}, OdfName.get( OdfNamespace.get(OdfNamespaceNames.%{toupper(prefix(attributeqname))}), "%{local_name(attributeqname)}"));
</code>
            </foreach>
	   </if>
<!-- add init method if this element or the base element has mandatory attributes -->
<if test="hasMandatoryAttr or baseHasMandatoryAttr">
<code>	/**
	 * Initialization of the mandatory attributes of {@link  %{local_name(classname)}}
	 *
     </code>
<ref name="element_ctor_params_javadoc"/>     
<if test="baseHasMandatoryAttr">
  <select type="baseelement" name="%{elementbasename}">
    <ref name="element_ctor_params_javadoc"/>
  </select>
</if>
     <code>
	 */
	public void init(</code>
<set sep=""/>    
<ref name="element_ctor_params"/>
<if test="baseHasMandatoryAttr">
  <select type="baseelement" name="%{elementbasename}">
    <ref name="element_ctor_params"/>
  </select>
</if>
<code>)
	{</code>
<ref name="element_ctor_init"/>    
      <!-- if we have a base element, call its init function here -->
      <if test="baseHasMandatoryAttr">
          <select type="baseelement" name="%{elementbasename}">
              <code>		super.init( </code>
              <set sep=""/>
                  <ref name="element_init_params"/>
              <code> );
</code>
        </select>
      </if>
<code>
	}</code>
</if>      

		<ref name="attributes"/>
		<!--ref name="getdefaultvalue"/-->
<!-- add create child elements method  -->
      <set selements="" />
      <children type="element">
          <set hasparameters="false" />
            <subattribute>
              <set hasparameters="true" />
              <set childname = "%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element" />
                                 <code>
	/**
	 * Create child element {@odf.element %{elementqname}}.
	 *
    </code>
               <set parameters = ""/>
               <set sep="" />
               <group>
                  <set hasparameters="true" />
				  <set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
				  <set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
				  <set attributetype = "String"/>
				  <if test="not hasmultivaluesets">
    			  <if test=" valuetype ='Integer' ">
    			  	<set attributetype = "int"/>
    			  <else>
    			  	<if test=" valuetype ='Boolean' ">
    			  		<set attributetype = "boolean"/>
					<else>
						<if test=" valuetype ='Double' ">
							<set attributetype = "double"/>
						</if>
					</else>
					</if>
				  </else>
				  </if>
				  </if>
                  <set parameter="%{lowerfirst(attributeclassname)}Value  the &lt;code&gt;%{attributetype}&lt;/code&gt; value of &lt;code&gt;%{attributeclassname}&lt;/code&gt;, see {@odf.attribute  %{attributeqname}} at specification"/>
                  <set parameters="%{parameters}%{sep}%{parameter}" /> 
                  <set sep=";"/> 
               </group>
               <if test="parameters != ''" >
    <code> * @param %{replace(';','\n	 * @param ',parameters)}</code></if>
    <code>
	 * @return   return  the element {@odf.element %{elementqname}}
	 * DifferentQName %{diffqname}
	 */
    </code>
    <if test=" diffqname = ''"><code>
	public %{childname} new%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element(</code>
         <else><code>
	public %{childname} new%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}ElementBy%{identifier(local_name(diffqname))}(</code>         
         </else>
    </if>
               <set parameters = ""/>
               <set sep="" />
               <group>
                  <set hasparameters="true" />
				  <set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
				  <set pathname="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}"/>
				  <set attributetype = "String"/>
				  <if test="not hasmultivaluesets">
    			  <if test=" valuetype ='Integer' ">
    			  	<set attributetype = "int"/>
    			  <else>
    			  	<if test=" valuetype ='Boolean' ">
    			  		<set attributetype = "boolean"/>
					<else>
						<if test=" valuetype ='Double' ">
							<set attributetype = "double"/>
						</if>
					</else>
					</if>
				  </else>
				  </if>
				  </if>
                  <set parameter="%{attributetype} %{lowerfirst(attributeclassname)}Value"/>
                  <set parameters="%{parameters}%{sep}%{parameter}" /> 
                  <set sep=", "/> 
               </group>
               <code>%{parameters})
	{
		%{childname}  %{prefix(elementqname)}%{identifier(local_name(elementqname))} = ((OdfFileDom)this.ownerDocument).newOdfElement(%{childname}.class);</code>
            <group>
      			  <set attributeclassname="%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
    			  <if test="not hasmultivaluesets">
    			  	<if test=" valuetype ='Integer' or valuetype ='Boolean' or  valuetype ='Double'">
		<code>
		%{prefix(elementqname)}%{identifier(local_name(elementqname))}.set%{attributeclassname}( %{valuetype}.valueOf(%{lowerfirst(attributeclassname)}Value) );</code>
				  	<else>
		<code>
		%{prefix(elementqname)}%{identifier(local_name(elementqname))}.set%{attributeclassname}( %{lowerfirst(attributeclassname)}Value );</code>
				  	</else>
				  	</if>
				  <else>
				  <code>
		%{prefix(elementqname)}%{identifier(local_name(elementqname))}.set%{attributeclassname}( %{lowerfirst(attributeclassname)}Value );</code>
				  </else>									  	
				  </if>
            </group><code>
		this.appendChild( %{prefix(elementqname)}%{identifier(local_name(elementqname))});
		return  %{prefix(elementqname)}%{identifier(local_name(elementqname))};      
	}
    </code>
            </subattribute>
            <if test="hasparameters='false'" >
                 <set selement="%{elementqname}"/>
                 <if test="not contains(selements,selement,';')">
                    <set childname = "%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element" />
               <code>
	/**
	 * Create child element {@odf.element %{elementqname}}.
	 *
	 * @return   return  the element {@odf.element %{elementqname}}
	 * DifferentQName %{diffqname}
	 */
	public %{childname} new%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element()
	{
		%{childname}  %{prefix(elementqname)}%{identifier(local_name(elementqname))} = ((OdfFileDom)this.ownerDocument).newOdfElement(%{childname}.class);
		this.appendChild( %{prefix(elementqname)}%{identifier(local_name(elementqname))});
		return  %{prefix(elementqname)}%{identifier(local_name(elementqname))};
	}                   
               </code>
                                  <set selements="%{selements};%{selement}" />

                </if>
            </if>
      </children>
      <code>
}
</code>
    </file>
  </foreach>  
</define>
<!-- generate OdfNamespaceNames java file -->
<define name="gen_OdfNamespaceNames">
	<set classname="org.odftoolkit.odfdom.dom.OdfNamespaceNames"/>
  	<file path="%{prefix(classname)}" name="%{local_name(classname)}" extensions="java">
      <ref name="header"/>
<code>
package %{prefix(classname)};

import org.odftoolkit.odfdom.OdfName;

/**
 * constants for OpenDocument namespaces
 */
public enum %{local_name(classname)} {
</code>
<!-- add XML namespace in OdfNameSpace.java if it is not exist-->
	<set testHasXMLNS = "false"/>
    <foreach type="namespace" seperator=","><code>
	%{toupper(namespaceprefix)}("%{namespaceprefix}", "%{namespaceuri}")</code>  
        <if test = "namespaceprefix = 'XML'">
        	<set testHasXMLNS="true"/>
        </if>                           
    </foreach>
    <if test = "not testHasXMLNS">
    	<code>,
	XML("xml", "http://www.w3.org/XML/1998/namespace" );
    	</code>
    <else>
    	<code>;
    	</code>
    </else>
    </if>
<code>
	private String mPrefix;
	private String mNamespaceUri;
	
	OdfNamespaceNames(String prefix, String namespaceUri) {
		mPrefix = prefix;
		mNamespaceUri = namespaceUri;
	}    
	
	public String getPrefix() {
		return mPrefix;
	}
	
	public String getNamespaceUri() {
		return mNamespaceUri;
	}
} 
</code>
</file>
</define>



<define name="gen_OdfElementNames">
	<set classname="org.odftoolkit.odfdom.dom.OdfElementNames"/>
  	<file path="%{prefix(classname)}" name="%{local_name(classname)}" extensions="java">
      <ref name="header"/>
<code>
package %{prefix(classname)};

import org.odftoolkit.odfdom.OdfName;

/**
 * constants for OpenDocument Element
 */
public enum %{local_name(classname)} {
</code>
<foreach type="element" seperator=",">
<if test="(contains(elementname, prefix(elementqname), '-') and not endswith(elementname,'table') ) or ( elementname=prefix(elementqname) ) or (startswith(elementname, prefix(elementqname)) and prefix(elementqname) = 'anim')">
	<set elementclass="org.odftoolkit.odfdom.doc.%{prefix(elementqname)}.Odf%{identifier(elementname)}"/>
<else>
	<set elementclass="org.odftoolkit.odfdom.doc.%{prefix(elementqname)}.Odf%{identifier(prefix(elementqname))}%{identifier(elementname)}"/>
</else>
</if>
<!-- we must use the full qualified class name here as we have equal element names in different namespaces! -->
<code>
	%{toupper(identifier(prefix(elementqname)))}%{toupper(identifier(elementname))}(%{elementclass}.ELEMENT_NAME, %{elementclass}.class)</code>
</foreach>
<code>;
</code>
<code>
	private OdfName mName;
    private Class mElementClass;
    
    OdfElementNames(OdfName name, Class elementclass) {
    	mName = name;
    	mElementClass = elementclass;
    }
    
    public OdfName getOdfName(){
    	return mName;
    }
    
    public Class getElementClass(){
    	return mElementClass;
    }
}
</code>
</file>
</define>
<define name="gen_OdfAttributeNames">
	<set classname="org.odftoolkit.odfdom.dom.OdfAttributeNames"/>
  	<file path="%{prefix(classname)}" name="%{local_name(classname)}" extensions="java">
      <ref name="header"/>
<code>
package %{prefix(classname)};

import org.odftoolkit.odfdom.OdfName;

/**
 * constants for OpenDocument Attribute
 */
public enum %{local_name(classname)} {</code>
<foreach type="attributeset" seperator=",">
<set attributeclass="org.odftoolkit.odfdom.dom.attribute.%{prefix(attributeqname)}.%{identifier(prefix(attributeqname))}%{identifier(attributename)}Attribute"/>
<!-- we must use the full qualified class name here as we have equal attribute names in different namespaces! -->
<code>
	%{toupper(identifier(prefix(attributeqname)))}%{toupper(identifier(attributename))}(%{attributeclass}.ATTRIBUTE_NAME, %{attributeclass}.class)</code>
</foreach>
<code>;
</code>
<code>
	private OdfName mName;
    private Class mAttributeClass;
    
    OdfAttributeNames(OdfName name, Class attributeclass) {
    	mName = name;
    	mAttributeClass = attributeclass;
    }
    
    public OdfName getOdfName(){
    	return mName;
    }
    
    public Class getAttributeClass(){
    	return mAttributeClass;
    }
}
</code>
</file>
</define>

<!-- generate doc element java classes ===================================== -->
<define name="gen_doc_elements">
<foreach type="element">
	<if test="(contains(elementname, prefix(elementqname), '-') and not endswith(elementname,'table') ) or ( elementname=prefix(elementqname) ) or (startswith(elementname, prefix(elementqname)) and prefix(elementqname) = 'anim')">
    	<set classname="org.odftoolkit.odfdom.doc.element.%{prefix(elementqname)}.Odf%{identifier(elementname)}"/>
    <else>
    	<set classname="org.odftoolkit.odfdom.doc.element.%{prefix(elementqname)}.Odf%{identifier(prefix(elementqname))}%{identifier(elementname)}"/>
    </else>
    </if>
    <set baseclassname="org.odftoolkit.odfdom.dom.element.%{prefix(elementqname)}.%{identifier(prefix(elementqname))}%{identifier(local_name(elementqname))}Element"/>
    <file path="org/odftoolkit/odfdom/doc/%{prefix(elementqname)}" name="%{local_name(classname)}" extensions="java">
      <ref name="docheader"/>
      <code>
package %{prefix(classname)};

import org.odftoolkit.odfdom.OdfFileDom;
import %{baseclassname};

/**
 * Convenient functionalty for the parent ODF OpenDocument element
 */
public class %{local_name(classname)} extends %{local_name(baseclassname)}
{
	public %{local_name(classname)}( OdfFileDom ownerDoc )
	{
		super( ownerDoc );
	}
}
</code>
</file>
</foreach>
</define>

</template>
