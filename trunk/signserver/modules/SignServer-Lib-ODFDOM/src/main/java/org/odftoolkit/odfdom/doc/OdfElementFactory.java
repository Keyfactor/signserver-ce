/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * Copyright 2009 IBM. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.doc;

import java.lang.reflect.Constructor;
import java.util.HashMap;
import java.util.Map;

import org.odftoolkit.odfdom.OdfAttribute;
import org.odftoolkit.odfdom.OdfElement;
import org.odftoolkit.odfdom.OdfFileDom;
import org.odftoolkit.odfdom.dom.OdfAttributeNames;
import org.odftoolkit.odfdom.dom.OdfElementNames;
import org.odftoolkit.odfdom.OdfName;
import org.odftoolkit.odfdom.pkg.element.OdfAlienAttribute;
import org.odftoolkit.odfdom.pkg.element.OdfAlienElement;
import org.w3c.dom.DOMException;

/** This factory determines what elements are being used in the DOC layer
 * (ie. the convenient layer).
 *
 *  The mapping of ODF element to convenient class can be changed from the user
 *  during run time.
 *
 *  For example, a user might want to create a table always with a certain style or default data and
 *  might want to overwrite the mapping for <code>{odf.element table:table}</code>, that a different
 *  class instead of <code>OdfTable</code> is being used.
 * 
 */
public class OdfElementFactory {

    private static Map<OdfName, Class> mElementTypes;
    private static Map<OdfName, Class> mAttributeTypes;

    static {
        populateElementTypes();
        populateAttributeTypes();
    }

    private synchronized static void populateElementTypes() {
        if (mElementTypes != null) {
            return;
        }
        mElementTypes = new HashMap<OdfName, Class>();
        for (OdfElementNames element : OdfElementNames.values()) {
        	mElementTypes.put(element.getOdfName(), element.getElementClass());
        }
        //2DO: add the Manifest element container 
    }
    
    private synchronized static void populateAttributeTypes() {
        if (mAttributeTypes != null) {
            return;
        }
        mAttributeTypes = new HashMap<OdfName, Class>();
        for (OdfAttributeNames attribute : OdfAttributeNames.values()) {
        	mAttributeTypes.put(attribute.getOdfName(), attribute.getAttributeClass());
        }
        //2DO: add the Manifest attribute container
    }
    public static void mapElementOdfNameToClass(OdfName odfName, Class className){
        mElementTypes.put(odfName, className);
    }
    
    public static void mapAttributeOdfNameToClass(OdfName odfName, Class className){
    	mAttributeTypes.put(odfName, className);
    }

    @SuppressWarnings("unchecked")  // XXX: If possible this should be fixed. Suppressing for now to not hide warnings from other files.
    public static OdfElement newOdfElement(OdfFileDom ownerDocument, OdfName name) throws DOMException {
        OdfElement e = null;

        // lookup registered element class for qname
        Class elementClass = mElementTypes.get(name);

        // if a class was registered create an instance of that class
        if (elementClass != null) {
            try {
                Constructor ctor = elementClass.getConstructor(new Class[]{OdfFileDom.class});
                e = (OdfElement) ctor.newInstance(new Object[]{ownerDocument});
                return e;
            } catch (Exception cause) {
                // an exception at this point is a bug. Throw an Error
                throw new Error("OdfDOM error in element factory", cause);
            }
        }

        // otherwise create the default class for odf
        return (OdfElement) new OdfAlienElement(ownerDocument, name);
    }
    
    @SuppressWarnings("unchecked")
    public static OdfAttribute newOdfAttribute(OdfFileDom ownerDocument, OdfName name) throws DOMException {
        OdfAttribute attr = null;

        // lookup registered attribute class for qname
        Class attributeClass = mAttributeTypes.get(name);

        // if a class was registered create an instance of that class
        if (attributeClass != null) {
            try {
                Constructor ctor = attributeClass.getConstructor(new Class[]{OdfFileDom.class});
                attr = (OdfAttribute) ctor.newInstance(new Object[]{ownerDocument});
                return attr;
            } catch (Exception cause) {
                // an exception at this point is a bug. Throw an Error
                throw new Error("OdfDOM error in attribute factory", cause);
            }
        }

        // otherwise create the default class for odf
        return (OdfAttribute) new OdfAlienAttribute(ownerDocument, name);
    }
}
