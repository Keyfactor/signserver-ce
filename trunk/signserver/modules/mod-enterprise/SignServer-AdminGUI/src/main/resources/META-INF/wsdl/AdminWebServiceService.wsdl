<?xml version='1.0' encoding='UTF-8'?><wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://adminws.signserver.org/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" name="AdminWSService" targetNamespace="http://adminws.signserver.org/">
  <wsdl:types>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://adminws.signserver.org/" attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://adminws.signserver.org/">
  <xs:element name="activateSigner" type="tns:activateSigner"/>
  <xs:element name="activateSignerResponse" type="tns:activateSignerResponse"/>
  <xs:element name="addAuthorizedClient" type="tns:addAuthorizedClient"/>
  <xs:element name="addAuthorizedClientResponse" type="tns:addAuthorizedClientResponse"/>
  <xs:element name="deactivateSigner" type="tns:deactivateSigner"/>
  <xs:element name="deactivateSignerResponse" type="tns:deactivateSignerResponse"/>
  <xs:element name="destroyKey" type="tns:destroyKey"/>
  <xs:element name="destroyKeyResponse" type="tns:destroyKeyResponse"/>
  <xs:element name="generateSignerKey" type="tns:generateSignerKey"/>
  <xs:element name="generateSignerKeyResponse" type="tns:generateSignerKeyResponse"/>
  <xs:element name="getAuthorizedClients" type="tns:getAuthorizedClients"/>
  <xs:element name="getAuthorizedClientsResponse" type="tns:getAuthorizedClientsResponse"/>
  <xs:element name="getCurrentWorkerConfig" type="tns:getCurrentWorkerConfig"/>
  <xs:element name="getCurrentWorkerConfigResponse" type="tns:getCurrentWorkerConfigResponse"/>
  <xs:element name="getGlobalConfiguration" type="tns:getGlobalConfiguration"/>
  <xs:element name="getGlobalConfigurationResponse" type="tns:getGlobalConfigurationResponse"/>
  <xs:element name="getKeyUsageCounterValue" type="tns:getKeyUsageCounterValue"/>
  <xs:element name="getKeyUsageCounterValueResponse" type="tns:getKeyUsageCounterValueResponse"/>
  <xs:element name="getPKCS10CertificateRequest" type="tns:getPKCS10CertificateRequest"/>
  <xs:element name="getPKCS10CertificateRequestForAlias" type="tns:getPKCS10CertificateRequestForAlias"/>
  <xs:element name="getPKCS10CertificateRequestForAlias2" type="tns:getPKCS10CertificateRequestForAlias2"/>
  <xs:element name="getPKCS10CertificateRequestForAlias2Response" type="tns:getPKCS10CertificateRequestForAlias2Response"/>
  <xs:element name="getPKCS10CertificateRequestForAliasResponse" type="tns:getPKCS10CertificateRequestForAliasResponse"/>
  <xs:element name="getPKCS10CertificateRequestForKey" type="tns:getPKCS10CertificateRequestForKey"/>
  <xs:element name="getPKCS10CertificateRequestForKey2" type="tns:getPKCS10CertificateRequestForKey2"/>
  <xs:element name="getPKCS10CertificateRequestForKey2Response" type="tns:getPKCS10CertificateRequestForKey2Response"/>
  <xs:element name="getPKCS10CertificateRequestForKeyResponse" type="tns:getPKCS10CertificateRequestForKeyResponse"/>
  <xs:element name="getPKCS10CertificateRequestResponse" type="tns:getPKCS10CertificateRequestResponse"/>
  <xs:element name="getSignerCertificate" type="tns:getSignerCertificate"/>
  <xs:element name="getSignerCertificateChain" type="tns:getSignerCertificateChain"/>
  <xs:element name="getSignerCertificateChainResponse" type="tns:getSignerCertificateChainResponse"/>
  <xs:element name="getSignerCertificateResponse" type="tns:getSignerCertificateResponse"/>
  <xs:element name="getSigningValidityNotAfter" type="tns:getSigningValidityNotAfter"/>
  <xs:element name="getSigningValidityNotAfterResponse" type="tns:getSigningValidityNotAfterResponse"/>
  <xs:element name="getSigningValidityNotBefore" type="tns:getSigningValidityNotBefore"/>
  <xs:element name="getSigningValidityNotBeforeResponse" type="tns:getSigningValidityNotBeforeResponse"/>
  <xs:element name="getStatus" type="tns:getStatus"/>
  <xs:element name="getStatusResponse" type="tns:getStatusResponse"/>
  <xs:element name="getWorkerId" type="tns:getWorkerId"/>
  <xs:element name="getWorkerIdResponse" type="tns:getWorkerIdResponse"/>
  <xs:element name="getWorkers" type="tns:getWorkers"/>
  <xs:element name="getWorkersResponse" type="tns:getWorkersResponse"/>
  <xs:element name="globalReload" type="tns:globalReload"/>
  <xs:element name="globalReloadResponse" type="tns:globalReloadResponse"/>
  <xs:element name="globalResync" type="tns:globalResync"/>
  <xs:element name="globalResyncResponse" type="tns:globalResyncResponse"/>
  <xs:element name="importCertificateChain" type="tns:importCertificateChain"/>
  <xs:element name="importCertificateChainResponse" type="tns:importCertificateChainResponse"/>
  <xs:element name="process" type="tns:process"/>
  <xs:element name="processResponse" type="tns:processResponse"/>
  <xs:element name="queryArchive" type="tns:queryArchive"/>
  <xs:element name="queryArchiveResponse" type="tns:queryArchiveResponse"/>
  <xs:element name="queryArchiveWithIds" type="tns:queryArchiveWithIds"/>
  <xs:element name="queryArchiveWithIdsResponse" type="tns:queryArchiveWithIdsResponse"/>
  <xs:element name="queryAuditLog" type="tns:queryAuditLog"/>
  <xs:element name="queryAuditLogResponse" type="tns:queryAuditLogResponse"/>
  <xs:element name="queryTokenEntries" type="tns:queryTokenEntries"/>
  <xs:element name="queryTokenEntriesResponse" type="tns:queryTokenEntriesResponse"/>
  <xs:element name="reloadConfiguration" type="tns:reloadConfiguration"/>
  <xs:element name="reloadConfigurationResponse" type="tns:reloadConfigurationResponse"/>
  <xs:element name="removeAuthorizedClient" type="tns:removeAuthorizedClient"/>
  <xs:element name="removeAuthorizedClientResponse" type="tns:removeAuthorizedClientResponse"/>
  <xs:element name="removeGlobalProperty" type="tns:removeGlobalProperty"/>
  <xs:element name="removeGlobalPropertyResponse" type="tns:removeGlobalPropertyResponse"/>
  <xs:element name="removeKey" type="tns:removeKey"/>
  <xs:element name="removeKeyResponse" type="tns:removeKeyResponse"/>
  <xs:element name="removeWorkerProperty" type="tns:removeWorkerProperty"/>
  <xs:element name="removeWorkerPropertyResponse" type="tns:removeWorkerPropertyResponse"/>
  <xs:element name="setGlobalProperty" type="tns:setGlobalProperty"/>
  <xs:element name="setGlobalPropertyResponse" type="tns:setGlobalPropertyResponse"/>
  <xs:element name="setWorkerProperty" type="tns:setWorkerProperty"/>
  <xs:element name="setWorkerPropertyResponse" type="tns:setWorkerPropertyResponse"/>
  <xs:element name="testKey" type="tns:testKey"/>
  <xs:element name="testKeyResponse" type="tns:testKeyResponse"/>
  <xs:element name="uploadSignerCertificate" type="tns:uploadSignerCertificate"/>
  <xs:element name="uploadSignerCertificateChain" type="tns:uploadSignerCertificateChain"/>
  <xs:element name="uploadSignerCertificateChainResponse" type="tns:uploadSignerCertificateChainResponse"/>
  <xs:element name="uploadSignerCertificateResponse" type="tns:uploadSignerCertificateResponse"/>
  <xs:complexType name="getStatus">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getStatusResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:wsWorkerStatus"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="wsWorkerStatus">
    <xs:sequence>
      <xs:element name="activeConfig">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="key" type="xs:anyType"/>
                  <xs:element minOccurs="0" name="value" type="xs:anyType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="completeStatusText" type="xs:string"/>
      <xs:element minOccurs="0" name="hostname" type="xs:string"/>
      <xs:element minOccurs="0" name="ok" type="xs:string"/>
      <xs:element minOccurs="0" name="statusText" type="xs:string"/>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryArchiveWithIds">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="uniqueIds" type="xs:string"/>
      <xs:element name="includeData" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryArchiveWithIdsResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:archiveEntry"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="archiveEntry">
    <xs:sequence>
      <xs:element minOccurs="0" name="archiveData" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="archiveId" type="xs:string"/>
      <xs:element minOccurs="0" name="requestCertSerialNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="requestIP" type="xs:string"/>
      <xs:element minOccurs="0" name="requestIssuerDN" type="xs:string"/>
      <xs:element minOccurs="0" name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="time" type="xs:long"/>
      <xs:element minOccurs="0" name="type" type="xs:int"/>
      <xs:element minOccurs="0" name="uniqueId" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeWorkerProperty">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
      <xs:element minOccurs="0" name="key" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeWorkerPropertyResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addAuthorizedClient">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
      <xs:element minOccurs="0" name="authClient" type="tns:authorizedClient"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="authorizedClient">
    <xs:sequence>
      <xs:element minOccurs="0" name="certSN" type="xs:string"/>
      <xs:element minOccurs="0" name="issuerDN" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addAuthorizedClientResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getWorkers">
    <xs:sequence>
      <xs:element name="workerType" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getWorkersResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryAuditLog">
    <xs:sequence>
      <xs:element name="startIndex" type="xs:int"/>
      <xs:element name="max" type="xs:int"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="condition" type="tns:queryCondition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ordering" type="tns:queryOrdering"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryCondition">
    <xs:sequence>
      <xs:element minOccurs="0" name="column" type="xs:string"/>
      <xs:element minOccurs="0" name="operator" type="tns:relationalOperator"/>
      <xs:element minOccurs="0" name="value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryOrdering">
    <xs:sequence>
      <xs:element minOccurs="0" name="column" type="xs:string"/>
      <xs:element minOccurs="0" name="order" type="tns:order"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryAuditLogResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:logEntry"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="logEntry">
    <xs:sequence>
      <xs:element name="additionalDetails">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="key" type="xs:string"/>
                  <xs:element minOccurs="0" name="value" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="authToken" type="xs:string"/>
      <xs:element minOccurs="0" name="customId" type="xs:string"/>
      <xs:element minOccurs="0" name="eventStatus" type="tns:eventStatus"/>
      <xs:element minOccurs="0" name="eventType" type="xs:string"/>
      <xs:element minOccurs="0" name="moduleType" type="xs:string"/>
      <xs:element minOccurs="0" name="nodeId" type="xs:string"/>
      <xs:element minOccurs="0" name="searchDetail1" type="xs:string"/>
      <xs:element minOccurs="0" name="searchDetail2" type="xs:string"/>
      <xs:element minOccurs="0" name="sequenceNumber" type="xs:long"/>
      <xs:element minOccurs="0" name="serviceType" type="xs:string"/>
      <xs:element minOccurs="0" name="timeStamp" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSigningValidityNotBefore">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSigningValidityNotBeforeResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="importCertificateChain">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="certificateChain" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="alias" type="xs:string"/>
      <xs:element minOccurs="0" name="authenticationCode" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="importCertificateChainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getSigningValidityNotAfter">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSigningValidityNotAfterResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="destroyKey">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element name="purpose" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="destroyKeyResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAuthorizedClients">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAuthorizedClientsResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:authorizedClient"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForAlias2">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="certReqInfo" type="tns:pkcs10CertReqInfo"/>
      <xs:element name="explicitEccParameters" type="xs:boolean"/>
      <xs:element minOccurs="0" name="keyAlias" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="pkcs10CertReqInfo">
    <xs:sequence>
      <xs:element minOccurs="0" name="attributes" type="tns:asn1Set"/>
      <xs:element minOccurs="0" name="signatureAlgorithm" type="xs:string"/>
      <xs:element minOccurs="0" name="subjectDN" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType abstract="true" name="asn1Set">
    <xs:complexContent>
      <xs:extension base="tns:asn1Primitive">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="asn1Primitive">
    <xs:complexContent>
      <xs:extension base="tns:asn1Object">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType abstract="true" name="asn1Object">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForAlias2Response">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:certReqData"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certReqData">
    <xs:sequence>
      <xs:element minOccurs="0" name="armored" type="xs:string"/>
      <xs:element minOccurs="0" name="binary" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="contentType" type="xs:string"/>
      <xs:element minOccurs="0" name="fileSuffix" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSignerCertificateChain">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSignerCertificateChainResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForAlias">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="certReqInfo" type="tns:pkcs10CertReqInfo"/>
      <xs:element name="explicitEccParameters" type="xs:boolean"/>
      <xs:element minOccurs="0" name="keyAlias" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForAliasResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:base64SignerCertReqData"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="base64SignerCertReqData">
    <xs:sequence>
      <xs:element minOccurs="0" name="base64CertReq" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForKey">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="certReqInfo" type="tns:pkcs10CertReqInfo"/>
      <xs:element name="explicitEccParameters" type="xs:boolean"/>
      <xs:element name="defaultKey" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForKeyResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:base64SignerCertReqData"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="testKey">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="alias" type="xs:string"/>
      <xs:element minOccurs="0" name="authCode" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="testKeyResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:keyTestResult"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="keyTestResult">
    <xs:sequence>
      <xs:element minOccurs="0" name="alias" type="xs:string"/>
      <xs:element minOccurs="0" name="publicKeyHash" type="xs:string"/>
      <xs:element minOccurs="0" name="status" type="xs:string"/>
      <xs:element name="success" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getWorkerId">
    <xs:sequence>
      <xs:element minOccurs="0" name="workerName" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getWorkerIdResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryTokenEntries">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
      <xs:element name="startIndex" type="xs:int"/>
      <xs:element name="max" type="xs:int"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="condition" type="tns:queryCondition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ordering" type="tns:queryOrdering"/>
      <xs:element name="includeData" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryTokenEntriesResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:tokenSearchResults"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="tokenSearchResults">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="entries" nillable="true" type="tns:tokenEntry"/>
      <xs:element minOccurs="0" name="moreEntriesAvailable" type="xs:boolean"/>
      <xs:element minOccurs="0" name="numMoreEntries" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="tokenEntry">
    <xs:sequence>
      <xs:element minOccurs="0" name="alias" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="chain" nillable="true" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
      <xs:element name="info">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="key" type="xs:string"/>
                  <xs:element minOccurs="0" name="value" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="trustedCertificate" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="type" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeKey">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="alias" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeKeyResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSignerCertificate">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSignerCertificateResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getGlobalConfiguration">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getGlobalConfigurationResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:wsGlobalConfiguration"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="wsGlobalConfiguration">
    <xs:sequence>
      <xs:element minOccurs="0" name="appVersion" type="xs:string"/>
      <xs:element name="clusterClassLoaderEnabled" type="xs:boolean"/>
      <xs:element name="config">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="key" type="xs:anyType"/>
                  <xs:element minOccurs="0" name="value" type="xs:anyType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="requireSigning" type="xs:boolean"/>
      <xs:element minOccurs="0" name="state" type="xs:string"/>
      <xs:element name="useClassVersions" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="uploadSignerCertificateChain">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="signerCerts" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="scope" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="uploadSignerCertificateChainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getCurrentWorkerConfig">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getCurrentWorkerConfigResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:wsWorkerConfig"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="wsWorkerConfig">
    <xs:sequence>
      <xs:element name="properties">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
              <xs:complexType>
                <xs:sequence>
                  <xs:element minOccurs="0" name="key" type="xs:anyType"/>
                  <xs:element minOccurs="0" name="value" type="xs:anyType"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeGlobalProperty">
    <xs:sequence>
      <xs:element minOccurs="0" name="scope" type="xs:string"/>
      <xs:element minOccurs="0" name="key" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeGlobalPropertyResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryArchive">
    <xs:sequence>
      <xs:element name="startIndex" type="xs:int"/>
      <xs:element name="max" type="xs:int"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="condition" type="tns:queryCondition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ordering" type="tns:queryOrdering"/>
      <xs:element name="includeData" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="queryArchiveResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:archiveEntry"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setGlobalProperty">
    <xs:sequence>
      <xs:element minOccurs="0" name="scope" type="xs:string"/>
      <xs:element minOccurs="0" name="key" type="xs:string"/>
      <xs:element minOccurs="0" name="value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setGlobalPropertyResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getKeyUsageCounterValue">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getKeyUsageCounterValueResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="process">
    <xs:sequence>
      <xs:element minOccurs="0" name="workerIdOrName" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="processRequest" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="processResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="globalReload">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="globalReloadResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForKey2">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="certReqInfo" type="tns:pkcs10CertReqInfo"/>
      <xs:element name="explicitEccParameters" type="xs:boolean"/>
      <xs:element name="defaultKey" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestForKey2Response">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:certReqData"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="activateSigner">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="authenticationCode" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="activateSignerResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removeAuthorizedClient">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
      <xs:element minOccurs="0" name="authClient" type="tns:authorizedClient"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeAuthorizedClientResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="globalResync">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="globalResyncResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="generateSignerKey">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="keyAlgorithm" type="xs:string"/>
      <xs:element minOccurs="0" name="keySpec" type="xs:string"/>
      <xs:element minOccurs="0" name="alias" type="xs:string"/>
      <xs:element minOccurs="0" name="authCode" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="generateSignerKeyResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequest">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="certReqInfo" type="tns:pkcs10CertReqInfo"/>
      <xs:element name="explicitEccParameters" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPKCS10CertificateRequestResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="return" type="tns:base64SignerCertReqData"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setWorkerProperty">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
      <xs:element minOccurs="0" name="key" type="xs:string"/>
      <xs:element minOccurs="0" name="value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setWorkerPropertyResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="uploadSignerCertificate">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
      <xs:element minOccurs="0" name="signerCert" type="xs:base64Binary"/>
      <xs:element minOccurs="0" name="scope" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="uploadSignerCertificateResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="deactivateSigner">
    <xs:sequence>
      <xs:element name="signerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="deactivateSignerResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="reloadConfiguration">
    <xs:sequence>
      <xs:element name="workerId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="reloadConfigurationResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:simpleType name="relationalOperator">
    <xs:restriction base="xs:string">
      <xs:enumeration value="GT"/>
      <xs:enumeration value="GE"/>
      <xs:enumeration value="LT"/>
      <xs:enumeration value="LE"/>
      <xs:enumeration value="EQ"/>
      <xs:enumeration value="NEQ"/>
      <xs:enumeration value="BETWEEN"/>
      <xs:enumeration value="LIKE"/>
      <xs:enumeration value="NULL"/>
      <xs:enumeration value="NOTNULL"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="order">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ASC"/>
      <xs:enumeration value="DESC"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="eventStatus">
    <xs:restriction base="xs:string">
      <xs:enumeration value="FAILURE"/>
      <xs:enumeration value="SUCCESS"/>
      <xs:enumeration value="VOID"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="InvalidWorkerIdException" type="tns:InvalidWorkerIdException"/>
  <xs:complexType name="InvalidWorkerIdException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="AdminNotAuthorizedException" type="tns:AdminNotAuthorizedException"/>
  <xs:complexType name="AdminNotAuthorizedException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="SignServerException" type="tns:SignServerException"/>
  <xs:complexType name="SignServerException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="CryptoTokenOfflineException" type="tns:CryptoTokenOfflineException"/>
  <xs:complexType name="CryptoTokenOfflineException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="OperationUnsupportedException" type="tns:OperationUnsupportedException"/>
  <xs:complexType name="OperationUnsupportedException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="CertificateException" type="tns:CertificateException"/>
  <xs:complexType name="CertificateException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="KeyStoreException" type="tns:KeyStoreException"/>
  <xs:complexType name="KeyStoreException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="AuthorizationDeniedException" type="tns:AuthorizationDeniedException"/>
  <xs:complexType name="AuthorizationDeniedException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="QueryException" type="tns:QueryException"/>
  <xs:complexType name="QueryException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="IllegalRequestException" type="tns:IllegalRequestException"/>
  <xs:complexType name="IllegalRequestException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="CryptoTokenAuthenticationFailureException" type="tns:CryptoTokenAuthenticationFailureException"/>
  <xs:complexType name="CryptoTokenAuthenticationFailureException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="ResyncException" type="tns:ResyncException"/>
  <xs:complexType name="ResyncException">
    <xs:sequence>
      <xs:element minOccurs="0" name="message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
  </wsdl:types>
  <wsdl:message name="removeWorkerProperty">
    <wsdl:part element="tns:removeWorkerProperty" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addAuthorizedClient">
    <wsdl:part element="tns:addAuthorizedClient" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryAuditLogResponse">
    <wsdl:part element="tns:queryAuditLogResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentWorkerConfigResponse">
    <wsdl:part element="tns:getCurrentWorkerConfigResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getWorkers">
    <wsdl:part element="tns:getWorkers" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryArchiveResponse">
    <wsdl:part element="tns:queryArchiveResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSigningValidityNotBefore">
    <wsdl:part element="tns:getSigningValidityNotBefore" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="importCertificateChain">
    <wsdl:part element="tns:importCertificateChain" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAuthorizedClients">
    <wsdl:part element="tns:getAuthorizedClients" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForAlias2">
    <wsdl:part element="tns:getPKCS10CertificateRequestForAlias2" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerCertificateChainResponse">
    <wsdl:part element="tns:getSignerCertificateChainResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerCertificateChain">
    <wsdl:part element="tns:getSignerCertificateChain" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setGlobalPropertyResponse">
    <wsdl:part element="tns:setGlobalPropertyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadSignerCertificateResponse">
    <wsdl:part element="tns:uploadSignerCertificateResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerCertificateResponse">
    <wsdl:part element="tns:getSignerCertificateResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForAlias">
    <wsdl:part element="tns:getPKCS10CertificateRequestForAlias" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="testKey">
    <wsdl:part element="tns:testKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getWorkerId">
    <wsdl:part element="tns:getWorkerId" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeKey">
    <wsdl:part element="tns:removeKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAuthorizedClientsResponse">
    <wsdl:part element="tns:getAuthorizedClientsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerCertificate">
    <wsdl:part element="tns:getSignerCertificate" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizationDeniedException">
    <wsdl:part element="tns:AuthorizationDeniedException" name="AuthorizationDeniedException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getWorkerIdResponse">
    <wsdl:part element="tns:getWorkerIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForKey2Response">
    <wsdl:part element="tns:getPKCS10CertificateRequestForKey2Response" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="globalReloadResponse">
    <wsdl:part element="tns:globalReloadResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSignerResponse">
    <wsdl:part element="tns:activateSignerResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="KeyStoreException">
    <wsdl:part element="tns:KeyStoreException" name="KeyStoreException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getGlobalConfigurationResponse">
    <wsdl:part element="tns:getGlobalConfigurationResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="testKeyResponse">
    <wsdl:part element="tns:testKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setGlobalProperty">
    <wsdl:part element="tns:setGlobalProperty" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="globalResyncResponse">
    <wsdl:part element="tns:globalResyncResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getKeyUsageCounterValue">
    <wsdl:part element="tns:getKeyUsageCounterValue" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="CryptoTokenOfflineException">
    <wsdl:part element="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="process">
    <wsdl:part element="tns:process" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestResponse">
    <wsdl:part element="tns:getPKCS10CertificateRequestResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateSignerResponse">
    <wsdl:part element="tns:deactivateSignerResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="globalResync">
    <wsdl:part element="tns:globalResync" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="generateSignerKey">
    <wsdl:part element="tns:generateSignerKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeAuthorizedClientResponse">
    <wsdl:part element="tns:removeAuthorizedClientResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequest">
    <wsdl:part element="tns:getPKCS10CertificateRequest" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadSignerCertificate">
    <wsdl:part element="tns:uploadSignerCertificate" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateSigner">
    <wsdl:part element="tns:deactivateSigner" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="QueryException">
    <wsdl:part element="tns:QueryException" name="QueryException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getStatus">
    <wsdl:part element="tns:getStatus" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryArchiveWithIds">
    <wsdl:part element="tns:queryArchiveWithIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="OperationUnsupportedException">
    <wsdl:part element="tns:OperationUnsupportedException" name="OperationUnsupportedException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="ResyncException">
    <wsdl:part element="tns:ResyncException" name="ResyncException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="CertificateException">
    <wsdl:part element="tns:CertificateException" name="CertificateException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryAuditLog">
    <wsdl:part element="tns:queryAuditLog" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="destroyKeyResponse">
    <wsdl:part element="tns:destroyKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForAliasResponse">
    <wsdl:part element="tns:getPKCS10CertificateRequestForAliasResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="SignServerException">
    <wsdl:part element="tns:SignServerException" name="SignServerException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addAuthorizedClientResponse">
    <wsdl:part element="tns:addAuthorizedClientResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getWorkersResponse">
    <wsdl:part element="tns:getWorkersResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSigningValidityNotAfter">
    <wsdl:part element="tns:getSigningValidityNotAfter" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeWorkerPropertyResponse">
    <wsdl:part element="tns:removeWorkerPropertyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="destroyKey">
    <wsdl:part element="tns:destroyKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryArchiveWithIdsResponse">
    <wsdl:part element="tns:queryArchiveWithIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="processResponse">
    <wsdl:part element="tns:processResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="reloadConfigurationResponse">
    <wsdl:part element="tns:reloadConfigurationResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForKey">
    <wsdl:part element="tns:getPKCS10CertificateRequestForKey" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryTokenEntries">
    <wsdl:part element="tns:queryTokenEntries" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getKeyUsageCounterValueResponse">
    <wsdl:part element="tns:getKeyUsageCounterValueResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getGlobalConfiguration">
    <wsdl:part element="tns:getGlobalConfiguration" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="CryptoTokenAuthenticationFailureException">
    <wsdl:part element="tns:CryptoTokenAuthenticationFailureException" name="CryptoTokenAuthenticationFailureException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadSignerCertificateChain">
    <wsdl:part element="tns:uploadSignerCertificateChain" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="IllegalRequestException">
    <wsdl:part element="tns:IllegalRequestException" name="IllegalRequestException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentWorkerConfig">
    <wsdl:part element="tns:getCurrentWorkerConfig" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeGlobalProperty">
    <wsdl:part element="tns:removeGlobalProperty" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadSignerCertificateChainResponse">
    <wsdl:part element="tns:uploadSignerCertificateChainResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryArchive">
    <wsdl:part element="tns:queryArchive" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="InvalidWorkerIdException">
    <wsdl:part element="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForKeyResponse">
    <wsdl:part element="tns:getPKCS10CertificateRequestForKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setWorkerPropertyResponse">
    <wsdl:part element="tns:setWorkerPropertyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getStatusResponse">
    <wsdl:part element="tns:getStatusResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSigningValidityNotBeforeResponse">
    <wsdl:part element="tns:getSigningValidityNotBeforeResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="globalReload">
    <wsdl:part element="tns:globalReload" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForKey2">
    <wsdl:part element="tns:getPKCS10CertificateRequestForKey2" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSigner">
    <wsdl:part element="tns:activateSigner" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="generateSignerKeyResponse">
    <wsdl:part element="tns:generateSignerKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeAuthorizedClient">
    <wsdl:part element="tns:removeAuthorizedClient" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminNotAuthorizedException">
    <wsdl:part element="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSigningValidityNotAfterResponse">
    <wsdl:part element="tns:getSigningValidityNotAfterResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeKeyResponse">
    <wsdl:part element="tns:removeKeyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="queryTokenEntriesResponse">
    <wsdl:part element="tns:queryTokenEntriesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKCS10CertificateRequestForAlias2Response">
    <wsdl:part element="tns:getPKCS10CertificateRequestForAlias2Response" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setWorkerProperty">
    <wsdl:part element="tns:setWorkerProperty" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeGlobalPropertyResponse">
    <wsdl:part element="tns:removeGlobalPropertyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="importCertificateChainResponse">
    <wsdl:part element="tns:importCertificateChainResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="reloadConfiguration">
    <wsdl:part element="tns:reloadConfiguration" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="AdminWS">
    <wsdl:operation name="getStatus">
      <wsdl:input message="tns:getStatus" name="getStatus">
    </wsdl:input>
      <wsdl:output message="tns:getStatusResponse" name="getStatusResponse">
    </wsdl:output>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryArchiveWithIds">
      <wsdl:input message="tns:queryArchiveWithIds" name="queryArchiveWithIds">
    </wsdl:input>
      <wsdl:output message="tns:queryArchiveWithIdsResponse" name="queryArchiveWithIdsResponse">
    </wsdl:output>
      <wsdl:fault message="tns:SignServerException" name="SignServerException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeWorkerProperty">
      <wsdl:input message="tns:removeWorkerProperty" name="removeWorkerProperty">
    </wsdl:input>
      <wsdl:output message="tns:removeWorkerPropertyResponse" name="removeWorkerPropertyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addAuthorizedClient">
      <wsdl:input message="tns:addAuthorizedClient" name="addAuthorizedClient">
    </wsdl:input>
      <wsdl:output message="tns:addAuthorizedClientResponse" name="addAuthorizedClientResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getWorkers">
      <wsdl:input message="tns:getWorkers" name="getWorkers">
    </wsdl:input>
      <wsdl:output message="tns:getWorkersResponse" name="getWorkersResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryAuditLog">
      <wsdl:input message="tns:queryAuditLog" name="queryAuditLog">
    </wsdl:input>
      <wsdl:output message="tns:queryAuditLogResponse" name="queryAuditLogResponse">
    </wsdl:output>
      <wsdl:fault message="tns:SignServerException" name="SignServerException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSigningValidityNotBefore">
      <wsdl:input message="tns:getSigningValidityNotBefore" name="getSigningValidityNotBefore">
    </wsdl:input>
      <wsdl:output message="tns:getSigningValidityNotBeforeResponse" name="getSigningValidityNotBeforeResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="importCertificateChain">
      <wsdl:input message="tns:importCertificateChain" name="importCertificateChain">
    </wsdl:input>
      <wsdl:output message="tns:importCertificateChainResponse" name="importCertificateChainResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
      <wsdl:fault message="tns:OperationUnsupportedException" name="OperationUnsupportedException">
    </wsdl:fault>
      <wsdl:fault message="tns:CertificateException" name="CertificateException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSigningValidityNotAfter">
      <wsdl:input message="tns:getSigningValidityNotAfter" name="getSigningValidityNotAfter">
    </wsdl:input>
      <wsdl:output message="tns:getSigningValidityNotAfterResponse" name="getSigningValidityNotAfterResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="destroyKey">
      <wsdl:input message="tns:destroyKey" name="destroyKey">
    </wsdl:input>
      <wsdl:output message="tns:destroyKeyResponse" name="destroyKeyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAuthorizedClients">
      <wsdl:input message="tns:getAuthorizedClients" name="getAuthorizedClients">
    </wsdl:input>
      <wsdl:output message="tns:getAuthorizedClientsResponse" name="getAuthorizedClientsResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForAlias2">
      <wsdl:input message="tns:getPKCS10CertificateRequestForAlias2" name="getPKCS10CertificateRequestForAlias2">
    </wsdl:input>
      <wsdl:output message="tns:getPKCS10CertificateRequestForAlias2Response" name="getPKCS10CertificateRequestForAlias2Response">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerCertificateChain">
      <wsdl:input message="tns:getSignerCertificateChain" name="getSignerCertificateChain">
    </wsdl:input>
      <wsdl:output message="tns:getSignerCertificateChainResponse" name="getSignerCertificateChainResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForAlias">
      <wsdl:input message="tns:getPKCS10CertificateRequestForAlias" name="getPKCS10CertificateRequestForAlias">
    </wsdl:input>
      <wsdl:output message="tns:getPKCS10CertificateRequestForAliasResponse" name="getPKCS10CertificateRequestForAliasResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForKey">
      <wsdl:input message="tns:getPKCS10CertificateRequestForKey" name="getPKCS10CertificateRequestForKey">
    </wsdl:input>
      <wsdl:output message="tns:getPKCS10CertificateRequestForKeyResponse" name="getPKCS10CertificateRequestForKeyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="testKey">
      <wsdl:input message="tns:testKey" name="testKey">
    </wsdl:input>
      <wsdl:output message="tns:testKeyResponse" name="testKeyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
      <wsdl:fault message="tns:KeyStoreException" name="KeyStoreException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getWorkerId">
      <wsdl:input message="tns:getWorkerId" name="getWorkerId">
    </wsdl:input>
      <wsdl:output message="tns:getWorkerIdResponse" name="getWorkerIdResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryTokenEntries">
      <wsdl:input message="tns:queryTokenEntries" name="queryTokenEntries">
    </wsdl:input>
      <wsdl:output message="tns:queryTokenEntriesResponse" name="queryTokenEntriesResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AuthorizationDeniedException" name="AuthorizationDeniedException">
    </wsdl:fault>
      <wsdl:fault message="tns:QueryException" name="QueryException">
    </wsdl:fault>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:SignServerException" name="SignServerException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
      <wsdl:fault message="tns:OperationUnsupportedException" name="OperationUnsupportedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeKey">
      <wsdl:input message="tns:removeKey" name="removeKey">
    </wsdl:input>
      <wsdl:output message="tns:removeKeyResponse" name="removeKeyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:SignServerException" name="SignServerException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
      <wsdl:fault message="tns:KeyStoreException" name="KeyStoreException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerCertificate">
      <wsdl:input message="tns:getSignerCertificate" name="getSignerCertificate">
    </wsdl:input>
      <wsdl:output message="tns:getSignerCertificateResponse" name="getSignerCertificateResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getGlobalConfiguration">
      <wsdl:input message="tns:getGlobalConfiguration" name="getGlobalConfiguration">
    </wsdl:input>
      <wsdl:output message="tns:getGlobalConfigurationResponse" name="getGlobalConfigurationResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="uploadSignerCertificateChain">
      <wsdl:input message="tns:uploadSignerCertificateChain" name="uploadSignerCertificateChain">
    </wsdl:input>
      <wsdl:output message="tns:uploadSignerCertificateChainResponse" name="uploadSignerCertificateChainResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
      <wsdl:fault message="tns:IllegalRequestException" name="IllegalRequestException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentWorkerConfig">
      <wsdl:input message="tns:getCurrentWorkerConfig" name="getCurrentWorkerConfig">
    </wsdl:input>
      <wsdl:output message="tns:getCurrentWorkerConfigResponse" name="getCurrentWorkerConfigResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeGlobalProperty">
      <wsdl:input message="tns:removeGlobalProperty" name="removeGlobalProperty">
    </wsdl:input>
      <wsdl:output message="tns:removeGlobalPropertyResponse" name="removeGlobalPropertyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryArchive">
      <wsdl:input message="tns:queryArchive" name="queryArchive">
    </wsdl:input>
      <wsdl:output message="tns:queryArchiveResponse" name="queryArchiveResponse">
    </wsdl:output>
      <wsdl:fault message="tns:SignServerException" name="SignServerException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setGlobalProperty">
      <wsdl:input message="tns:setGlobalProperty" name="setGlobalProperty">
    </wsdl:input>
      <wsdl:output message="tns:setGlobalPropertyResponse" name="setGlobalPropertyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getKeyUsageCounterValue">
      <wsdl:input message="tns:getKeyUsageCounterValue" name="getKeyUsageCounterValue">
    </wsdl:input>
      <wsdl:output message="tns:getKeyUsageCounterValueResponse" name="getKeyUsageCounterValueResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="process">
      <wsdl:input message="tns:process" name="process">
    </wsdl:input>
      <wsdl:output message="tns:processResponse" name="processResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:SignServerException" name="SignServerException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
      <wsdl:fault message="tns:IllegalRequestException" name="IllegalRequestException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="globalReload">
      <wsdl:input message="tns:globalReload" name="globalReload">
    </wsdl:input>
      <wsdl:output message="tns:globalReloadResponse" name="globalReloadResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForKey2">
      <wsdl:input message="tns:getPKCS10CertificateRequestForKey2" name="getPKCS10CertificateRequestForKey2">
    </wsdl:input>
      <wsdl:output message="tns:getPKCS10CertificateRequestForKey2Response" name="getPKCS10CertificateRequestForKey2Response">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateSigner">
      <wsdl:input message="tns:activateSigner" name="activateSigner">
    </wsdl:input>
      <wsdl:output message="tns:activateSignerResponse" name="activateSignerResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenAuthenticationFailureException" name="CryptoTokenAuthenticationFailureException">
    </wsdl:fault>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeAuthorizedClient">
      <wsdl:input message="tns:removeAuthorizedClient" name="removeAuthorizedClient">
    </wsdl:input>
      <wsdl:output message="tns:removeAuthorizedClientResponse" name="removeAuthorizedClientResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="globalResync">
      <wsdl:input message="tns:globalResync" name="globalResync">
    </wsdl:input>
      <wsdl:output message="tns:globalResyncResponse" name="globalResyncResponse">
    </wsdl:output>
      <wsdl:fault message="tns:ResyncException" name="ResyncException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="generateSignerKey">
      <wsdl:input message="tns:generateSignerKey" name="generateSignerKey">
    </wsdl:input>
      <wsdl:output message="tns:generateSignerKeyResponse" name="generateSignerKeyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequest">
      <wsdl:input message="tns:getPKCS10CertificateRequest" name="getPKCS10CertificateRequest">
    </wsdl:input>
      <wsdl:output message="tns:getPKCS10CertificateRequestResponse" name="getPKCS10CertificateRequestResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setWorkerProperty">
      <wsdl:input message="tns:setWorkerProperty" name="setWorkerProperty">
    </wsdl:input>
      <wsdl:output message="tns:setWorkerPropertyResponse" name="setWorkerPropertyResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="uploadSignerCertificate">
      <wsdl:input message="tns:uploadSignerCertificate" name="uploadSignerCertificate">
    </wsdl:input>
      <wsdl:output message="tns:uploadSignerCertificateResponse" name="uploadSignerCertificateResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
      <wsdl:fault message="tns:IllegalRequestException" name="IllegalRequestException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateSigner">
      <wsdl:input message="tns:deactivateSigner" name="deactivateSigner">
    </wsdl:input>
      <wsdl:output message="tns:deactivateSignerResponse" name="deactivateSignerResponse">
    </wsdl:output>
      <wsdl:fault message="tns:CryptoTokenOfflineException" name="CryptoTokenOfflineException">
    </wsdl:fault>
      <wsdl:fault message="tns:InvalidWorkerIdException" name="InvalidWorkerIdException">
    </wsdl:fault>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="reloadConfiguration">
      <wsdl:input message="tns:reloadConfiguration" name="reloadConfiguration">
    </wsdl:input>
      <wsdl:output message="tns:reloadConfigurationResponse" name="reloadConfigurationResponse">
    </wsdl:output>
      <wsdl:fault message="tns:AdminNotAuthorizedException" name="AdminNotAuthorizedException">
    </wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="AdminWSServiceSoapBinding" type="tns:AdminWS">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getStatus">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getStatus">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getStatusResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryArchiveWithIds">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="queryArchiveWithIds">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="queryArchiveWithIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SignServerException">
        <soap:fault name="SignServerException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeWorkerProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeWorkerProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeWorkerPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addAuthorizedClient">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addAuthorizedClient">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addAuthorizedClientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getWorkers">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getWorkers">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getWorkersResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryAuditLog">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="queryAuditLog">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="queryAuditLogResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SignServerException">
        <soap:fault name="SignServerException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSigningValidityNotBefore">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSigningValidityNotBefore">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSigningValidityNotBeforeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="importCertificateChain">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="importCertificateChain">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="importCertificateChainResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="OperationUnsupportedException">
        <soap:fault name="OperationUnsupportedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="CertificateException">
        <soap:fault name="CertificateException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSigningValidityNotAfter">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSigningValidityNotAfter">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSigningValidityNotAfterResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="destroyKey">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="destroyKey">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="destroyKeyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAuthorizedClients">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAuthorizedClients">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAuthorizedClientsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForAlias2">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPKCS10CertificateRequestForAlias2">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPKCS10CertificateRequestForAlias2Response">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerCertificateChain">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSignerCertificateChain">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSignerCertificateChainResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForAlias">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPKCS10CertificateRequestForAlias">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPKCS10CertificateRequestForAliasResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForKey">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPKCS10CertificateRequestForKey">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPKCS10CertificateRequestForKeyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="testKey">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="testKey">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="testKeyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="KeyStoreException">
        <soap:fault name="KeyStoreException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getWorkerId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getWorkerId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getWorkerIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryTokenEntries">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="queryTokenEntries">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="queryTokenEntriesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AuthorizationDeniedException">
        <soap:fault name="AuthorizationDeniedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="QueryException">
        <soap:fault name="QueryException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignServerException">
        <soap:fault name="SignServerException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="OperationUnsupportedException">
        <soap:fault name="OperationUnsupportedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeKey">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeKey">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeKeyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignServerException">
        <soap:fault name="SignServerException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="KeyStoreException">
        <soap:fault name="KeyStoreException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerCertificate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSignerCertificate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSignerCertificateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getGlobalConfiguration">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getGlobalConfiguration">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getGlobalConfigurationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="uploadSignerCertificateChain">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="uploadSignerCertificateChain">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="uploadSignerCertificateChainResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IllegalRequestException">
        <soap:fault name="IllegalRequestException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentWorkerConfig">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getCurrentWorkerConfig">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCurrentWorkerConfigResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeGlobalProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeGlobalProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeGlobalPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="queryArchive">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="queryArchive">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="queryArchiveResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SignServerException">
        <soap:fault name="SignServerException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setGlobalProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setGlobalProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setGlobalPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getKeyUsageCounterValue">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getKeyUsageCounterValue">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getKeyUsageCounterValueResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="process">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="process">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="processResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SignServerException">
        <soap:fault name="SignServerException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IllegalRequestException">
        <soap:fault name="IllegalRequestException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="globalReload">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="globalReload">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="globalReloadResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequestForKey2">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPKCS10CertificateRequestForKey2">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPKCS10CertificateRequestForKey2Response">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateSigner">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSigner">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSignerResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenAuthenticationFailureException">
        <soap:fault name="CryptoTokenAuthenticationFailureException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeAuthorizedClient">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeAuthorizedClient">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeAuthorizedClientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="globalResync">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="globalResync">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="globalResyncResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ResyncException">
        <soap:fault name="ResyncException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="generateSignerKey">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="generateSignerKey">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="generateSignerKeyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPKCS10CertificateRequest">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPKCS10CertificateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPKCS10CertificateRequestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setWorkerProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setWorkerProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setWorkerPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="uploadSignerCertificate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="uploadSignerCertificate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="uploadSignerCertificateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IllegalRequestException">
        <soap:fault name="IllegalRequestException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateSigner">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="deactivateSigner">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deactivateSignerResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="CryptoTokenOfflineException">
        <soap:fault name="CryptoTokenOfflineException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidWorkerIdException">
        <soap:fault name="InvalidWorkerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="reloadConfiguration">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="reloadConfiguration">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="reloadConfigurationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="AdminNotAuthorizedException">
        <soap:fault name="AdminNotAuthorizedException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="AdminWSService">
    <wsdl:port binding="tns:AdminWSServiceSoapBinding" name="AdminWSPort">
      <soap:address location="https://localhost:8443/signserver/AdminWSService/AdminWS"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>