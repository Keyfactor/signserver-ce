# Properties in file:
#
# databaseprotection.keyid.0 = (keyid)
# databaseprotection.keylabel.0 (key label to use)
# databaseprotection.classname.0 = (classname, ex org.cesecore.keys.token.SoftCryptoToken)
# databaseprotection.properties.0 = (serialized token properties)
# databaseprotection.data.0 = (base64 encoded token data)
# databaseprotection.tokenpin.0 = userpin1 (activation code for crypto token). Could be obfuscated with '$EJBCA_HOME/ECA-2655_5_0/bin/ejbca.sh encryptpwd'
# databaseprotection.version.0 = 2 (1 = HMACSHA256, 2 = public-key crypto specified in sigalg property below. Keys pointed by label must match this)
# databaseprotection.sigalg.0 = SHA256WithRSA (signature algorithm to use, you can also use e.g. SHA256WithECDSA)
#
# Multiple crypto tokens can be repeated by using xx.1 etc, where keyid is an integer, defined by you.
# this makes it possible to start using a new crypto token with new keys, while still being able to verify older protected rows.

# Default false, don't use database integrity protection by default because it requires configuration
#databaseprotection.enablesign.AuditRecordData = true
#databaseprotection.enableverify.AuditRecordData = true

# Should the application stop working if we can not verify a row in the database? Default true.
#databaseprotection.erroronverifyfail = true

# The id of the token that should be used for protection of new and updated database rows
databaseprotection.keyid = 400

# Definition of the first Crypto Token that can be used for protection (SHA256WithRSA)
# keylabel defines which key in the token that is used for database protection
# This crypto token works good for testing and example. In production you should create a real one (that not everyone else in the world have as well) 
databaseprotection.keyid.0 = 400
databaseprotection.keylabel.0 = dbStoreKey
databaseprotection.classname.0 = org.cesecore.keys.token.SoftCryptoToken
databaseprotection.properties.0 =
databaseprotection.data.0 = MIACAQMwgAYJKoZIhvcNAQcBoIAkgASCA+gwgDCABgkqhkiG9w0BBwGggCSABIIDFzCCAxMwggMPBgsqhkiG9w0BDAoBAqCCArIwggKuMCgGCiqGSIb3DQEMAQMwGgQUoJf9vyr8B9t39behotCowOansBwCAgQABIICgGXl+JjLI1FdinxhnmYyeIArmYRwxCEJY7BP1778vXHhEk34ZIgrZDKoTETkjmz3QOZ1jE/lcZL9884zjovz/PdOR7vYP85X803u/vqSMDe+Z7JmCucJ8tGmWxGa6t++X+xFv25U5w5IePQ7FbFnzjC4P+Il+E7jDsv8Qap+YW0tiyAWsfkOdSqscSJWMcDH894P8sCO3LBTnpT14AOdLj69YdFOCmrMEFZYbko6zSXFGyeADHnJaz3WWU9yHRY90Hz0JBlMuV3eSErCjOf647vRBoshwHMuVGlWya3ZbuACqDE9tq3H9sUQX4G5YubBJdpqyietA/VcXSsKPk8OyWXXr2A/U733TAQ08Z+FFir4ogLsIN5mTfCnk8/R+wScqTpT4Ngtd6VjIOcHImRR6tA2yTcJtBhQxBeFbZh108VHCqgx6twLoRHybr/KtGeI+mbK5NgMd0Zi6Q3HNwcvgrnvm7/J+0+PVdWQ6cq2pPYuRW3KIIXQIfu1L5Ax2nZ/prWmy09X9P2yvxrl/knynf+Cc2MUhbEu++uSpjBzG3TG7zKFXzTV0J7tsirb7lMQYMiU+8+DW65FK7DRl/MWjSOmYT7ax6yXatFPrc5xl6iBhNu9gEY2r9/PotOo8CoUhR4BVDrGmYEBBdGKACZjxGZ71M8h7CziUREdq9seG12Z8yOTOrpXcgQ4hfDNCJpyvpp8qu8dsOeeQbNaiZ39TGNDVsRAT44ibvyzmw0BYYQGqS73uOH8IiFOLTip3CSm78Qn4rfVq0pjq/1fKXFrjowl4DWhVpbDSptSQtda31lPa5+6/rMM05f+mIV/WT3ouj5uCg2RyeyE3DqPSPn7oowxSjAjBgkqhkiG9w0BCRQxFh4UAGQAYgBTAHQAbwByAGUASwBlAHkwIwYJKoZIhvcNAQkVMRYEFMG7BSYBT2CyAkjFNA9qAW8ySV3eAAAAAAAAMIAGCSqGSIb3DQEHBqCAMIACAQAwgAYJKoZIhvcNAQcBMCgGCiqGSIb3DQEMAQYwGgQUCESSXTsDUqs0+/z9Uh1190RzHQYCAgQAoIAEggJg0qFQBFTyIlgq3tl6k+xbei3WLiEeX75hTS2Sp1H0eFf1tduo9MwUFGSJwNBEPRHxIFwMLnxbSMZpppDjCEZddxXArORQTJgpCrBFTruAum849qQkE5iAXHwv/qaCq2QpE9+mBIICCZLDc+48Orv5j+BlG0aVg+6gluX7mduzJ6A3LbaSsDXs/kMst7R8X4E8ngqmYeMFv4kx3Cvs2ytfEAfM3m3PHSF/srw/cm5Kq2STlSbxLrbQEzaWThDHqvHrJZVtiQstcid/CZ0tHgLrv8FAGIMY50ZsMumyFZKyLDKO5/qrhCUyVxE4sGS0Snx1dMmv/AN/vP/NjAGbTpdaAqhUry/g0Lr4qkxeqC0NjoRXBrI0rgBvjMdbhB9Wt4/tqANJ9w6Q1pgET2UThcLPQlm7QnbUwNDvUmSR6uvFk9gZ75L3Q5xx3iTmLQRPPdAktoR8jM0PM3NEeU56qRj58dh5B4qBuJVhZYfzv0YIzVUaMh+ObDRpw4JrccsvZLdYuV8E18ViFZsJDLkeHYOi2at1Vl72mgq/8sEN/9EEvuZTDywO0K0cq+hr20VN6DLsdmCp4Y3pwPIgqU16QRSUGp4iXNa32srbon9HahcBnJ2nKxNqc/QqQZ8vd+aiVwIB9VeDS+ESA1hHwzrOBR6ETjKQzsQNICodsftTUSAw65KierfI3m4rZJ4ot10log2fTqNNpTr1xbnfYIxudRarDPj0g96dllk1GgLCxobOWodAm8wjq6owURwuvFBSzK5oQbcHkahsn1/3QTIdosph0Ogwzk2ztsdalx+C1CQPjgg9sQpDAAAAAAAAAAAAAAAAAAAAAAAAMD0wITAJBgUrDgMCGgUABBTho0WL80msVWn2+P1QzXJk+UXGIgQUDCn5DHvC9Ioqp/a6vgNj1eZT7ScCAgQAAAA=
databaseprotection.tokenpin.0 = userpin1
databaseprotection.version.0 = 2
databaseprotection.sigalg.0 = SHA256WithRSA

# Definition of a third Crypto Token using a PKCS#11 HSM, suitable for digital signature
# Do not forget to generate keys on the HSM though, keys usable by Java PKCS#11.
# The PKCS11CryptoToken in CESeCore is very good at that.
#databaseprotection.keyid.1 = 401
#databaseprotection.keylabel.1 = dbProtKey
#databaseprotection.classname.1 = org.cesecore.keys.token.PKCS11CryptoToken
#databaseprotection.properties.1 = sharedLibrary=/opt/utimaco/Software/PKCS11/lib/Linux-x86-64/libcs2_pkcs11.so, slotLabelType=SLOT_NUMBER, slotLabelValue=1
#databaseprotection.data.1 = 
#databaseprotection.tokenpin.1 = userpin1
#databaseprotection.version.1 = 2

# Below example is for a Crypto Token using PKCS#11 HSM but with the JackNJI11 provider.
#databaseprotection.keyid.1 = 403
#databaseprotection.keylabel.1 = dbProtKey
#databaseprotection.classname.1 = org.signserver.p11ng.common.cryptotoken.JackNJI11DatabaseProtectionCryptoToken
#databaseprotection.properties.1 = sharedLibrary=/opt/utimaco/Software/PKCS11/lib/Linux-x86-64/libcs2_pkcs11.so, SLOTLABELTYPE=SLOT_NUMBER, SLOTLABELVALUE=1, pin=userpin1
#databaseprotection.data.1 =
#databaseprotection.tokenpin.1 = userpin1
#databaseprotection.version.1 = 2

# Definition of a crypto token that could only be used by the 'ejbca-db-cli' to
# verify a version 2 table. 'data' could be either the public key in PEM format
# or a certificate in PEM format for the key.
# 'keyid' must be the same as the keyid used in the real CA configuration.
# To get the public key from an HSM this could be done:
# $CTB_HOME/ejbcaClientToolBox.sh PKCS11HSMKeyTool certreq /opt/PTK/lib/libcryptoki.so 1 dbProtKey
# openssl req -in dbProtKey.pem -noout -pubkey > dbProtKeyPub.pem
#databaseprotection.keyid.3 = 402
#databaseprotection.keylabel.3 = dummy
#databaseprotection.classname.3 = org.cesecore.keys.token.PublicCryptoToken
#databaseprotection.version.3 = 2
#databaseprotection.data.3 =\
#MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtn85gX3W0l2X5mYgApsx02JLO\
#XKwirRFUpnY5AK4Re8FC5McbNGUFHPTvInJgwOZOOt5u4Gv6pwa1QhbFn5GxHXV/\
#S+fEVn6ZWfgCtuLTf64cDKyMmzFgKRUxMs7VttcE9yxaLpFPPHpQG71eQa3uIsaI\
#P+JYTOtUjz7A4sgw8QIDAQAB

# A verification crypto token that has only the certificate from the crypto token with id 400 above.
# This is simply the certificate extracted from the PKCS#12 keystore above.
# Must use same keyid when verifying, i.e. 400 as above, and remove the above crypto token with id 400.
#databaseprotection.keyid.2 = 400
#databaseprotection.keylabel.2 = dummy
#databaseprotection.classname.2 = org.cesecore.keys.token.PublicCryptoToken
#databaseprotection.version.2 = 2
#databaseprotection.data.2 =\
#MIIB2zCCAUSgAwIBAgIGAS6fVTwmMA0GCSqGSIb3DQEBBQUAMDExCzAJBgNVBAYT\
#AlVTMQ8wDQYDVQQHEwZhcm91bmQxETAPBgNVBAMTCHNvbWUgZ3V5MB4XDTExMDMx\
#MDEwMzQ0NloXDTQxMDMwMzEwMzQ0NlowMTELMAkGA1UEBhMCVVMxDzANBgNVBAcT\
#BmFyb3VuZDERMA8GA1UEAxMIc29tZSBndXkwgZ8wDQYJKoZIhvcNAQEBBQADgY0A\
#MIGJAoGBALDWNYry6gd1emS3w23Hn8FrulXTcp8nTCEizpKt57/8vNiTDUgEgM6K\
#InjcmfiGvOiZ2DiTIg9Lgd9CRyywbu6ZHo7UL4uKm2hZRCpoDAQ0GQPdQpGB/Pes\
#obpk66ozr0ljLCojc7KQD/Xb/i21hzLmLlxSKLkl3Wb4LWj/kdizAgMBAAEwDQYJ\
#KoZIhvcNAQEFBQADgYEAL+Xt2cfEu5yhHmvxFsdJmjBj0aJX7614ajwn8hGTbpqq\
#5+J0niaFnkatt7Te/bUsI1w9L4vVBBNICy2Abe7XW9VVMZm2WWc2p1zUjBT47FOF\
#BuisXhPtslItBfFxmmgj8HS0iEiiQl7GJ9f201YXvAIVbvuSJ6cp47PuG9wFD6M=
